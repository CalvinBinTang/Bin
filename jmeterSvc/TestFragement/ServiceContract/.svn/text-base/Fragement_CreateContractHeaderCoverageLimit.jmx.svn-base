<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.1 r1853635">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Create ContractHeader Coverage Limit" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Create ContractHeader Coverage Limit" enabled="true"/>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="set default values" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="script">String defaultValue = &quot;[N/A]&quot;;
List varsList = [];

// Add module variables here
//varsList.add(&quot;[prefix]_[var_name]&quot;);
//Create Contract Header Limits
varsList.add(&quot;domainCode&quot;);
//varsList.add(&quot;count&quot;);
varsList.add(&quot;ContractHeaderLimits_serviceContractNumber&quot;);
varsList.add(&quot;ContractHeaderLimits_chargeCode&quot;);
//varsList.add(&quot;ContractHeaderLimits_contractLimitLine&quot;);
varsList.add(&quot;ContractHeaderLimits_endDate&quot;);
varsList.add(&quot;ContractHeaderLimits_endUserType&quot;);
varsList.add(&quot;ContractHeaderLimits_invoiceSort&quot;);
varsList.add(&quot;ContractHeaderLimits_limitAmount&quot;);
varsList.add(&quot;ContractHeaderLimits_limitType&quot;);
varsList.add(&quot;ContractHeaderLimits_limitTypeDisplayValue&quot;);
varsList.add(&quot;ContractHeaderLimits_listPriceLimit&quot;);
varsList.add(&quot;ContractHeaderLimits_overLimitChargeCode&quot;);
varsList.add(&quot;ContractHeaderLimits_percentCovered&quot;);
varsList.add(&quot;ContractHeaderLimits_serviceCategory&quot;);
varsList.add(&quot;ContractHeaderLimits_startDate&quot;);
varsList.add(&quot;ContractHeaderLimits_workCode&quot;);
varsList.add(&quot;ContractHeaderLimits_error&quot;);


// Set default values
varsList.each {
	if (vars.get(&quot;${it}&quot;) == null) vars.put(&quot;${it}&quot;, defaultValue);
}</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="serviceContractHeader fetch ${ContractHeaderLimits_serviceContractNumber}" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="serviceContractNumber" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">serviceContractNumber</stringProp>
                <stringProp name="Argument.value">${ContractHeaderLimits_serviceContractNumber}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="domainCode" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">domainCode</stringProp>
                <stringProp name="Argument.value">${domainCode}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="prefix" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">C</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">prefix</stringProp>
              </elementProp>
              <elementProp name="viewUri" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">urn:be:com.qad.service.contract.IServiceContractHeader</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
                <stringProp name="Argument.name">viewUri</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${server}</stringProp>
          <stringProp name="HTTPSampler.port">${tomcatPort}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/${webapp}/api/erp/serviceContractHeaderV2s</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json; charset=UTF-8
				</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">${protocol}://${server}:${tomcatPort}
				</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64)
					AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87
					Safari/537.36</stringProp>
              </elementProp>
              <elementProp name="DNT" elementType="Header">
                <stringProp name="Header.name">DNT</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="X-Requested-With" elementType="Header">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">${protocol}://${server}:${tomcatPort}/${webapp}/
				</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Full Response" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">RequestData</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NotFound</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Contract Header Coverage Limit" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">prevContractHeaderLimits</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.serviceContractHeaderV2s[0].svcContractHeaderLimits</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">[]</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Cotract Header start Date" enabled="false">
            <stringProp name="JSONPostProcessor.referenceNames">contractHeaderStartDate</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.serviceContractHeaders[0].startDate</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Cotract Header End Date" enabled="false">
            <stringProp name="JSONPostProcessor.referenceNames">contractHeaderEndDate</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.serviceContractHeaders[0].endDate</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="Sample.scope">all</stringProp>
          </JSONPostProcessor>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="prevContractHeaderLimits = Null" enabled="true">
          <stringProp name="IfController.condition">${__jexl3(&quot;${prevContractHeaderLimits}&quot; == &quot;[]&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="blank coverage limit- Create Coverage Limit for ${ContractHeaderLimits_limitTypeDisplayValue}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${RequestData}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${server}</stringProp>
            <stringProp name="HTTPSampler.port">${tomcatPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/${webapp}/api/erp/serviceContractHeaderV2s?domainCode=${domainCode}&amp;serviceContractNumber=${ContractHeaderLimits_serviceContractNumber}&amp;prefix=C</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Update JSON using JavaScript" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">var requestData = vars.get(&quot;RequestData&quot;);
//var svcContractHeader = vars.get(&quot;svcContractHeader&quot;);
var objRequest = JSON.parse(requestData);
var svcContractHeaderLimits = vars.get(&quot;prevContractHeaderLimits&quot;);
//var svcContractHeaderLimits = JSON.parse(svcContractHeaderLimits);
svcContractHeaderLimits = &quot;{\&quot;chargeCode\&quot;:\&quot;${ContractHeaderLimits_chargeCode}\&quot;,\&quot;contractLimitLine\&quot;:0,\&quot;dataOperation\&quot;:\&quot;C\&quot;,\&quot;endDate\&quot;:\&quot;${ContractHeaderLimits_endDate}\&quot;,\&quot;endUserType\&quot;:\&quot;${ContractHeaderLimits_endUserType}\&quot;,\&quot;fileType\&quot;:\&quot;sa_mstr\&quot;,\&quot;invoiceSort\&quot;:\&quot;${ContractHeaderLimits_invoiceSort}\&quot;,\&quot;limitAmount\&quot;:\&quot;${ContractHeaderLimits_limitAmount}\&quot;,\&quot;limitType\&quot;:\&quot;${ContractHeaderLimits_limitType}\&quot;,\&quot;limitTypeDisplayValue\&quot;:\&quot;${ContractHeaderLimits_limitTypeDisplayValue}\&quot;,\&quot;listPriceLimit\&quot;:\&quot;${ContractHeaderLimits_limitAmount}\&quot;,\&quot;overLimitChargeCode\&quot;:\&quot;${ContractHeaderLimits_overLimitChargeCode}\&quot;,\&quot;percentCovered\&quot;:\&quot;${ContractHeaderLimits_percentCovered}\&quot;,\&quot;serviceCategory\&quot;:\&quot;${ContractHeaderLimits_serviceCategory}\&quot;,\&quot;startDate\&quot;:\&quot;${ContractHeaderLimits_startDate}\&quot;,\&quot;workCode\&quot;:\&quot;${ContractHeaderLimits_workCode}\&quot;}&quot;;
//var strUpdatedRequest= requestData.replace(&quot;svcContractHeaderLimits&quot;:[],svcContractHeaderLimits);

objRequest.serviceContractHeaderV2s[0].svcContractHeaderLimits[0]= svcContractHeaderLimits;
//var strUpdatedRequest1 = strUpdatedRequest.replace(/&quot;([^&quot;]*)&quot;/,{);
//Update ${RequestData} to have the value of the updated JSON
var strUpdatedRequest = JSON.stringify(objRequest);
var str2 = strUpdatedRequest.replace(/&quot;{/g,&quot;{&quot;);
var str3= str2.replace(/}&quot;/g,&quot;}&quot;);
var str4= str3.replace(/\\\&quot;/g,&quot;\&quot;&quot;);

vars.put(&quot;RequestData&quot;, str4);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${server}:${tomcatPort}/${webapp}/</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${protocol}://${server}:${tomcatPort}</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.90 Safari/537.36</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract Full Response" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">RequestData</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NotFound</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">var failureMessage = &quot;&quot;;
var temp = prev.getResponseDataAsString();
vars.put(&quot;temp&quot;, temp);
var errormessage = JSON.parse(temp);
var requestData = vars.get(&quot;RequestData&quot;);
var objRequest = JSON.parse(requestData);


if (&quot;${ContractHeaderLimits_error}&quot; !== &quot;[N/A]&quot;) 
{ 
	
	if(&quot;${ContractHeaderLimits_error}&quot;!=errormessage.submitResult.errors[2].message)
	{
		failureMessage = failureMessage + &quot;Expect ContractHeaderLimits_error ${ContractHeaderLimits_error} but got &quot;+errormessage.submitResult.errors[2].message;
	}
}
else if(errormessage.submitResult.success != true)
{
	failureMessage = failureMessage + &quot;Expect true but got &quot;+errormessage.submitResult.success+&quot;\n&quot;;
}</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler1" enabled="false">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
        </hashTree>
        <IfController guiclass="IfControllerPanel" testclass="IfController" testname="prevContractHeaderLimits != Null" enabled="true">
          <stringProp name="IfController.condition">${__jexl3(&quot;${prevContractHeaderLimits}&quot; != &quot;[]&quot;)}</stringProp>
          <boolProp name="IfController.evaluateAll">false</boolProp>
          <boolProp name="IfController.useExpression">true</boolProp>
        </IfController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Create Coverage Limit for ${ContractHeaderLimits_limitTypeDisplayValue}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${RequestData}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${server}</stringProp>
            <stringProp name="HTTPSampler.port">${tomcatPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/${webapp}/api/erp/serviceContractHeaderV2s?domainCode=${domainCode}&amp;serviceContractNumber=${ContractHeaderLimits_serviceContractNumber}&amp;prefix=C</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Update JSON using JavaScript" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">var requestData = vars.get(&quot;RequestData&quot;);
var objRequest = JSON.parse(requestData);

//Update the value of the data objec
if (&quot;${ContractHeaderLimits_limitTypeDisplayValue}&quot; != &quot;[N/A]&quot;)objRequest.serviceContractHeaderV2s[0].svcContractHeaderLimits[0].limitTypeDisplayValue = &quot;${ContractHeaderLimits_limitTypeDisplayValue}&quot;;
if (&quot;${ContractHeaderLimits_workCode}&quot; != &quot;[N/A]&quot;) objRequest.serviceContractHeaderV2s[0].svcContractHeaderLimits[0].workCode = &quot;${ContractHeaderLimits_workCode}&quot;;
if (&quot;${ContractHeaderLimits_serviceCategory}&quot; != &quot;[N/A]&quot;) objRequest.serviceContractHeaderV2s[0].svcContractHeaderLimits[0].serviceCategory = &quot;${ContractHeaderLimits_serviceCategory}&quot;;
if (&quot;${ContractHeaderLimits_invoiceSort}&quot; != &quot;[N/A]&quot;) objRequest.serviceContractHeaderV2s[0].svcContractHeaderLimits[0].invoiceSort = &quot;${ContractHeaderLimits_invoiceSort}&quot;;
if (&quot;${ContractHeaderLimits_startDate}&quot; != &quot;[N/A]&quot;) objRequest.serviceContractHeaderV2s[0].svcContractHeaderLimits[0].startDate = &quot;${ContractHeaderLimits_startDate}&quot;;
if (&quot;${ContractHeaderLimits_endDate}&quot; != &quot;[N/A]&quot;) objRequest.serviceContractHeaderV2s[0].svcContractHeaderLimits[0].endDate = &quot;${ContractHeaderLimits_endDate}&quot;;
if (&quot;${ContractHeaderLimits_limitAmount}&quot; != &quot;[N/A]&quot;) objRequest.serviceContractHeaderV2s[0].svcContractHeaderLimits[0].limitAmount = &quot;${ContractHeaderLimits_limitAmount}&quot;;
if (&quot;${ContractHeaderLimits_percentCovered}&quot; != &quot;[N/A]&quot;) objRequest.serviceContractHeaderV2s[0].svcContractHeaderLimits[0].percentCovered = &quot;${ContractHeaderLimits_percentCovered}&quot;;
if (&quot;${ContractHeaderLimits_listPriceLimit}&quot; != &quot;[N/A]&quot;) objRequest.serviceContractHeaderV2s[0].svcContractHeaderLimits[0].listPriceLimit = &quot;${ContractHeaderLimits_listPriceLimit}&quot;;
if (&quot;${ContractHeaderLimits_chargeCode}&quot; != &quot;[N/A]&quot;) objRequest.serviceContractHeaderV2s[0].svcContractHeaderLimits[0].chargeCode = &quot;${ContractHeaderLimits_chargeCode}&quot;;
if (&quot;${ContractHeaderLimits_overLimitChargeCode}&quot; != &quot;[N/A]&quot;) objRequest.serviceContractHeaderV2s[0].svcContractHeaderLimits[0].overLimitChargeCode = &quot;${ContractHeaderLimits_overLimitChargeCode}&quot;;

var strUpdatedRequest = JSON.stringify(objRequest);
//Update ${RequestData} to have the value of the updated JSON
vars.put(&quot;RequestData&quot;, strUpdatedRequest);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${server}:${tomcatPort}/${webapp}/</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${protocol}://${server}:${tomcatPort}</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.90 Safari/537.36</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ExtractFullResponse" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">RequestData</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NotFound</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">var failureMessage = &quot;&quot;;
var temp = prev.getResponseDataAsString();
vars.put(&quot;temp&quot;, temp);
var errormessage = JSON.parse(temp);
var requestData = vars.get(&quot;RequestData&quot;);
var objRequest = JSON.parse(requestData);


if (&quot;${ContractHeaderLimits_error}&quot; != &quot;[N/A]&quot;) 
{ 
	
	if(&quot;${ContractHeaderLimits_error}&quot;!=errormessage.submitResult.errors[2].message)
	{
		failureMessage = failureMessage + &quot;Expect ContractHeaderLimits_error ${ContractHeaderLimits_error} but got &quot;+errormessage.submitResult.errors[2].message;
	}
}
else if(errormessage.submitResult.success != true)
{
	failureMessage = failureMessage + &quot;Expect true but got &quot;+errormessage.submitResult.success+&quot;\n&quot;;
}</stringProp>
            </JSR223Assertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="reset data" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="script">String prefix = &quot;ContractHeaderLimits_&quot;;

vars.entrySet().each { entry -&gt; 
	def name = entry.getKey()
	if (name.startsWith(prefix)) {
		vars.put(name, &quot;[N/A]&quot;);
	}
}</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
