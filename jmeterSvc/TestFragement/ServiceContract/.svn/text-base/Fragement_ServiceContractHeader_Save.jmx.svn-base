<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.1 r1853635">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Service Contract Header Save" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="save" enabled="false"/>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="set Default Data" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="script">String defaultValue = &quot;[N/A]&quot;;
List varsList = [];

// URL Paremeters
varsList.add(&quot;serviceContract_domainCode&quot;);
varsList.add(&quot;serviceContract_contract&quot;);
varsList.add(&quot;serviceContract_prefix&quot;);
varsList.add(&quot;serviceContract_uri&quot;);
// Inputs
varsList.add(&quot;serviceContract_update_s_customerCode&quot;); //sold-To
varsList.add(&quot;serviceContract_update_s_startDate&quot;);
varsList.add(&quot;serviceContract_update_s_endDate&quot;);
varsList.add(&quot;serviceContract_update_s_serviceType&quot;);
varsList.add(&quot;serviceContract_update_s_purchaseOrder&quot;);
varsList.add(&quot;serviceContract_update_s_orderDate&quot;);
varsList.add(&quot;serviceContract_update_s_cancelDate&quot;);
varsList.add(&quot;serviceContract_update_s_currencyCode&quot;);
varsList.add(&quot;serviceContract_update_s_siteCode&quot;);
varsList.add(&quot;serviceContract_update_s_siteEntityCode&quot;); //entity
varsList.add(&quot;serviceContract_update_s_masterContract&quot;);
varsList.add(&quot;serviceContract_update_s_type&quot;);
varsList.add(&quot;serviceContract_update_s_trailer1&quot;);
varsList.add(&quot;serviceContract_update_s_trailer2&quot;);
varsList.add(&quot;serviceContract_update_s_trailer3&quot;);
varsList.add(&quot;serviceContract_update_s_creditTerms&quot;);

varsList.add(&quot;serviceContract_update_i_visits&quot;); //contract Visit
varsList.add(&quot;serviceContract_update_i_isProcessContractSummary&quot;);
varsList.add(&quot;serviceContract_update_i_isProcessPostTrailer&quot;);
varsList.add(&quot;serviceContract_update_i_trailerAmount1&quot;);
varsList.add(&quot;serviceContract_update_i_trailerAmount2&quot;);
varsList.add(&quot;serviceContract_update_i_trailerAmount3&quot;);

// Fields for validation
varsList.add(&quot;serviceContract_validate_customerCode&quot;); //sold-To
varsList.add(&quot;serviceContract_validate_startDate&quot;);
varsList.add(&quot;serviceContract_validate_endDate&quot;);
varsList.add(&quot;serviceContract_validate_serviceType&quot;);
varsList.add(&quot;serviceContract_validate_purchaseOrder&quot;);
varsList.add(&quot;serviceContract_validate_orderDate&quot;);
varsList.add(&quot;serviceContract_validate_cancelDate&quot;);
varsList.add(&quot;serviceContract_validate_currencyCode&quot;);
varsList.add(&quot;serviceContract_validate_siteCode&quot;);
varsList.add(&quot;serviceContract_validate_siteEntityCode&quot;); //entity
varsList.add(&quot;serviceContract_validate_masterContract&quot;);
varsList.add(&quot;serviceContract_validate_type&quot;);
varsList.add(&quot;serviceContract_validate_visits&quot;); //contract Visit

varsList.each {
if (vars.get(&quot;${it}&quot;) == null) vars.put(&quot;${it}&quot;, defaultValue);
}</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Service Contract Header save" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${RequestData}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${server}</stringProp>
          <stringProp name="HTTPSampler.port">${tomcatPort}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/${webapp}/api/erp/serviceContractHeaderV2s?domainCode=${domainCode}&amp;serviceContractNumber=${serviceContract_contract}&amp;prefix=${serviceContract_prefix}&amp;viewUri=${serviceContract_uri}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Update JSON using JavaScript" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">var requestData = vars.get(&quot;RequestData&quot;);
var objRequest = JSON.parse(requestData);
var defaultValue = &quot;[N/A]&quot;;
var prefix1 = &quot;serviceContract_update_&quot;;
var prefix2 = &quot;serviceContract_validate_&quot;;


// All the fields in dataset should be set here
// Below code block is only for depotOrderHeaders[0] validation, please use other prefix and code to cover other scenarios.
var iter = vars.getIterator();

while (iter.hasNext()){
	//var varName = o.name;
	var e = iter.next();
	var varName = e.getKey();
	
	//log.info(varName);
	// if the prefix matches
	if (varName.startsWith(prefix1)){		
		if(e.getValue() != defaultValue){
			//log.info(&quot;111111111111111111\n&quot;);
			var temp = varName.replace(prefix1,&quot;&quot;)
			var temp0 = vars.get(varName);
			//log.info(temp+&quot;\n&quot;);
			//log.info(temp0+&quot;\n&quot;);
			if(temp.startsWith(&quot;s_&quot;)){ 
				//log.info(&quot;2222222222222222222222\n&quot;);
				eval(&quot;objRequest.serviceContractHeaderV2s[0].&quot; + temp.replace(&quot;s_&quot;,&quot;&quot;) + &quot;= &apos;&quot; + temp0 + &quot;&apos;&quot;);
			}
			else if (temp.startsWith(&quot;i_&quot;)){
				//log.info(&quot;3333333333333333333\n&quot;);
				eval(&quot;objRequest.serviceContractHeaderV2s[0].&quot; + temp.replace(&quot;i_&quot;,&quot;&quot;) + &quot;=&quot; + temp0);			
			}
		}
	}
}


var strUpdatedRequest = JSON.stringify(objRequest);
vars.put(&quot;RequestData&quot;, strUpdatedRequest);</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json; charset=UTF-8
				</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">${protocol}://${server}:${tomcatPort}
				</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64)
					AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87
					Safari/537.36</stringProp>
              </elementProp>
              <elementProp name="DNT" elementType="Header">
                <stringProp name="Header.name">DNT</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="X-Requested-With" elementType="Header">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">${protocol}://${server}:${tomcatPort}/${webapp}/
				</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="Extract full response" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">RequestData</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NotFound</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Data Assertion" enabled="true">
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">var requestData = vars.get(&quot;RequestData&quot;);
var objRequest = JSON.parse(requestData);
var failureMessage = &quot;&quot;;
var defaultValue = &quot;[N/A]&quot;;
var prefix2 = &quot;serviceContract_validate_&quot;;


// All the fields in dataset should be set here
// Below code block is only for serviceContractHeaders[0] validation, please use other prefix and code to cover other scenarios.
var iter = vars.getIterator();

while (iter.hasNext()){
	//var varName = o.name;
	var e = iter.next();
	var varName = e.getKey();
	//log.info(varName);
	// if the prefix matches
	if (varName.startsWith(prefix2)){
		var actValue = eval(&quot;objRequest.serviceContractHeaderV2s[0].&quot; + varName.replace(prefix2,&quot;&quot;));
		if(e.getValue() != defaultValue &amp;&amp;  actValue != e.getValue()){
			failureMessage = failureMessage + &quot;Expect &quot; + varName.replace(prefix2,&quot;&quot;) +&quot; = &quot; + e.getValue() + &quot; but got &quot; + actValue + &quot;\n&quot;;
		}
	}
}



</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="reset Data" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="script">String prefix = &quot;serviceContract_&quot;

vars.entrySet().each { entry -&gt;
def name = entry.getKey()
if (name.startsWith(prefix)) {
vars.put(name, &quot;[N/A]&quot;);
}
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
