<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.1.1 r1855137">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Create Unplanned Receipt" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Create Unplanned Receipt" enabled="true"/>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="set default values" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="script">String defaultValue = &quot;[N/A]&quot;;
List varsList = [];

// Add module variables here
//varsList.add(&quot;[prefix]_[var_name]&quot;);
varsList.add(&quot;unplannedProcessorDetails_itemCode&quot;);
varsList.add(&quot;unplannedProcessorDetails_siteCode&quot;);
varsList.add(&quot;unplannedProcessorDetails_location&quot;);
varsList.add(&quot;unplannedProcessorDetails_lotSerial&quot;);
varsList.add(&quot;unplannedProcessorDetails_reference&quot;);
varsList.add(&quot;unplannedProcessorDetails_transactionQuantity&quot;);
varsList.add(&quot;unplannedProcessorDetails_unitOfMeasure&quot;);
varsList.add(&quot;unplannedProcessorDetails_unitOfMeasureConversion&quot;);
varsList.add(&quot;unplannedProcessorDetails_remarks&quot;);
varsList.add(&quot;unplannedProcessorDetails_isAttributesEditable&quot;);
varsList.add(&quot;unplannedProcessorDetails_inventoryStatusCode&quot;);
varsList.add(&quot;unplannedProcessorDetails_expireDate&quot;);
varsList.add(&quot;unplannedProcessorDetails_grade&quot;);

varsList.add(&quot;unplannedProcessorDetails_creditAcct&quot;);
varsList.add(&quot;unplannedProcessorDetails_creditSubAcct&quot;);
varsList.add(&quot;unplannedProcessorDetails_creditCC&quot;);

varsList.add(&quot;unplannedProcessorDetails_addressCode&quot;);
varsList.add(&quot;unplannedProcessorDetails_shipperNumber&quot;);
varsList.add(&quot;unplannedProcessorDetails_orderNumber&quot;);
varsList.add(&quot;unplannedProcessorDetails_orderLine&quot;);


// Set default values
varsList.each {
	if (vars.get(&quot;${it}&quot;) == null) vars.put(&quot;${it}&quot;, defaultValue);
}

// Variables with a different default value
if (vars.get(&quot;unplannedProcessorHeaders_SubmitResult&quot;) == null) vars.put(&quot;unplannedProcessorHeaders_SubmitResult&quot;, &quot;true&quot;);
</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Fetch Empty Grid Line for Receipt" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="domainCode" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">domainCode</stringProp>
                <stringProp name="Argument.value">${domainCode}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="siteCode" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">siteCode</stringProp>
                <stringProp name="Argument.value">${unplannedProcessorDetails_siteCode}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="location" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">location</stringProp>
                <stringProp name="Argument.value">${unplannedProcessorDetails_location}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="itemCode" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">itemCode</stringProp>
                <stringProp name="Argument.value">${unplannedProcessorDetails_itemCode}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="lotSerial" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">lotSerial</stringProp>
                <stringProp name="Argument.value">${unplannedProcessorDetails_lotSerial}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="reference" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">reference</stringProp>
                <stringProp name="Argument.value">${unplannedProcessorDetails_reference}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="viewUri" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">viewUri</stringProp>
                <stringProp name="Argument.value">urn:view:maint:com.qad.erp.logistics.unplannedReceives</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path">/${webapp}/api/erp/unplannedReceives</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://${server}:${tomcatPort}/${webapp}/</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="x-qadcalluid" elementType="Header">
                <stringProp name="Header.name">x-qadcalluid</stringProp>
                <stringProp name="Header.value">cd0a51ea-19c3-4129-a40c-ca84638ef792</stringProp>
              </elementProp>
              <elementProp name="X-Requested-With" elementType="Header">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:60.0) Gecko/20100101 Firefox/60.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="ExtractFullResponse" enabled="true">
            <stringProp name="VAR">response</stringProp>
            <stringProp name="JSONPATH">$.data</stringProp>
            <stringProp name="DEFAULT">NotFound</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
            <stringProp name="INPUT_FORMAT">JSON</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
        </hashTree>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Submit Unplanned Receive" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${response}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain"></stringProp>
          <stringProp name="HTTPSampler.port"></stringProp>
          <stringProp name="HTTPSampler.protocol"></stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/${webapp}/api/erp/unplannedReceives</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Update JSON using JavaScript" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">var strResponse = vars.get(&quot;response&quot;);

//Parse the Response JSON to get a JavaScript data object
var objResponse = JSON.parse(strResponse);

//Update the value of the data object
objResponse.unplannedProcessorHeaderV2s[0].unplannedProcessorDetailV2s[0].transactionType = &quot;RCT-UNP&quot;;

if (&quot;${unplannedProcessorDetails_itemCode}&quot; != &quot;[N/A]&quot;)         objResponse.unplannedProcessorHeaderV2s[0].unplannedProcessorDetailV2s[0].itemCode = &quot;${unplannedProcessorDetails_itemCode}&quot;;
if (&quot;${unplannedProcessorDetails_siteCode}&quot; != &quot;[N/A]&quot;)         objResponse.unplannedProcessorHeaderV2s[0].unplannedProcessorDetailV2s[0].siteCode = &quot;${unplannedProcessorDetails_siteCode}&quot;;
if (&quot;${unplannedProcessorDetails_location}&quot; != &quot;[N/A]&quot;)         objResponse.unplannedProcessorHeaderV2s[0].unplannedProcessorDetailV2s[0].location = &quot;${unplannedProcessorDetails_location}&quot;;
if (&quot;${unplannedProcessorDetails_lotSerial}&quot; != &quot;[N/A]&quot;)        objResponse.unplannedProcessorHeaderV2s[0].unplannedProcessorDetailV2s[0].lotSerial = &quot;${unplannedProcessorDetails_lotSerial}&quot;;
if (&quot;${unplannedProcessorDetails_reference}&quot; != &quot;[N/A]&quot;)        objResponse.unplannedProcessorHeaderV2s[0].unplannedProcessorDetailV2s[0].reference = &quot;${unplannedProcessorDetails_reference}&quot;;
if (&quot;${unplannedProcessorDetails_transactionQuantity}&quot; != &quot;[N/A]&quot;) objResponse.unplannedProcessorHeaderV2s[0].unplannedProcessorDetailV2s[0].transactionQuantity = &quot;${unplannedProcessorDetails_transactionQuantity}&quot;;
if (&quot;${unplannedProcessorDetails_unitOfMeasure}&quot; != &quot;[N/A]&quot;)    objResponse.unplannedProcessorHeaderV2s[0].unplannedProcessorDetailV2s[0].unitOfMeasure = &quot;${unplannedProcessorDetails_unitOfMeasure}&quot;;
if (&quot;${unplannedProcessorDetails_unitOfMeasureConversion}&quot; != &quot;[N/A]&quot;)    objResponse.unplannedProcessorHeaderV2s[0].unplannedProcessorDetailV2s[0].unitOfMeasureConversion = &quot;${unplannedProcessorDetails_unitOfMeasureConversion}&quot;;
if (&quot;${unplannedProcessorDetails_remarks}&quot; != &quot;[N/A]&quot;)          objResponse.unplannedProcessorHeaderV2s[0].unplannedProcessorDetailV2s[0].remarks = &quot;${unplannedProcessorDetails_remarks}&quot;;
if (&quot;${unplannedProcessorDetails_isAttributesEditable}&quot; != &quot;[N/A]&quot;) objResponse.unplannedProcessorHeaderV2s[0].unplannedProcessorDetailV2s[0].isAttributesEditable = &quot;${unplannedProcessorDetails_isAttributesEditable}&quot;;
if (&quot;${unplannedProcessorDetails_inventoryStatusCode}&quot; != &quot;[N/A]&quot;) objResponse.unplannedProcessorHeaderV2s[0].unplannedProcessorDetailV2s[0].inventoryStatusCode = &quot;${unplannedProcessorDetails_inventoryStatusCode}&quot;;
if (&quot;${unplannedProcessorDetails_expireDate}&quot; != &quot;[N/A]&quot;)       objResponse.unplannedProcessorHeaderV2s[0].unplannedProcessorDetailV2s[0].expireDate = &quot;${unplannedProcessorDetails_expireDate}&quot;;
if (&quot;${unplannedProcessorDetails_grade}&quot; != &quot;[N/A]&quot;)            objResponse.unplannedProcessorHeaderV2s[0].unplannedProcessorDetailV2s[0].grade = &quot;${unplannedProcessorDetails_grade}&quot;;
if (&quot;${unplannedProcessorDetails_creditAcct}&quot; != &quot;[N/A]&quot;)       objResponse.unplannedProcessorHeaderV2s[0].unplannedProcessorDetailV2s[0].creditAcct = &quot;${unplannedProcessorDetails_creditAcct}&quot;;
if (&quot;${unplannedProcessorDetails_creditSubAcct}&quot; != &quot;[N/A]&quot;)    objResponse.unplannedProcessorHeaderV2s[0].unplannedProcessorDetailV2s[0].creditSubAcct = &quot;${unplannedProcessorDetails_creditSubAcct}&quot;;
if (&quot;${unplannedProcessorDetails_creditCC}&quot; != &quot;[N/A]&quot;)         objResponse.unplannedProcessorHeaderV2s[0].unplannedProcessorDetailV2s[0].creditCC = &quot;${unplannedProcessorDetails_creditCC}&quot;;
if (&quot;${unplannedProcessorDetails_addressCode}&quot; != &quot;[N/A]&quot;)      objResponse.unplannedProcessorHeaderV2s[0].unplannedProcessorDetailV2s[0].addressCode = &quot;${unplannedProcessorDetails_addressCode}&quot;;
if (&quot;${unplannedProcessorDetails_shipperNumber}&quot; != &quot;[N/A]&quot;)    objResponse.unplannedProcessorHeaderV2s[0].unplannedProcessorDetailV2s[0].shipperNumber = &quot;${unplannedProcessorDetails_shipperNumber}&quot;;


//Convert the data object back to a JSON string 
var strUpdatedResponse = JSON.stringify(objResponse);

//Update ${Response} to have the value of the updated JSON
vars.put(&quot;response&quot;, strUpdatedResponse);</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">https://${server}:${tomcatPort}/${webapp}/</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.5</stringProp>
              </elementProp>
              <elementProp name="x-qadcalluid" elementType="Header">
                <stringProp name="Header.name">x-qadcalluid</stringProp>
                <stringProp name="Header.value">cd0a51ea-19c3-4129-a40c-ca84638ef792</stringProp>
              </elementProp>
              <elementProp name="X-Requested-With" elementType="Header">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate, br</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:60.0) Gecko/20100101 Firefox/60.0</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">response</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.data</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="result" enabled="true">
            <stringProp name="JSON_PATH">$.submitResult.success</stringProp>
            <stringProp name="EXPECTED_VALUE">${unplannedProcessorHeaders_SubmitResult}</stringProp>
            <boolProp name="JSONVALIDATION">true</boolProp>
            <boolProp name="EXPECT_NULL">false</boolProp>
            <boolProp name="INVERT">false</boolProp>
            <boolProp name="ISREGEX">false</boolProp>
            <stringProp name="INPUT_FORMAT">JSON</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="Error" enabled="true">
            <stringProp name="VAR">errorresponse</stringProp>
            <stringProp name="JSONPATH">$.submitResult.errors[*].message</stringProp>
            <stringProp name="DEFAULT">NotFound</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
            <stringProp name="INPUT_FORMAT">JSON</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="reset data" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="script">String prefix = &quot;unplannedProcessorDetails_&quot;;

vars.entrySet().each { entry -&gt; 
	def name = entry.getKey()
	if (name.startsWith(prefix)) {
		vars.put(name, &quot;[N/A]&quot;);
	}
}</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
