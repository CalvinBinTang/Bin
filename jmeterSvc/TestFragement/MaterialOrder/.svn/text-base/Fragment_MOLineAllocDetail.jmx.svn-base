<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.1.1 r1855137">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="Expected-Input-Parameters" enabled="true">
        <collectionProp name="Arguments.arguments">
          <elementProp name="server" elementType="Argument">
            <stringProp name="Argument.name">server</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Server Name (eg: vmeos01.qad.com))</stringProp>
          </elementProp>
          <elementProp name="tomcatPort" elementType="Argument">
            <stringProp name="Argument.name">tomcatPort</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">Tomcat Port (eg: 22011)</stringProp>
          </elementProp>
          <elementProp name="webapp" elementType="Argument">
            <stringProp name="Argument.name">webapp</stringProp>
            <stringProp name="Argument.value"></stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.desc">qad-central</stringProp>
          </elementProp>
        </collectionProp>
        <stringProp name="TestPlan.comments">Variables the test Fragment expects to use. This will facilate re-use of fragments</stringProp>
      </Arguments>
      <hashTree/>
      <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="concurrencyHash" enabled="true">
        <stringProp name="RegexExtractor.useHeaders">false</stringProp>
        <stringProp name="RegexExtractor.refname">concurrencyHash</stringProp>
        <stringProp name="RegexExtractor.regex">&quot;concurrencyHash&quot;:&quot;(.+?)&quot;,</stringProp>
        <stringProp name="RegexExtractor.template">$1$</stringProp>
        <stringProp name="RegexExtractor.default">none</stringProp>
        <stringProp name="RegexExtractor.match_number">1</stringProp>
        <stringProp name="TestPlan.comments">Sample regular expression for use with Grids / Updating records</stringProp>
      </RegexExtractor>
      <hashTree/>
      <BeanShellAssertion guiclass="BeanShellAssertionGui" testclass="BeanShellAssertion" testname="Beanshell Assertion" enabled="true">
        <stringProp name="BeanShellAssertion.query">// Get the variable value
String myValue = vars.get(&quot;RegularExpressionAmount&quot;);

// Validation failure check
String validationCheck = &quot;CheckIfEqualToThis&quot;;

// Check for default values from regular expression
if (myValue == &quot;none&quot;){
	Failure = true;
   	FailureMessage = &quot;Regular expression failed. Found default value.&quot;;
}

// Check our assertion
else if (!myValue.equals(validationCheck)){
	// Get full URL
	String path = SampleResult.getUrlAsString();
	String sampleLabel = SampleResult.getSampleLabel();
	Failure = true;
   	FailureMessage = &quot;Expect Value to be &quot; + validationCheck + &quot; but found &quot; + myValue + &quot; \n Sample Label:&quot; + sampleLabel  + &quot;\n Path: &quot; + path;
}
</stringProp>
        <stringProp name="BeanShellAssertion.filename"></stringProp>
        <stringProp name="BeanShellAssertion.parameters"></stringProp>
        <boolProp name="BeanShellAssertion.resetInterpreter">false</boolProp>
      </BeanShellAssertion>
      <hashTree/>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="Test Fragment" enabled="true"/>
      <hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="lineAllocGet" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Process Line Allocation Detail" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Process Line Allocation Detail" enabled="true">
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">var moLineDetailAlloc; //line allocation dataset in a date node
var lineAllocs; //date node dataset in a item production line
var hasDetailAllocations; //first line allocation record in a date node flag
var isManualQuantityAllocated;  //first date node record in a item production line flag
// ready to post service flag
var allocationState;
for(i in materialOrderAllocDetails)
{
	materialOrderAllocDetails[i].isSelected =${isSelected};
if (vars.get(&quot;isSelected&quot;) == false){
		
		lineAllocs = &apos;&apos;;
		}
     else {
     	lineAllocs =&apos;{materialOrderAllocDetails[i],&quot;modelId&quot;:i,&quot;qOptions&quot;:{}}&apos;;
     	if (${isDetailAllocations} == true &amp;&amp; vars.get(&quot;qtyToDetAlloc&quot;) !=0&amp;&amp;vars.get(&quot;qtyToDetAlloc&quot;) !=&quot;&quot;)	{lineAllocs[i].hasDetailAllocations=${isDetailAllocations};
			lineAllocs[i].quantityAllocated=${qtyToDetAlloc}+${qtyPrevAlloc};     	
     	}
     	else{lineAllocs[i].quantityAllocated = ${qtyPrevAlloc};}

     	
     }}	
     materialOrderAllocDetails =lineAllocs ;/*&apos;{&quot;uri&quot;:&quot;urn:be:com.qad.service.materialorder.IMaterialOrderAllocation:${domainCode}.${LineDueDate}.${MO}.${Line}&quot;,&quot;customDecimal0&quot;:0,&quot;customDecimal1&quot;:0,&quot;customDecimal2&quot;:0,&quot;customDecimal3&quot;:0,&quot;customDecimal4&quot;:0,&quot;customInteger0&quot;:0,&quot;customInteger1&quot;:0,&quot;customInteger2&quot;:0,&quot;customInteger3&quot;:0,&quot;customInteger4&quot;:0,&quot;customLong0&quot;:&quot;&quot;,&quot;customLong1&quot;:&quot;&quot;,&quot;customNote&quot;:&quot;&quot;,&quot;customShort0&quot;:&quot;&quot;,&quot;customShort1&quot;:&quot;&quot;,&quot;customShort2&quot;:&quot;&quot;,&quot;customShort3&quot;:&quot;&quot;,&quot;customShort4&quot;:&quot;&quot;,&quot;customShort5&quot;:&quot;&quot;,&quot;customShort6&quot;:&quot;&quot;,&quot;customShort7&quot;:&quot;&quot;,&quot;customShort8&quot;:&quot;&quot;,&quot;customShort9&quot;:&quot;&quot;,&quot;customShort10&quot;:&quot;&quot;,&quot;customShort11&quot;:&quot;&quot;,&quot;customShort12&quot;:&quot;&quot;,&quot;customShort13&quot;:&quot;&quot;,&quot;customShort14&quot;:&quot;&quot;,&quot;customShort15&quot;:&quot;&quot;,&quot;customShort16&quot;:&quot;&quot;,&quot;customShort17&quot;:&quot;&quot;,&quot;customShort18&quot;:&quot;&quot;,&quot;customShort19&quot;:&quot;&quot;,&quot;itemCode&quot;:&quot;${LineItem}&quot;,&quot;unitOfMeasure&quot;:&quot;${LineUM}&quot;,&quot;quantityOrdered&quot;:${QtyOrdered},&quot;quantityBackorder&quot;:${QtyBackOrder},&quot;dataOperation&quot;:&quot;&quot;,&quot;soldToCustomerCode&quot;:&quot;${ShipTo}&quot;,&quot;domainCode&quot;:&quot;${domainCode}&quot;,&quot;dueDate&quot;:&quot;${LineDueDate}&quot;,&quot;siteCode&quot;:&quot;${LineSite}&quot;,&quot;shipToCustomerCode&quot;:&quot;${ShipTo}&quot;,&quot;purchaseOrderNumber&quot;:&quot;&quot;,&quot;quantityShipped&quot;:0,&quot;shipType&quot;:&quot;&quot;,&quot;isSelected&quot;:${isSelected},&quot;materialOrderNumber&quot;:&quot;${MO}&quot;,&quot;materialOrderLine&quot;:${Line},&quot;orderDate&quot;:&quot;${OrderDate}&quot;,&quot;sequence&quot;:0,&quot;quantityAllocated&quot;:${QtyAlloc},&quot;quantityPicked&quot;:0,&quot;billToCustomerCode&quot;:&quot;11INTCUS&quot;,&quot;allocationState&quot;:1,&quot;backorderReason&quot;:&quot;&quot;,&quot;hasDetailAllocations&quot;:${LineDetailAllc},&quot;isManualQuantityAllocated&quot;:true,&quot;quantityPreviouslyAllocated&quot;:${QtyBackOrder},&quot;modelId&quot;:i,&quot;qOptions&quot;: {}}&quot;&quot;}&apos;;}*/
  vars.put(&quot;linesSelected&quot;, 1);
     vars.put(&quot;lineAllocs&quot;, lineAllocs);
  vars.put(&quot;materialOrderAllocDetails&quot;, materialOrderAllocDetails);</stringProp>
              <stringProp name="scriptLanguage">javascript</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">https://${server}:${tomcatPort}/${webapp}/</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</stringProp>
                </elementProp>
                <elementProp name="x-qadcalluid" elementType="Header">
                  <stringProp name="Header.name">x-qadcalluid</stringProp>
                  <stringProp name="Header.value">ee4581e4-9bdb-4930-915e-a4b41a9af25b</stringProp>
                </elementProp>
                <elementProp name="x-qadskipdefaulterrorhandling" elementType="Header">
                  <stringProp name="Header.name">x-qadskipdefaulterrorhandling</stringProp>
                  <stringProp name="Header.value">true</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate, br</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:59.0) Gecko/20100101 Firefox/59.0</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">lineAllocs</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">lineAllocs</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="JSON Extractor" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">length</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">materialOrderAllocDetails.length</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
              <stringProp name="Sample.scope">all</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
        </hashTree>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
