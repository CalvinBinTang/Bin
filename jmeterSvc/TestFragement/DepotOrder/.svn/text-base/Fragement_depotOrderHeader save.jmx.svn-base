<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.3.20180111">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="depotOrderHeader save" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="save" enabled="false"/>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="set Default Data" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="script">String defaultValue = &quot;[N/A]&quot;;
List varsList = [];

// URL Paremeters
varsList.add(&quot;depotOrderHeader_depotOrderNumber&quot;);
varsList.add(&quot;depotOrderHeader_domainCode&quot;);
// Inputs
varsList.add(&quot;depotOrderHeader_isProcessOrderSummary&quot;);
varsList.add(&quot;depotOrderHeader_workCode&quot;);
varsList.add(&quot;depotOrderHeader_statusCode&quot;);
varsList.add(&quot;depotOrderHeader_isProcessPostTrailer&quot;);
varsList.add(&quot;depotOrderHeader_completeStatus&quot;);
varsList.add(&quot;depotOrderHeader_enteredBy&quot;);
varsList.add(&quot;depotOrderHeader_eventDateTime&quot;);
varsList.add(&quot;depotOrderHeader_trailerAmount1&quot;);
varsList.add(&quot;depotOrderHeader_soldToCustomerCode&quot;);
varsList.add(&quot;depotOrderHeader_confirmedDate&quot;);
varsList.add(&quot;depotOrderHeader_baseCurrencyCode&quot;);
varsList.add(&quot;depotOrderHeader_serviceQuoteNumber&quot;);
varsList.add(&quot;depotOrderHeader_billToCustomerCode&quot;);
varsList.add(&quot;depotOrderHeader_currencyCode&quot;);
varsList.add(&quot;depotOrderHeader_exchangeRate&quot;);
varsList.add(&quot;depotOrderHeader_exchangeRate2&quot;);
varsList.add(&quot;depotOrderHeader_isFixedRate&quot;);
varsList.add(&quot;depotOrderHeader_timeZoneCode&quot;);
varsList.add(&quot;depotOrderHeader_defaultTimeZoneCode&quot;);
varsList.add(&quot;depotOrderHeader_freightWeightUnitOfMeasure&quot;);
varsList.add(&quot;depotOrderHeader_isManualDiscountPercent&quot;);
varsList.add(&quot;depotOrderHeader_serviceTypeCode&quot;);
varsList.add(&quot;depotOrderHeader_endUserCode&quot;);

// Fields for validation
varsList.add(&quot;depotOrderHeader_validate_siteCode&quot;);
varsList.add(&quot;depotOrderHeader_validate_confirmedDate&quot;);
varsList.add(&quot;depotOrderHeader_validate_baseCurrencyCode&quot;);
varsList.add(&quot;depotOrderHeader_validate_serviceQuoteNumber&quot;);
varsList.add(&quot;depotOrderHeader_validate_timeZoneCode&quot;);
varsList.add(&quot;depotOrderHeader_validate_defaultTimeZoneCode&quot;);
varsList.add(&quot;depotOrderHeader_error&quot;);

varsList.each {
if (vars.get(&quot;${it}&quot;) == null) vars.put(&quot;${it}&quot;, defaultValue);
}</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="depotOrderHeader save" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${RequestData}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${server}</stringProp>
          <stringProp name="HTTPSampler.port">${tomcatPort}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/${webapp}/api/erp/depotOrderHeaders?domainCode=${domainCode}&amp;depotOrderNumber=${depotOrderHeader_depotOrderNumber}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Update JSON using JavaScript" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">var requestData = vars.get(&quot;RequestData&quot;);
var objRequest = JSON.parse(requestData);
var defaultValue = &quot;[N/A]&quot;;

if (&quot;${depotOrderHeader_soldToCustomerCode}&quot; != &quot;[N/A]&quot;) objRequest.depotOrderHeaders[0].soldToCustomerCode= &quot;${depotOrderHeader_soldToCustomerCode}&quot;;

if (&quot;${depotOrderHeader_isProcessOrderSummary}&quot; != defaultValue) { objRequest.depotOrderHeaders[0].isProcessOrderSummary = ${depotOrderHeader_isProcessOrderSummary};}

if (&quot;${depotOrderHeader_isProcessPostTrailer}&quot; != defaultValue) { objRequest.depotOrderHeaders[0].isProcessPostTrailer = ${depotOrderHeader_isProcessPostTrailer};}

if (&quot;${depotOrderHeader_statusCode}&quot; != defaultValue) { objRequest.depotOrderHeaders[0].statusCode = ${depotOrderHeader_statusCode};}

if (&quot;${depotOrderHeader_completeStatus}&quot; != defaultValue) { objRequest.depotOrderHeaders[0].completeStatus = &quot;${depotOrderHeader_completeStatus}&quot;;}

if (&quot;${depotOrderHeader_workCode}&quot; != defaultValue) { objRequest.depotOrderHeaders[0].workCode = &quot;${depotOrderHeader_workCode}&quot;;}

if (&quot;${depotOrderHeader_enteredBy}&quot; != defaultValue) { objRequest.depotOrderHeaders[0].enteredBy = &quot;${depotOrderHeader_enteredBy}&quot;;}

if (&quot;${depotOrderHeader_eventDateTime}&quot; != defaultValue) { objRequest.depotOrderHeaders[0].eventDateTime = &quot;${depotOrderHeader_eventDateTime}&quot;;}

if (&quot;${depotOrderHeader_trailerAmount1}&quot; != defaultValue) { objRequest.depotOrderHeaders[0].trailerAmount1 = ${depotOrderHeader_trailerAmount1};}

if (&quot;${depotOrderHeader_confirmedDate}&quot; != defaultValue) objRequest.depotOrderHeaders[0].confirmedDate= &quot;${depotOrderHeader_confirmedDate}&quot;;

if (&quot;${depotOrderHeader_baseCurrencyCode}&quot; != &quot;[N/A]&quot;) objRequest.depotOrderHeaders[0].baseCurrencyCode= &quot;${depotOrderHeader_baseCurrencyCode}&quot;;

if (&quot;${depotOrderHeader_serviceQuoteNumber}&quot; != &quot;[N/A]&quot;) objRequest.depotOrderHeaders[0].serviceQuoteNumber= &quot;${depotOrderHeader_serviceQuoteNumber}&quot;;

if (&quot;${depotOrderHeader_serviceTypeCode}&quot; != &quot;[N/A]&quot;) objRequest.depotOrderHeaders[0].serviceTypeCode= &quot;${depotOrderHeader_serviceTypeCode}&quot;;

if (&quot;${depotOrderHeader_billToCustomerCode}&quot; != &quot;[N/A]&quot;) objRequest.depotOrderHeaders[0].billToCustomerCode= &quot;${depotOrderHeader_billToCustomerCode}&quot;;

if (&quot;${depotOrderHeader_currencyCode}&quot; != &quot;[N/A]&quot;) objRequest.depotOrderHeaders[0].currencyCode= &quot;${depotOrderHeader_currencyCode}&quot;;

if (&quot;${depotOrderHeader_exchangeRate}&quot; != &quot;[N/A]&quot;) objRequest.depotOrderHeaders[0].exchangeRate= &quot;${depotOrderHeader_exchangeRate}&quot;;
if (&quot;${depotOrderHeader_exchangeRate2}&quot; != &quot;[N/A]&quot;) objRequest.depotOrderHeaders[0].exchangeRate2= &quot;${depotOrderHeader_exchangeRate2}&quot;;

if (&quot;${depotOrderHeader_isFixedRate}&quot; != &quot;[N/A]&quot;) objRequest.depotOrderHeaders[0].isFixedRate= &quot;${depotOrderHeader_isFixedRate}&quot;;

if (&quot;${depotOrderHeader_timeZoneCode}&quot; != &quot;[N/A]&quot;) objRequest.depotOrderHeaders[0].timeZoneCode= &quot;${depotOrderHeader_timeZoneCode}&quot;;
if (&quot;${depotOrderHeader_defaultTimeZoneCode}&quot; != &quot;[N/A]&quot;) objRequest.depotOrderHeaders[0].defaultTimeZoneCode= &quot;${depotOrderHeader_defaultTimeZoneCode}&quot;;

if (&quot;${depotOrderHeader_freightWeightUnitOfMeasure}&quot; != &quot;[N/A]&quot;) objRequest.depotOrderHeaders[0].freightWeightUnitOfMeasure= &quot;${depotOrderHeader_freightWeightUnitOfMeasure}&quot;;

if (&quot;${depotOrderHeader_isManualDiscountPercent}&quot; != &quot;[N/A]&quot;) objRequest.depotOrderHeaders[0].isManualDiscountPercent= &quot;${depotOrderHeader_isManualDiscountPercent}&quot;;

if (&quot;${depotOrderHeader_endUserCode}&quot; != &quot;[N/A]&quot;) objRequest.depotOrderHeaders[0].endUserCode= &quot;${depotOrderHeader_endUserCode}&quot;;

var strUpdatedRequest = JSON.stringify(objRequest);
vars.put(&quot;RequestData&quot;, strUpdatedRequest);</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json; charset=UTF-8
				</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">${protocol}://${server}:${tomcatPort}
				</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64)
					AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87
					Safari/537.36</stringProp>
              </elementProp>
              <elementProp name="DNT" elementType="Header">
                <stringProp name="Header.name">DNT</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="X-Requested-With" elementType="Header">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">${protocol}://${server}:${tomcatPort}/${webapp}/
				</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="ExtractFullResponse" enabled="true">
            <stringProp name="VAR">RequestData</stringProp>
            <stringProp name="JSONPATH">$.data</stringProp>
            <stringProp name="DEFAULT">NotFound</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Data Assertion" enabled="true">
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">var requestData = vars.get(&quot;RequestData&quot;);
var objRequest = JSON.parse(requestData);
var failureMessage = &quot;&quot;;
var temp = prev.getResponseDataAsString();
vars.put(&quot;temp&quot;, temp);
var errormessage = JSON.parse(temp);

// All the fields in dataset should be set here
if (&quot;${depotOrderHeader_validate_siteCode}&quot; != &quot;[N/A]&quot; &amp;&amp; objRequest.depotOrderHeaders[0].siteCode!= &quot;${depotOrderHeader_validate_siteCode}&quot;) { failureMessage = failureMessage + &quot;Expect siteCode${depotOrderHeader_validate_siteCode} but got &quot; + objRequest.depotOrderHeaders[0].siteCode}

if (&quot;${depotOrderHeader_validate_baseCurrencyCode}&quot; != &quot;[N/A]&quot; &amp;&amp; objRequest.depotOrderHeaders[0].baseCurrencyCode!= &quot;${depotOrderHeader_validate_baseCurrencyCode}&quot;) { failureMessage = failureMessage + &quot;Expect baseCurrencyCode${depotOrderHeader_validate_baseCurrencyCode} but got &quot; + objRequest.depotOrderHeaders[0].baseCurrencyCode}

if (&quot;${depotOrderHeader_validate_serviceQuoteNumber}&quot; != &quot;[N/A]&quot; &amp;&amp; objRequest.depotOrderHeaders[0].serviceQuoteNumber!= &quot;${depotOrderHeader_validate_serviceQuoteNumber}&quot;) { failureMessage = failureMessage + &quot;Expect serviceQuoteNumber${depotOrderHeader_validate_serviceQuoteNumber} but got &quot; + objRequest.depotOrderHeaders[0].serviceQuoteNumber}

if (&quot;${depotOrderHeader_validate_timeZoneCode}&quot; != &quot;[N/A]&quot; &amp;&amp; objRequest.depotOrderHeaders[0].timeZoneCode!= &quot;${depotOrderHeader_validate_timeZoneCode}&quot;) { failureMessage = failureMessage + &quot;Expect timeZoneCode${depotOrderHeader_validate_timeZoneCode} but got &quot; + objRequest.depotOrderHeaders[0].timeZoneCode}
if (&quot;${depotOrderHeader_validate_defaultTimeZoneCode}&quot; != &quot;[N/A]&quot; &amp;&amp; objRequest.depotOrderHeaders[0].defaultTimeZoneCode!= &quot;${depotOrderHeader_validate_defaultTimeZoneCode}&quot;) { failureMessage = failureMessage + &quot;Expect defaultTimeZoneCode${depotOrderHeader_validate_defaultTimeZoneCode} but got &quot; + objRequest.depotOrderHeaders[0].defaultTimeZoneCode}

if (&quot;${depotOrderHeader_validate_confirmedDate}&quot; != &quot;[N/A]&quot; &amp;&amp; objRequest.depotOrderHeaders[0].confirmedDate!= &quot;${depotOrderHeader_validate_confirmedDate}&quot;) { failureMessage = failureMessage + &quot;Expect confirmedDate${depotOrderHeader_validate_confirmedDate} but got &quot; + objRequest.depotOrderHeaders[0].confirmedDate}

if (&quot;${depotOrderHeader_error}&quot; != &quot;[N/A]&quot;) 
{ 
	
	if(&quot;${depotOrderHeader_error}&quot;!=errormessage.submitResult.errors[1].message)
	{
		failureMessage = failureMessage + &quot;Expect depotOrderHeader_error ${depotOrderHeader_error} but got &quot;+errormessage.submitResult.errors[1].message;
	}
}
else if(errormessage.submitResult.success != true)
{
	failureMessage = failureMessage + &quot;Expect true but got &quot;+errormessage.submitResult.success+&quot;\n&quot;;
}


AssertionResult.setFailureMessage(failureMessage);
AssertionResult.setFailure(failureMessage != &quot;&quot;);
</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="reset Data" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="script">String prefix = &quot;depotOrderHeader_&quot;

vars.entrySet().each { entry -&gt;
def name = entry.getKey()
if (name.startsWith(prefix)) {
vars.put(name, &quot;[N/A]&quot;);
}
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree/>
  </hashTree>
</jmeterTestPlan>
