<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.3.20180111">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="receipts create" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="create" enabled="false"/>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="set Default Data" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="script">String defaultValue = &quot;[N/A]&quot;;
List varsList = [];

// URL Paremeters

// All the fields in dataset should be configurable here (for input)
varsList.add(&quot;depotOrder_effectiveDate&quot;);
varsList.add(&quot;depotOrder_receiptDate&quot;);
varsList.add(&quot;depotOrder_siteCode&quot;);
varsList.add(&quot;depotOrder_quantityReceived&quot;);
varsList.add(&quot;depotOrder_unitOfMeasureReceived&quot;);
varsList.add(&quot;depotOrder_lotSerial&quot;);
varsList.add(&quot;depotOrder_creditAcct&quot;);
varsList.add(&quot;depotOrder_creditSubAcct&quot;);
varsList.add(&quot;depotOrder_creditCC&quot;);
varsList.add(&quot;depotOrder_creditProject&quot;);
// All the fields in dataset should be configurable here (for validation)
varsList.add(&quot;depotOrder_validate_errMsg&quot;);

varsList.each {
if (vars.get(&quot;${it}&quot;) == null) vars.put(&quot;${it}&quot;, defaultValue);
}</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="receipts create: ${depotOrder_depotOrderNumber}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${RequestData}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${server}</stringProp>
          <stringProp name="HTTPSampler.port">${tomcatPort}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/${webapp}/api/erp/receipts</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Setup data" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">var requestData = vars.get(&quot;RequestData&quot;);
var objRequest = JSON.parse(requestData);
var defaultValue = &quot;[N/A]&quot;;

if (&quot;${depotOrder_effectiveDate}&quot; != defaultValue) { objRequest.receiptHeaders[0].effectiveDate = &quot;${depotOrder_effectiveDate}&quot;;}
if (&quot;${depotOrder_receiptDate}&quot; != defaultValue) { objRequest.receiptHeaders[0].receiptDate = &quot;${depotOrder_receiptDate}&quot;;}
if (&quot;${depotOrder_siteCode}&quot; != defaultValue) { objRequest.receiptHeaders[0].receiptLines[0].siteCode = &quot;${depotOrder_siteCode}&quot;;}
if (&quot;${depotOrder_quantityReceived}&quot; != defaultValue) { objRequest.receiptHeaders[0].receiptLines[0].quantityReceived = ${depotOrder_quantityReceived};}
if (&quot;${depotOrder_unitOfMeasureReceived}&quot; != defaultValue) { objRequest.receiptHeaders[0].receiptLines[0].unitOfMeasureReceived = &quot;${depotOrder_unitOfMeasureReceived}&quot;;}
if (&quot;${depotOrder_lotSerial}&quot; != defaultValue) { objRequest.receiptHeaders[0].receiptLines[0].lotSerial = &quot;${depotOrder_lotSerial}&quot;;}
if (&quot;${depotOrder_creditAcct}&quot; != defaultValue) { objRequest.receiptHeaders[0].receiptLines[0].creditAcct = &quot;${depotOrder_creditAcct}&quot;;}
if (&quot;${depotOrder_creditSubAcct}&quot; != defaultValue) { objRequest.receiptHeaders[0].receiptLines[0].creditSubAcct = &quot;${depotOrder_creditSubAcct}&quot;;}
if (&quot;${depotOrder_creditCC}&quot; != defaultValue) { objRequest.receiptHeaders[0].receiptLines[0].creditCC = &quot;${depotOrder_creditCC}&quot;;}
if (&quot;${depotOrder_creditProject}&quot; != defaultValue) { objRequest.receiptHeaders[0].receiptLines[0].creditProject = &quot;${depotOrder_creditProject}&quot;;}

var strUpdatedRequest = JSON.stringify(objRequest);
vars.put(&quot;RequestData&quot;, strUpdatedRequest);</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ExtractFullResponse" enabled="true">
            <stringProp name="JSONPostProcessor.referenceNames">ResponseData</stringProp>
            <stringProp name="JSONPostProcessor.jsonPathExprs">$.submitResult</stringProp>
            <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
            <stringProp name="JSONPostProcessor.defaultValues">NotFound</stringProp>
          </JSONPostProcessor>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Data Assertion" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">var responseData = vars.get(&quot;ResponseData&quot;);
var objResponse = JSON.parse(responseData);
var failureMessage = &quot;&quot;;

if (&quot;${depotOrder_validate_errMsg}&quot; != &quot;[N/A]&quot;){
	var re = /${depotOrder_validate_errMsg}/;	   
	if (re.exec(responseData) == null) {
		failureMessage = failureMessage + &quot;Expect error \&quot;${depotOrder_validate_errMsg}\&quot; but not found in response data. \n&quot;;
	}
}
else {
	if (objResponse.success == &quot;true&quot;) {
		failureMessage = failureMessage + &quot;Expect success = true but &quot; + objResponse.success + &quot;. \n&quot;;
	}
}

AssertionResult.setFailureMessage(failureMessage);
AssertionResult.setFailure(failureMessage != &quot;&quot;);</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="false">
          <boolProp name="displayJMeterProperties">false</boolProp>
          <boolProp name="displayJMeterVariables">true</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="reset Data" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="script">String prefix = &quot;depotOrder_&quot;

vars.entrySet().each { entry -&gt;
def name = entry.getKey()
if (name.startsWith(prefix)) {
vars.put(name, &quot;[N/A]&quot;);
}
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree/>
  </hashTree>
</jmeterTestPlan>
