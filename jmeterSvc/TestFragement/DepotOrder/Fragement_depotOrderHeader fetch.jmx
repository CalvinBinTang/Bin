<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.1 r1853635">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="depotOrderHeader fetch" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="fetch" enabled="false"/>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="set Default Data" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="script">String defaultValue = &quot;[N/A]&quot;;
List varsList = [];

// URL Paremeters
varsList.add(&quot;depotOrderHeader_depotOrderNumber&quot;);
varsList.add(&quot;depotOrderHeader_domainCode&quot;);

varsList.add(&quot;depotOrderHeader_validate_siteDescription&quot;);
varsList.add(&quot;depotOrderHeader_validate_endUserCode&quot;);
varsList.add(&quot;depotOrderHeader_validate_workCode&quot;);
varsList.add(&quot;depotOrderHeader_validate_severityCode&quot;);
varsList.add(&quot;depotOrderHeader_validate_typeCode&quot;);
varsList.add(&quot;depotOrderHeader_validate_priority&quot;);
varsList.add(&quot;depotOrderHeader_validate_serviceTypeCode&quot;);
varsList.add(&quot;depotOrderHeader_validate_isConfirmed&quot;);
varsList.add(&quot;depotOrderHeader_validate_confirmedDate&quot;);
varsList.add(&quot;depotOrderHeader_validate_isTaxable&quot;);
varsList.add(&quot;depotOrderHeader_validate_assigned&quot;);
varsList.add(&quot;depotOrderHeader_validate_statusCode&quot;);
varsList.add(&quot;depotOrderHeader_validate_nextStatusCode&quot;);
varsList.add(&quot;depotOrderHeader_validate_shipToCustomerCode&quot;);
varsList.add(&quot;depotOrderHeader_validate_siteCode&quot;);
varsList.add(&quot;depotOrderHeader_validate_siteEntityCode&quot;);
varsList.add(&quot;depotOrderHeader_validate_freightListCode&quot;);
varsList.add(&quot;depotOrderHeader_validate_freightTermsCode&quot;);
varsList.add(&quot;depotOrderHeader_validate_currencyCode&quot;);
varsList.add(&quot;depotOrderHeader_validate_daybookSetCode&quot;);
varsList.add(&quot;depotOrderHeader_validate_discountPercent&quot;);
varsList.add(&quot;depotOrderHeader_validate_trailerCode1&quot;);
varsList.add(&quot;depotOrderHeader_validate_trailerAmount1&quot;);
varsList.add(&quot;depotOrderHeader_validate_trailerCode2&quot;);
varsList.add(&quot;depotOrderHeader_validate_trailerAmount2&quot;);
varsList.add(&quot;depotOrderHeader_validate_trailerCode3&quot;);
varsList.add(&quot;depotOrderHeader_validate_trailerAmount3&quot;);
varsList.add(&quot;depotOrderHeader_validate_priceListCode&quot;);
// summary
varsList.add(&quot;depotOrderHeader_validate_lineTotal&quot;);
varsList.add(&quot;depotOrderHeader_validate_totalTrailerCharges&quot;);
varsList.add(&quot;depotOrderHeader_validate_taxableAmount&quot;);
varsList.add(&quot;depotOrderHeader_validate_nonTaxableAmount&quot;);
varsList.add(&quot;depotOrderHeader_validate_totalTax&quot;);
varsList.add(&quot;depotOrderHeader_validate_totalAmount&quot;);
varsList.add(&quot;depotOrderHeader_validate_discountAmount&quot;);


varsList.each {
if (vars.get(&quot;${it}&quot;) == null) vars.put(&quot;${it}&quot;, defaultValue);
//log.info(&quot;test it&quot;+${it});
}</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="depotOrderHeader fetch ${depotOrderHeader_depotOrderNumber}" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
            <collectionProp name="Arguments.arguments">
              <elementProp name="depotOrderNumber" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">depotOrderNumber</stringProp>
                <stringProp name="Argument.value">${depotOrderHeader_depotOrderNumber}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
              <elementProp name="domainCode" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.name">domainCode</stringProp>
                <stringProp name="Argument.value">${domainCode}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
                <boolProp name="HTTPArgument.use_equals">true</boolProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${server}</stringProp>
          <stringProp name="HTTPSampler.port">${tomcatPort}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/${webapp}/api/erp/depotOrderHeaders</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json; charset=UTF-8
				</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">${protocol}://${server}:${tomcatPort}
				</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64)
					AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87
					Safari/537.36</stringProp>
              </elementProp>
              <elementProp name="DNT" elementType="Header">
                <stringProp name="Header.name">DNT</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="X-Requested-With" elementType="Header">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">${protocol}://${server}:${tomcatPort}/${webapp}/
				</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="ExtractFullResponse" enabled="true">
            <stringProp name="VAR">RequestData</stringProp>
            <stringProp name="JSONPATH">$.data</stringProp>
            <stringProp name="DEFAULT">NotFound</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
            <stringProp name="INPUT_FORMAT">JSON</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Data Assertion" enabled="true">
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">var requestData = vars.get(&quot;RequestData&quot;);
var objRequest = JSON.parse(requestData);
var failureMessage = &quot;&quot;;
var prefix = &quot;depotOrderHeader_validate_&quot;;
var defaultValue = &quot;[N/A]&quot;;

// All the fields in dataset should be set here
// Below code block is only for depotOrderHeaders[0] validation, please use other prefix and code to cover other scenarios.
var iter = vars.getIterator();

while (iter.hasNext()){
	//var varName = o.name;
	var e = iter.next();
	var varName = e.getKey();
	//log.info(varName);
	// if the prefix matches
	if (varName.startsWith(prefix)){
		var actValue = eval(&quot;objRequest.depotOrderHeaders[0].&quot; + varName.replace(prefix,&quot;&quot;));
		if(e.getValue() != defaultValue &amp;&amp;  actValue != e.getValue()){
			failureMessage = failureMessage + &quot;Expect &quot; + varName.replace(prefix,&quot;&quot;) +&quot; = &quot; + e.getValue() + &quot; but got &quot; + actValue + &quot;\n&quot;;
		}
	}
}


AssertionResult.setFailureMessage(failureMessage);
AssertionResult.setFailure(failureMessage != &quot;&quot;);
</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="reset Data" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="script">String prefix = &quot;depotOrderHeader_&quot;

vars.entrySet().each { entry -&gt;
def name = entry.getKey()
if (name.startsWith(prefix)) {
vars.put(name, &quot;[N/A]&quot;);
}
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
