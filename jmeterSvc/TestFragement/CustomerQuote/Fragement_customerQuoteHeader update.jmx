<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.1 r1853635">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="customerQuoteHeader update" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <TestFragmentController guiclass="TestFragmentControllerGui" testclass="TestFragmentController" testname="update" enabled="false"/>
      <hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="set Default Data" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="script">String defaultValue = &quot;[N/A]&quot;;
List varsList = [];

// Inputs
varsList.add(&quot;quoteHeader_quoteNumber&quot;);
varsList.add(&quot;quoteHeader_domainCode&quot;);
varsList.add(&quot;quoteHeader_revision&quot;);
varsList.add(&quot;quoteHeader_statusCode&quot;);
varsList.add(&quot;quoteHeader_printRevision&quot;);
varsList.add(&quot;quoteHeader_quoteDate&quot;);
varsList.add(&quot;quoteHeader_expireDate&quot;);
varsList.add(&quot;quoteHeader_contact&quot;);
varsList.add(&quot;quoteHeader_email&quot;);
varsList.add(&quot;quoteHeader_phoneNumber&quot;);
varsList.add(&quot;quoteHeader_followUpDate&quot;);
varsList.add(&quot;quoteHeader_acceptedDate&quot;);
varsList.add(&quot;quoteHeader_isPrintQuote&quot;);
varsList.add(&quot;quoteHeader_isReadyToRelease&quot;);
varsList.add(&quot;quoteHeader_remindersUpTo&quot;);
varsList.add(&quot;quoteHeader_discountPercent&quot;);
varsList.add(&quot;quoteHeader_reasonLost&quot;);
varsList.add(&quot;quoteHeader_pricingDate&quot;);
varsList.add(&quot;quoteHeader_actionStatus&quot;);
varsList.add(&quot;quoteHeader_taxDate&quot;);
varsList.add(&quot;quoteHeader_isProcessPostTrailer&quot;);
varsList.add(&quot;quoteHeader_isProcessQuoteSummary&quot;);
varsList.add(&quot;quoteHeader_isManualDiscountPercent&quot;);



varsList.each {
if (vars.get(&quot;${it}&quot;) == null) vars.put(&quot;${it}&quot;, defaultValue);
//log.info(&quot;test it&quot;+${it});
}</stringProp>
        </JSR223Sampler>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="customerQuoteHeader update ${quoteHeader_quoteNumber}" enabled="true">
          <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
            <collectionProp name="Arguments.arguments">
              <elementProp name="" elementType="HTTPArgument">
                <boolProp name="HTTPArgument.always_encode">false</boolProp>
                <stringProp name="Argument.value">${RequestData}</stringProp>
                <stringProp name="Argument.metadata">=</stringProp>
              </elementProp>
            </collectionProp>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${server}</stringProp>
          <stringProp name="HTTPSampler.port">${tomcatPort}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
          <stringProp name="HTTPSampler.path">/${webapp}/api/erp/customerQuoteHeaders?domainCode=${domainCode}&amp;quoteNumber=${quoteHeader_quoteNumber}&amp;revision=${quoteHeader_revision}</stringProp>
          <stringProp name="HTTPSampler.method">POST</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
          <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
          <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </HTTPSamplerProxy>
        <hashTree>
          <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="false">
            <collectionProp name="HeaderManager.headers">
              <elementProp name="Content-Type" elementType="Header">
                <stringProp name="Header.name">Content-Type</stringProp>
                <stringProp name="Header.value">application/json; charset=UTF-8
				</stringProp>
              </elementProp>
              <elementProp name="Accept-Language" elementType="Header">
                <stringProp name="Header.name">Accept-Language</stringProp>
                <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
              </elementProp>
              <elementProp name="Accept" elementType="Header">
                <stringProp name="Header.name">Accept</stringProp>
                <stringProp name="Header.value">*/*</stringProp>
              </elementProp>
              <elementProp name="Origin" elementType="Header">
                <stringProp name="Header.name">Origin</stringProp>
                <stringProp name="Header.value">${protocol}://${server}:${tomcatPort}
				</stringProp>
              </elementProp>
              <elementProp name="User-Agent" elementType="Header">
                <stringProp name="Header.name">User-Agent</stringProp>
                <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64)
					AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87
					Safari/537.36</stringProp>
              </elementProp>
              <elementProp name="DNT" elementType="Header">
                <stringProp name="Header.name">DNT</stringProp>
                <stringProp name="Header.value">1</stringProp>
              </elementProp>
              <elementProp name="X-Requested-With" elementType="Header">
                <stringProp name="Header.name">X-Requested-With</stringProp>
                <stringProp name="Header.value">XMLHttpRequest</stringProp>
              </elementProp>
              <elementProp name="Referer" elementType="Header">
                <stringProp name="Header.name">Referer</stringProp>
                <stringProp name="Header.value">${protocol}://${server}:${tomcatPort}/${webapp}/
				</stringProp>
              </elementProp>
              <elementProp name="Accept-Encoding" elementType="Header">
                <stringProp name="Header.name">Accept-Encoding</stringProp>
                <stringProp name="Header.value">gzip, deflate</stringProp>
              </elementProp>
            </collectionProp>
          </HeaderManager>
          <hashTree/>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Update JSON " enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">var requestData = vars.get(&quot;RequestData&quot;);
var objRequest = JSON.parse(requestData);
//var prefix = &quot;quoteHeader_&quot;;
var defaultValue = &quot;[N/A]&quot;;

if (&quot;${quoteHeader_statusCode}&quot; != defaultValue) { objRequest.customerQuoteHeaderUIs[0].statusCode = &quot;${quoteHeader_statusCode}&quot;;}
if (&quot;${quoteHeader_printRevision}&quot; != defaultValue) { objRequest.customerQuoteHeaderUIs[0].printRevision = &quot;${quoteHeader_printRevision}&quot;;}
if (&quot;${quoteHeader_quoteDate}&quot; != defaultValue) { objRequest.customerQuoteHeaderUIs[0].quoteDate = &quot;${quoteHeader_quoteDate}&quot;;}
if (&quot;${quoteHeader_expireDate}&quot; != defaultValue) { objRequest.customerQuoteHeaderUIs[0].expireDate = &quot;${quoteHeader_expireDate}&quot;;}
if (&quot;${quoteHeader_contact}&quot; != defaultValue) { objRequest.customerQuoteHeaderUIs[0].contact = &quot;${quoteHeader_contact}&quot;;}
if (&quot;${quoteHeader_email}&quot; != defaultValue) { objRequest.customerQuoteHeaderUIs[0].email = &quot;${quoteHeader_email}&quot;;}
if (&quot;${quoteHeader_phoneNumber}&quot; != defaultValue) { objRequest.customerQuoteHeaderUIs[0].phoneNumber = &quot;${quoteHeader_phoneNumber}&quot;;}
if (&quot;${quoteHeader_followUpDate}&quot; != defaultValue) { objRequest.customerQuoteHeaderUIs[0].followUpDate = &quot;${quoteHeader_followUpDate}&quot;;}
if (&quot;${quoteHeader_acceptedDate}&quot; != defaultValue) { objRequest.customerQuoteHeaderUIs[0].acceptedDate = &quot;${quoteHeader_acceptedDate}&quot;;}
if (&quot;${quoteHeader_isPrintQuote}&quot; != defaultValue) { objRequest.customerQuoteHeaderUIs[0].isPrintQuote = ${quoteHeader_isPrintQuote};}
if (&quot;${quoteHeader_isReadyToRelease}&quot; != defaultValue) { objRequest.customerQuoteHeaderUIs[0].isReadyToRelease = ${quoteHeader_isReadyToRelease};}
if (&quot;${quoteHeader_remindersUpTo}&quot; != defaultValue) { objRequest.customerQuoteHeaderUIs[0].remindersUpTo = ${quoteHeader_remindersUpTo};}
if (&quot;${quoteHeader_discountPercent}&quot; != defaultValue) { objRequest.customerQuoteHeaderUIs[0].discountPercent = ${quoteHeader_discountPercent};}
if (&quot;${quoteHeader_reasonLost}&quot; != defaultValue) { objRequest.customerQuoteHeaderUIs[0].reasonLost = &quot;${quoteHeader_reasonLost}&quot;;}
if (&quot;${quoteHeader_pricingDate}&quot; != defaultValue) { objRequest.customerQuoteHeaderUIs[0].pricingDate = &quot;${quoteHeader_pricingDate}&quot;;}
if (&quot;${quoteHeader_actionStatus}&quot; != defaultValue) { objRequest.customerQuoteHeaderUIs[0].actionStatus = &quot;${quoteHeader_actionStatus}&quot;;}
if (&quot;${quoteHeader_taxDate}&quot; != defaultValue) { objRequest.customerQuoteHeaderUIs[0].taxDate = &quot;${quoteHeader_taxDate}&quot;;}
if (&quot;${quoteHeader_isProcessPostTrailer}&quot; != defaultValue) { objRequest.customerQuoteHeaderUIs[0].isProcessPostTrailer = ${quoteHeader_isProcessPostTrailer};}
if (&quot;${quoteHeader_isProcessQuoteSummary}&quot; != defaultValue) { objRequest.customerQuoteHeaderUIs[0].isProcessQuoteSummary = ${quoteHeader_isProcessQuoteSummary};}
if (&quot;${quoteHeader_isManualDiscountPercent}&quot; != defaultValue) { objRequest.customerQuoteHeaderUIs[0].isManualDiscountPercent = ${quoteHeader_isManualDiscountPercent};}

var strUpdatedRequest = JSON.stringify(objRequest);
vars.put(&quot;RequestData&quot;, strUpdatedRequest);</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="ExtractFullResponse" enabled="true">
            <stringProp name="VAR">RequestData</stringProp>
            <stringProp name="JSONPATH">$.data</stringProp>
            <stringProp name="DEFAULT">NotFound</stringProp>
            <stringProp name="VARIABLE"></stringProp>
            <stringProp name="SUBJECT">BODY</stringProp>
            <stringProp name="INPUT_FORMAT">JSON</stringProp>
          </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
          <hashTree/>
          <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="Data Assertion" enabled="false">
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="script">var requestData = vars.get(&quot;RequestData&quot;);
var objRequest = JSON.parse(requestData);
var failureMessage = &quot;&quot;;
var prefix = &quot;quoteHeader_validate_&quot;;
var defaultValue = &quot;[N/A]&quot;;

// All the fields in dataset should be set here
// Below code block is only for depotOrderHeaders[0] validation, please use other prefix and code to cover other scenarios.
var iter = vars.getIterator();

while (iter.hasNext()){
	//var varName = o.name;
	var e = iter.next();
	var varName = e.getKey();
	//log.info(varName);
	// if the prefix matches
	if (varName.startsWith(prefix)){
		var actValue = eval(&quot;objRequest.customerQuoteHeaderUIs[0].&quot; + varName.replace(prefix,&quot;&quot;));
		if(e.getValue() != defaultValue &amp;&amp;  actValue != e.getValue()){
			failureMessage = failureMessage + &quot;Expect &quot; + varName.replace(prefix,&quot;&quot;) +&quot; = &quot; + e.getValue() + &quot; but got &quot; + actValue + &quot;/n&quot;;
		}
	}
}


AssertionResult.setFailureMessage(failureMessage);
AssertionResult.setFailure(failureMessage != &quot;&quot;);
</stringProp>
            <stringProp name="scriptLanguage">javascript</stringProp>
          </JSR223Assertion>
          <hashTree/>
        </hashTree>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="reset Data" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">false</stringProp>
          <stringProp name="script">String prefix = &quot;quoteHeader_&quot;;

vars.entrySet().each { entry -&gt;
def name = entry.getKey()
if (name.startsWith(prefix)) {
	vars.put(name, &quot;[N/A]&quot;);
}
}
</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
