<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.1 r1853635">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Thread Group" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="server" elementType="Argument">
              <stringProp name="Argument.name">server</stringProp>
              <stringProp name="Argument.value">vmlcmsh002.qad.com</stringProp>
              <stringProp name="Argument.desc">server host</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="IsFullOrdersOnly" elementType="Argument">
              <stringProp name="Argument.name">IsFullOrdersOnly</stringProp>
              <stringProp name="Argument.value">true</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="IsFullLinesOnly" elementType="Argument">
              <stringProp name="Argument.name">IsFullLinesOnly</stringProp>
              <stringProp name="Argument.value">true</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="netUIport" elementType="Argument">
              <stringProp name="Argument.name">netUIport</stringProp>
              <stringProp name="Argument.value">22000</stringProp>
              <stringProp name="Argument.desc">.net port</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="netUIwebapp" elementType="Argument">
              <stringProp name="Argument.name">netUIwebapp</stringProp>
              <stringProp name="Argument.value">qadui</stringProp>
              <stringProp name="Argument.desc">.net app name</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="username" elementType="Argument">
              <stringProp name="Argument.name">username</stringProp>
              <stringProp name="Argument.value">mfg@qad.com</stringProp>
              <stringProp name="Argument.desc">login name</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="password" elementType="Argument">
              <stringProp name="Argument.name">password</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.desc">login password</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="domainCode" elementType="Argument">
              <stringProp name="Argument.name">domainCode</stringProp>
              <stringProp name="Argument.value">10USA</stringProp>
              <stringProp name="Argument.desc">domain</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="user" elementType="Argument">
              <stringProp name="Argument.name">user</stringProp>
              <stringProp name="Argument.value">mfg</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="protocol" elementType="Argument">
              <stringProp name="Argument.name">protocol</stringProp>
              <stringProp name="Argument.value">https</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="tomcatPort" elementType="Argument">
              <stringProp name="Argument.name">tomcatPort</stringProp>
              <stringProp name="Argument.value">22011</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="webapp" elementType="Argument">
              <stringProp name="Argument.name">webapp</stringProp>
              <stringProp name="Argument.value">qad-central</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="OrdersReturned" elementType="Argument">
              <stringProp name="Argument.name">OrdersReturned</stringProp>
              <stringProp name="Argument.value">3</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="IsAllocate" elementType="Argument">
              <stringProp name="Argument.name">IsAllocate</stringProp>
              <stringProp name="Argument.value">true</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="IsChangeDueDatesATPWarnings" elementType="Argument">
              <stringProp name="Argument.name">IsChangeDueDatesATPWarnings</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="IsChangeDueDatesATPErrors" elementType="Argument">
              <stringProp name="Argument.name">IsChangeDueDatesATPErrors</stringProp>
              <stringProp name="Argument.value">false</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="SiteCodeFrom" elementType="Argument">
              <stringProp name="Argument.name">SiteCodeFrom</stringProp>
              <stringProp name="Argument.value">10-100</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="SiteCodeTo" elementType="Argument">
              <stringProp name="Argument.name">SiteCodeTo</stringProp>
              <stringProp name="Argument.value">10-200</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ItemCodeFrom" elementType="Argument">
              <stringProp name="Argument.name">ItemCodeFrom</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="ItemCodeTo" elementType="Argument">
              <stringProp name="Argument.name">ItemCodeTo</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="OrderLinesSelected" elementType="Argument">
              <stringProp name="Argument.name">OrderLinesSelected</stringProp>
              <stringProp name="Argument.value">5</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="LinesWithErrors" elementType="Argument">
              <stringProp name="Argument.name">LinesWithErrors</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="SuccessLines" elementType="Argument">
              <stringProp name="Argument.name">SuccessLines</stringProp>
              <stringProp name="Argument.value">5</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="FieldName" elementType="Argument">
              <stringProp name="Argument.name">FieldName</stringProp>
              <stringProp name="Argument.value">rma_mstr.rma_nbr</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="Operator" elementType="Argument">
              <stringProp name="Argument.name">Operator</stringProp>
              <stringProp name="Argument.value">cn</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="Value1" elementType="Argument">
              <stringProp name="Argument.name">Value1</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="Value2" elementType="Argument">
              <stringProp name="Argument.name">Value2</stringProp>
              <stringProp name="Argument.value"></stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="IsDetailAllocations" elementType="Argument">
              <stringProp name="Argument.name">IsDetailAllocations</stringProp>
              <stringProp name="Argument.value">true</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="AllocateDaysInToFuture" elementType="Argument">
              <stringProp name="Argument.name">AllocateDaysInToFuture</stringProp>
              <stringProp name="Argument.value">10</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${server}</stringProp>
          <stringProp name="HTTPSampler.port">${tomcatPort}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </ConfigTestElement>
        <hashTree/>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
        </CookieManager>
        <hashTree/>
        <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="All Assertion Results" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">~/log/${__TestPlanName}_${__time(YMDHMS)}.xml</stringProp>
        </ResultCollector>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="Content-Type" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json; charset=UTF-8
				</stringProp>
            </elementProp>
            <elementProp name="Accept-Language" elementType="Header">
              <stringProp name="Header.name">Accept-Language</stringProp>
              <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
            </elementProp>
            <elementProp name="Accept" elementType="Header">
              <stringProp name="Header.name">Accept</stringProp>
              <stringProp name="Header.value">*/*</stringProp>
            </elementProp>
            <elementProp name="Origin" elementType="Header">
              <stringProp name="Header.name">Origin</stringProp>
              <stringProp name="Header.value">${protocol}://${server}:${tomcatPort}
				</stringProp>
            </elementProp>
            <elementProp name="User-Agent" elementType="Header">
              <stringProp name="Header.name">User-Agent</stringProp>
              <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64)
					AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87
					Safari/537.36</stringProp>
            </elementProp>
            <elementProp name="DNT" elementType="Header">
              <stringProp name="Header.name">DNT</stringProp>
              <stringProp name="Header.value">1</stringProp>
            </elementProp>
            <elementProp name="X-Requested-With" elementType="Header">
              <stringProp name="Header.name">X-Requested-With</stringProp>
              <stringProp name="Header.value">XMLHttpRequest</stringProp>
            </elementProp>
            <elementProp name="Referer" elementType="Header">
              <stringProp name="Header.name">Referer</stringProp>
              <stringProp name="Header.value">${protocol}://${server}:${tomcatPort}/${webapp}/
				</stringProp>
            </elementProp>
            <elementProp name="Accept-Encoding" elementType="Header">
              <stringProp name="Header.name">Accept-Encoding</stringProp>
              <stringProp name="Header.value">gzip, deflate</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Failed Assertion Results" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">~\logs\Failed_Assertion_ERROR${__time(d-MMM-yyyy_HHmm)}.xml</stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <sentBytes>true</sentBytes>
              <url>true</url>
              <threadCounts>true</threadCounts>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Login_withSwitchDomain" enabled="true">
          <stringProp name="IncludeController.includepath">..\..\TestFragement\Common\Login-Fragment.jmx</stringProp>
        </IncludeController>
        <hashTree/>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="1.001-PrepareForRMA" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">5</stringProp>
        </LoopController>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
            <stringProp name="filename">./CSV/JFT_RMA_002_Bulk_Create.csv</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="variableNames"></stringProp>
            <boolProp name="ignoreFirstLine">true</boolProp>
            <stringProp name="delimiter">,</stringProp>
            <boolProp name="quotedData">true</boolProp>
            <boolProp name="recycle">false</boolProp>
            <boolProp name="stopThread">false</boolProp>
            <stringProp name="shareMode">shareMode.all</stringProp>
          </CSVDataSet>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If soldTo != &quot;&quot;" enabled="true">
            <stringProp name="IfController.condition">&quot;${soldTo}&quot; != &quot;&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end"></stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">testCaseNo</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">false</boolProp>
            </CounterConfig>
            <hashTree/>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Create RMA Header Order ${testCaseNo}" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Header Data Setup" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">vars.put(&quot;rmaHeaderCreate_soldToCustomerCode&quot;,&quot;${soldTo}&quot;)
vars.put(&quot;rmaHeaderCreate_purchaseOrderNumber&quot;,&quot;${purchaseOrder}&quot;)
vars.put(&quot;rmaHeaderCreate_isConfirmed&quot;,${isConfirmed})
</stringProp>
              </JSR223Sampler>
              <hashTree/>
              <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create RMA Header" enabled="true">
                <stringProp name="IncludeController.includepath">../../TestFragement\RMA/Fragment_Create_RMAHeader1.jmx</stringProp>
              </IncludeController>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If LineType = Replacement" enabled="true">
            <stringProp name="IfController.condition">&quot;${lineType}&quot;==&quot;Replacement&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Create Replacement Line" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="1177017248">itemCode</stringProp>
                  <stringProp name="-1285004149">quantity</stringProp>
                  <stringProp name="1277530540">netPrice</stringProp>
                  <stringProp name="-2016382574">rmaReplacementLineCreate_isconfirmed</stringProp>
                  <stringProp name="1608856524">rmaReplacementLineCreate_rmaNumber</stringProp>
                  <stringProp name="-1958451800">rmaReplacementLine_update_i_isDetailAllocation</stringProp>
                  <stringProp name="-225284465">rmaReplacementLine_update_i_quantityAllocated</stringProp>
                  <stringProp name="674694612">siteCode</stringProp>
                  <stringProp name="-422772833">rmaReplacementLine_update_s_dueDate</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="-290038399">
                    <stringProp name="-834267674">${itemCode}</stringProp>
                    <stringProp name="152480347">${quantity}</stringProp>
                    <stringProp name="-2013322918">${netPrice}</stringProp>
                    <stringProp name="1932090763">${isConfirmedLine}</stringProp>
                    <stringProp name="-1470014133">${output_rmaHeadeCreate_rmaNumber}</stringProp>
                    <stringProp name="422649931">${isDetailAllocation}</stringProp>
                    <stringProp name="668707992">${quantityAllocated}</stringProp>
                    <stringProp name="773599794">${siteCode}</stringProp>
                    <stringProp name="145319634">${dueDate}</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">false</boolProp>
              </UserParameters>
              <hashTree/>
              <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create Replacement Line fragment" enabled="true">
                <stringProp name="IncludeController.includepath">../../TestFragement\RMA/Fragment_Create_RMAReplacementLine1.jmx</stringProp>
              </IncludeController>
              <hashTree/>
            </hashTree>
          </hashTree>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If LineType = Return" enabled="true">
            <stringProp name="IfController.condition">&quot;${lineType}&quot;==&quot;Return&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Create Return Line" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <UserParameters guiclass="UserParametersGui" testclass="UserParameters" testname="User Parameters" enabled="true">
                <collectionProp name="UserParameters.names">
                  <stringProp name="1177017248">itemCode</stringProp>
                  <stringProp name="-1285004149">quantity</stringProp>
                  <stringProp name="1277530540">netPrice</stringProp>
                  <stringProp name="1973579708">rmaReturnLineCreate_isconfirmed</stringProp>
                  <stringProp name="2073343094">rmaReturnLineCreate_rmaNumber</stringProp>
                  <stringProp name="674694612">siteCode</stringProp>
                </collectionProp>
                <collectionProp name="UserParameters.thread_values">
                  <collectionProp name="531414393">
                    <stringProp name="-834267674">${itemCode}</stringProp>
                    <stringProp name="152480347">${quantity}</stringProp>
                    <stringProp name="-2013322918">${netPrice}</stringProp>
                    <stringProp name="1932090763">${isConfirmedLine}</stringProp>
                    <stringProp name="-1470014133">${output_rmaHeadeCreate_rmaNumber}</stringProp>
                    <stringProp name="773599794">${siteCode}</stringProp>
                  </collectionProp>
                </collectionProp>
                <boolProp name="UserParameters.per_iteration">false</boolProp>
              </UserParameters>
              <hashTree/>
              <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create Return Line fragment" enabled="true">
                <stringProp name="IncludeController.includepath">../../TestFragement\RMA/Fragment_Create_RMAReturnLine1.jmx</stringProp>
              </IncludeController>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Final Save" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Data Setup for fetch header" enabled="true">
              <stringProp name="scriptLanguage">groovy</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">vars.put(&quot;rmaHeader_rmaNumber&quot;,vars.get(&quot;rmaNumber&quot;));</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Fetch the header" enabled="true">
              <stringProp name="IncludeController.includepath">../../TestFragement\RMA/Fragment_rmaHeader_fetch.jmx</stringProp>
            </IncludeController>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Data Setup for final save" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">vars.put(&quot;rmaHeader_update_i_isProcessOrderSummary&quot;,true);
vars.put(&quot;rmaHeader_update_i_isProcessPostTrailer&quot;,true);
vars.put(&quot;rmaHeader_rmaNumber&quot;,&quot;${rmaNumber}&quot;);
</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Save RMA Header" enabled="true">
              <stringProp name="IncludeController.includepath">../../TestFragement\RMA/Fragment_rmaHeader_save1.jmx</stringProp>
            </IncludeController>
            <hashTree/>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Get the order number range for the confirmation" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">if (!${__isVarDefined(startOrder)}){
	vars.put(&quot;startOrder&quot;,&quot;${rmaHeader_rmaNumber}&quot;);
}

vars.put(&quot;endOrder&quot;,&quot;${rmaHeader_rmaNumber}&quot;);
</stringProp>
            </JSR223Sampler>
            <hashTree/>
          </hashTree>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="1.002 RMA Bulk Allocation Initialize" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </LoopController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="SoapUI - IRmaAllocation - Initialize" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Setup - IRmaAllocation : Initialize" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${server}</stringProp>
              <stringProp name="HTTPSampler.port">${netUIport}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">wsa/wsa1/wsdl</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Current Interface" enabled="true">
                <stringProp name="TestPlan.comments">Test the current Interface and get its response</stringProp>
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">currentInterface</stringProp>
                <stringProp name="RegexExtractor.regex">targetURI=urn:services-qad-com:service:IRmaAllocation:(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">none</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Call Initialize" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:urn=&quot;urn:services-qad-com:service:IRmaAllocation:2019-10-17:IRmaAllocation&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;urn:Initialize&gt;&#xd;
         &lt;urn:ServiceContext&gt;&#xd;
            &lt;!--Zero or more repetitions:--&gt;&#xd;
            &lt;urn:ServiceProperty&gt;&#xd;
               &lt;urn:PropertyName&gt;username&lt;/urn:PropertyName&gt;&#xd;
               &lt;urn:PropertyValue&gt;mfg&lt;/urn:PropertyValue&gt;&#xd;
            &lt;/urn:ServiceProperty&gt;&#xd;
         &lt;/urn:ServiceContext&gt;&#xd;
         &lt;urn:domainCode&gt;?&lt;/urn:domainCode&gt;&#xd;
      &lt;/urn:Initialize&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${server}</stringProp>
              <stringProp name="HTTPSampler.port">${netUIport}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">wsa/wsa1</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value"> text/xml</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">SOAPAction</stringProp>
                    <stringProp name="Header.value"> &quot;&quot;</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Extractor AllocateDaysIntoFuture" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">AllocateDaysIntoFuture</stringProp>
                <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//AllocateDaysIntoFuture</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion AllocateDaysIntoFuture" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="563893231">${AllocateDaysIntoFuture}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">AllocateDaysIntoFuture</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Extractor IsDetailAllocations" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">IsDetailAllocations</stringProp>
                <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//IsDetailAllocations</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion IsDetailAllocations" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="414719100">${IsDetailAllocations}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">IsDetailAllocations</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Extractor IsFullOrdersOnly" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">IsFullOrdersOnly</stringProp>
                <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//IsFullOrdersOnly</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion IsFullOrdersOnly" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1455637948">${IsFullOrdersOnly}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">IsFullOrdersOnly</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Extractor IsFullLinesOnly" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">IsFullLinesOnly</stringProp>
                <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//IsFullLinesOnly</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion IsFullLinesOnly" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1971406526">${IsFullLinesOnly}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">IsFullLinesOnly</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Extractor IsSingleLotOnly" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">IsSingleLotOnly</stringProp>
                <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//IsSingleLotOnly</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion IsSingleLotOnly" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="2054230185">${IsSingleLotOnly}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">IsSingleLotOnly</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Extractor IsNewerLotsOnly" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">IsNewerLotsOnly</stringProp>
                <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//IsNewerLotsOnly</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion IsNewerLotsOnly" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-333270237">${IsNewerLotsOnly}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">IsNewerLotsOnly</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Extractor  IsShowExceptionsOnly" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname"> IsShowExceptionsOnly</stringProp>
                <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">// IsShowExceptionsOnly</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion  IsShowExceptionsOnly" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="2074695101">${ IsShowExceptionsOnly}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable"> IsShowExceptionsOnly</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Extractor OrderLinesSelected" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">OrderLinesSelected</stringProp>
                <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//OrderLinesSelected</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion OrderLinesSelected" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1371103642">${OrderLinesSelected}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">OrderLinesSelected</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Extractor LinesWithErrors" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">LinesWithErrors</stringProp>
                <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//LinesWithErrors</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion LinesWithErrors" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="228534596">${LinesWithErrors}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">LinesWithErrors</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Extractor LinesSuccess" enabled="true">
                <stringProp name="XPathExtractor.default">0</stringProp>
                <stringProp name="XPathExtractor.refname">LinesSuccess</stringProp>
                <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//LinesSuccess</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion LinesSuccess" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1627978398">${LinesSuccess}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">LinesSuccess</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Extractor SiteFrom" enabled="true">
                <stringProp name="XPathExtractor.default">null</stringProp>
                <stringProp name="XPathExtractor.refname">SiteFrom</stringProp>
                <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//SiteFrom</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion SiteFrom" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1514528779">${SiteFrom}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">SiteFrom</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Extractor SiteTo" enabled="true">
                <stringProp name="XPathExtractor.default">null</stringProp>
                <stringProp name="XPathExtractor.refname">SiteTo</stringProp>
                <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//SiteTo</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion SiteTo" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1556868156">${SiteTo}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">SiteTo</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Extractor ItemFrom" enabled="true">
                <stringProp name="XPathExtractor.default">null</stringProp>
                <stringProp name="XPathExtractor.refname">ItemFrom</stringProp>
                <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//ItemFrom</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion ItemFrom" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1172571049">${ItemFrom}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">ItemFrom</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Extractor ItemTo" enabled="true">
                <stringProp name="XPathExtractor.default">null</stringProp>
                <stringProp name="XPathExtractor.refname">ItemTo</stringProp>
                <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//ItemTo</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion ItemTo" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1540664200">${ItemTo}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">8</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">ItemTo</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="1.003 RMA Bulk Fetch Allocation Grid" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </LoopController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="SoapUI - IRmaAllocation - FetchRmaAllocationGrid" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Setup - IRmaAllocation : FetchRmaAllocationGrid" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                <collectionProp name="Arguments.arguments"/>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${server}</stringProp>
              <stringProp name="HTTPSampler.port">${netUIport}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">wsa/wsa1/wsdl</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Current Interface" enabled="true">
                <stringProp name="TestPlan.comments">Test the current Interface and get its response</stringProp>
                <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                <stringProp name="RegexExtractor.refname">currentInterface</stringProp>
                <stringProp name="RegexExtractor.regex">targetURI=urn:services-qad-com:service:IRmaAllocation:(.+?)&quot;</stringProp>
                <stringProp name="RegexExtractor.template">$1$</stringProp>
                <stringProp name="RegexExtractor.default">none</stringProp>
                <stringProp name="RegexExtractor.match_number">1</stringProp>
              </RegexExtractor>
              <hashTree/>
              <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                <boolProp name="displayJMeterProperties">false</boolProp>
                <boolProp name="displayJMeterVariables">true</boolProp>
                <boolProp name="displaySamplerProperties">true</boolProp>
                <boolProp name="displaySystemProperties">false</boolProp>
              </DebugPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Call FetchRmaAllocationGrid" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:urn=&quot;urn:services-qad-com:service:IRmaAllocation:2019-10-17:IRmaAllocation&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;urn:FetchRmaAllocationGrid&gt;&#xd;
         &lt;urn:ServiceContext&gt;&#xd;
            &lt;!--Zero or more repetitions:--&gt;&#xd;
            &lt;urn:ServiceProperty&gt;&#xd;
               &lt;urn:PropertyName&gt;username&lt;/urn:PropertyName&gt;&#xd;
               &lt;urn:PropertyValue&gt;mfg&lt;/urn:PropertyValue&gt;&#xd;
            &lt;/urn:ServiceProperty&gt;&#xd;
         &lt;/urn:ServiceContext&gt;&#xd;
         &lt;urn:RmaAllocations&gt;&#xd;
            &lt;!--Zero or more repetitions:--&gt;&#xd;
            &lt;urn:RmaAllocation&gt;&#xd;
               &lt;urn:DomainCode&gt;${domainCode}&lt;/urn:DomainCode&gt;&#xd;
               &lt;urn:Criteria&gt;&lt;/urn:Criteria&gt;&#xd;
               &lt;urn:RequiredCriteria&gt;&lt;/urn:RequiredCriteria&gt;&#xd;
               &lt;urn:AllocateDaysIntoFuture&gt;100&lt;/urn:AllocateDaysIntoFuture&gt;&#xd;
               &lt;urn:IsDetailAllocations&gt;${IsDetailAllocations}&lt;/urn:IsDetailAllocations&gt;&#xd;
               &lt;urn:IsFullOrdersOnly&gt;${IsFullOrdersOnly}&lt;/urn:IsFullOrdersOnly&gt;&#xd;
               &lt;urn:IsFullLinesOnly&gt;${IsFullLinesOnly}&lt;/urn:IsFullLinesOnly&gt;&#xd;
               &lt;urn:IsSingleLotOnly&gt;${IsSingleLotOnly}&lt;/urn:IsSingleLotOnly&gt;&#xd;
               &lt;urn:IsNewerLotsOnly&gt;${IsNewerLotsOnly}&lt;/urn:IsNewerLotsOnly&gt;&#xd;
               &lt;urn:IsShowExceptionsOnly&gt;false&lt;/urn:IsShowExceptionsOnly&gt;&#xd;
               &lt;urn:OrderLinesSelected&gt;${OrderLinesSelected}&lt;/urn:OrderLinesSelected&gt;&#xd;
               &lt;urn:LinesWithErrors&gt;${LinesWithErrors}&lt;/urn:LinesWithErrors&gt;&#xd;
               &lt;urn:LinesSuccess&gt;${LinesSuccess}&lt;/urn:LinesSuccess&gt;&#xd;
               &lt;urn:BrowseUrn&gt;urn:browse:mfg:fs161&lt;/urn:BrowseUrn&gt;&#xd;
               &lt;urn:SiteFrom&gt;${SiteCodeFrom}&lt;/urn:SiteFrom&gt;&#xd;
               &lt;urn:SiteTo&gt;${SiteCodeTo}&lt;/urn:SiteTo&gt;       &#xd;
            &lt;/urn:RmaAllocation&gt;&#xd;
             &lt;urn:RmaAllocDetail&gt;&#xd;
             &lt;/urn:RmaAllocDetail&gt;&#xd;
            &lt;!--Zero or more repetitions:--&gt;&#xd;
             &lt;urn:RmaAllocFilterCondition&gt;&#xd;
               &lt;urn:FieldName&gt;${FieldName}&lt;/urn:FieldName&gt;&#xd;
               &lt;urn:Operator&gt;${Operator}&lt;/urn:Operator&gt;&#xd;
               &lt;urn:Value1&gt;${Value1}&lt;/urn:Value1&gt;&#xd;
               &lt;urn:Value1Type&gt;literal&lt;/urn:Value1Type&gt;&#xd;
               &lt;urn:Value2&gt;?&lt;/urn:Value2&gt;&#xd;
               &lt;urn:Value2Type&gt;&lt;/urn:Value2Type&gt;&#xd;
            &lt;/urn:RmaAllocFilterCondition&gt;&#xd;
         &lt;/urn:RmaAllocations&gt;&#xd;
      &lt;/urn:FetchRmaAllocationGrid&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${server}</stringProp>
              <stringProp name="HTTPSampler.port">${netUIport}</stringProp>
              <stringProp name="HTTPSampler.protocol">http</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">wsa/wsa1</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value"> text/xml</stringProp>
                  </elementProp>
                  <elementProp name="" elementType="Header">
                    <stringProp name="Header.name">SOAPAction</stringProp>
                    <stringProp name="Header.value"> &quot;&quot;</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Extractor MessageText" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">MessageText</stringProp>
                <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//MessageText</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion MessageText" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="413543328">${MessageText}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">MessageText</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Extractor LinesSuccess" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">LinesSuccess</stringProp>
                <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//LinesSuccess</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion LinesSuccess" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1627978398">${LinesSuccess}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">LinesSuccess</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Extractor LinesWithErrors" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">LinesWithErrors</stringProp>
                <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//LinesWithErrors</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion LinesWithErrors" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="228534596">${LinesWithErrors}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">LinesWithErrors</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Extractor RmaNumber" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">RmaNumber</stringProp>
                <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//RmaNumber</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion RmaNumber" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1205062181">${RmaNumber}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">RmaNumber</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Extractor RmaLine" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">RmaLine</stringProp>
                <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//RmaLine</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion RmaLine" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="222513946">${RmaLine}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">RmaLine</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Extractor ItemCode" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">ItemCode</stringProp>
                <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//ItemCode</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion ItemCode" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1169700294">${ItemCode}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">ItemCode</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Extractor UnitOfMeasure" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">UnitOfMeasure</stringProp>
                <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//UnitOfMeasure</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion UnitOfMeasure" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1055743793">${UnitOfMeasure}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">UnitOfMeasure</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Extractor SiteCode" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">SiteCode</stringProp>
                <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//SiteCode</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion SiteCode" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1517399534">${SiteCode}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">SiteCode</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Extractor DueDate" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">DueDate</stringProp>
                <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//DueDate</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion DueDate" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="209963762">${DueDate}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">DueDate</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Extractor QuantityOrdered" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">QuantityOrdered</stringProp>
                <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//QuantityOrdered</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion QuantityOrdered" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1992368558">${QuantityOrdered}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">QuantityOrdered</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Extractor QuantityAllocated" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">QuantityAllocated</stringProp>
                <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//QuantityAllocated</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion QuantityAllocated" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-1784715080">${QuantityAllocated}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">QuantityAllocated</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Extractor QuantityToIssue" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">QuantityToIssue</stringProp>
                <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//QuantityToIssue</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion QuantityToIssue" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-995807807">${QuantityToIssue}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">QuantityToIssue</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Extractor QuantityPicked" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">QuantityPicked</stringProp>
                <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//QuantityPicked</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion QuantityPicked" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1119003419">${QuantityPicked}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">QuantityPicked</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Extractor QuantityShipped" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">QuantityShipped</stringProp>
                <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//QuantityShipped</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion QuantityShipped" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="552048172">${QuantityShipped}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">QuantityShipped</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Extractor QuantityBackorder" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">QuantityBackorder</stringProp>
                <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//QuantityBackorder</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion QuantityBackorder" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-975763784">${QuantityBackorder}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">QuantityBackorder</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Extractor EndUser" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">EndUser</stringProp>
                <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//EndUser</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion EndUser" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="22808558">${EndUser}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">EndUser</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Extractor ShipType" enabled="true">
                <stringProp name="XPathExtractor.default">null</stringProp>
                <stringProp name="XPathExtractor.refname">ShipType</stringProp>
                <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//ShipType</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion ShipType" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="193081488">${ShipType}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">40</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">ShipType</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Extractor SoldToCustomerCode" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">SoldToCustomerCode</stringProp>
                <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//SoldToCustomerCode</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion SoldToCustomerCode" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="937290348">${SoldToCustomerCode}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">SoldToCustomerCode</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Extractor ShipToCustomerCode" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">ShipToCustomerCode</stringProp>
                <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//ShipToCustomerCode</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion ShipToCustomerCode" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="2025424900">${ShipToCustomerCode}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">ShipToCustomerCode</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Extractor ServiceOrderNumber" enabled="true">
                <stringProp name="XPathExtractor.default">null</stringProp>
                <stringProp name="XPathExtractor.refname">ServiceOrderNumber</stringProp>
                <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//ServiceOrderNumber</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion ServiceOrderNumber" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="3392903">null</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">40</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">ServiceOrderNumber</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Extractor PurchaseOrderNumber" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">PurchaseOrderNumber</stringProp>
                <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//PurchaseOrderNumber</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion PurchaseOrderNumber" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="465089086">${PurchaseOrderNumber}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">PurchaseOrderNumber</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Extractor OrderDate" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">OrderDate</stringProp>
                <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//OrderDate</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion OrderDate" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="1094709272">${OrderDate}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">OrderDate</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Extractor IsSelected" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">IsSelected</stringProp>
                <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//IsSelected</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion IsSelected" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-2144949791">${IsSelected}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">IsSelected</stringProp>
              </ResponseAssertion>
              <hashTree/>
              <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Extractor AllocationState" enabled="true">
                <stringProp name="XPathExtractor.default"></stringProp>
                <stringProp name="XPathExtractor.refname">AllocationState</stringProp>
                <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                <stringProp name="XPathExtractor.xpathQuery">//AllocationState</stringProp>
                <boolProp name="XPathExtractor.validate">false</boolProp>
                <boolProp name="XPathExtractor.tolerant">false</boolProp>
                <boolProp name="XPathExtractor.namespace">false</boolProp>
              </XPathExtractor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion AllocationState" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="-2003657213">${AllocationState}</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.scope">variable</stringProp>
                <stringProp name="Scope.variable">AllocationState</stringProp>
              </ResponseAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
        </hashTree>
        <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="1.004 RMA Bulk Allocation Submit" enabled="true">
          <boolProp name="LoopController.continue_forever">true</boolProp>
          <intProp name="LoopController.loops">-1</intProp>
        </LoopController>
        <hashTree>
          <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="Request Data" enabled="true">
            <stringProp name="delimiter">,</stringProp>
            <stringProp name="fileEncoding"></stringProp>
            <stringProp name="filename">./CSV/IRmaAllocationsubmitRmaAllocationRequest.csv</stringProp>
            <boolProp name="ignoreFirstLine">false</boolProp>
            <boolProp name="quotedData">true</boolProp>
            <boolProp name="recycle">false</boolProp>
            <stringProp name="shareMode">shareMode.group</stringProp>
            <boolProp name="stopThread">true</boolProp>
            <stringProp name="variableNames"></stringProp>
          </CSVDataSet>
          <hashTree/>
          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If Controller" enabled="true">
            <stringProp name="TestPlan.comments">Check if variable from CSV is &lt;EOF&gt;</stringProp>
            <stringProp name="IfController.condition">&quot;${line}&quot; != &quot;&quot;&amp;&amp;&quot;${line}&quot; != &quot;&lt;EOF&gt;&quot;</stringProp>
            <boolProp name="IfController.evaluateAll">false</boolProp>
          </IfController>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="SoapUI - IRmaAllocation - submitRmaAllocation" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Setup - IRmaAllocation : submitRmaAllocation" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
                  <collectionProp name="Arguments.arguments"/>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${server}</stringProp>
                <stringProp name="HTTPSampler.port">${netUIport}</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">wsa/wsa1/wsdl</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <RegexExtractor guiclass="RegexExtractorGui" testclass="RegexExtractor" testname="Current Interface" enabled="true">
                  <stringProp name="TestPlan.comments">Test the current Interface and get its response</stringProp>
                  <stringProp name="RegexExtractor.useHeaders">false</stringProp>
                  <stringProp name="RegexExtractor.refname">currentInterface</stringProp>
                  <stringProp name="RegexExtractor.regex">targetURI=urn:services-qad-com:service:IRmaAllocation:(.+?)&quot;</stringProp>
                  <stringProp name="RegexExtractor.template">$1$</stringProp>
                  <stringProp name="RegexExtractor.default">none</stringProp>
                  <stringProp name="RegexExtractor.match_number">1</stringProp>
                </RegexExtractor>
                <hashTree/>
                <DebugPostProcessor guiclass="TestBeanGUI" testclass="DebugPostProcessor" testname="Debug PostProcessor" enabled="true">
                  <boolProp name="displayJMeterProperties">false</boolProp>
                  <boolProp name="displayJMeterVariables">true</boolProp>
                  <boolProp name="displaySamplerProperties">true</boolProp>
                  <boolProp name="displaySystemProperties">false</boolProp>
                </DebugPostProcessor>
                <hashTree/>
              </hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Call submitRmaAllocation" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">&lt;soapenv:Envelope xmlns:soapenv=&quot;http://schemas.xmlsoap.org/soap/envelope/&quot; xmlns:urn=&quot;urn:services-qad-com:service:IRmaAllocation:2019-10-17:IRmaAllocation&quot;&gt;&#xd;
   &lt;soapenv:Header/&gt;&#xd;
   &lt;soapenv:Body&gt;&#xd;
      &lt;urn:SubmitRmaAllocation&gt;&#xd;
         &lt;urn:ServiceContext&gt;&#xd;
            &lt;!--Zero or more repetitions:--&gt;&#xd;
            &lt;urn:ServiceProperty&gt;&#xd;
               &lt;urn:PropertyName&gt;username&lt;/urn:PropertyName&gt;&#xd;
               &lt;urn:PropertyValue&gt;mfg&lt;/urn:PropertyValue&gt;&#xd;
            &lt;/urn:ServiceProperty&gt;&#xd;
         &lt;/urn:ServiceContext&gt;&#xd;
         &lt;urn:RmaAllocations&gt;&#xd;
            &lt;!--Zero or more repetitions:--&gt;&#xd;
            &lt;urn:RmaAllocation&gt;&#xd;
               &lt;urn:DomainCode&gt;10USA&lt;/urn:DomainCode&gt;&#xd;
               &lt;urn:Criteria&gt;&lt;/urn:Criteria&gt;&#xd;
               &lt;urn:RequiredCriteria&gt;&lt;/urn:RequiredCriteria&gt;&#xd;
               &lt;urn:AllocateDaysIntoFuture&gt;&lt;/urn:AllocateDaysIntoFuture&gt;&#xd;
               &lt;urn:IsDetailAllocations&gt;${IsDetailAllocations}&lt;/urn:IsDetailAllocations&gt;&#xd;
               &lt;urn:IsFullOrdersOnly&gt;${IsFullOrdersOnly}&lt;/urn:IsFullOrdersOnly&gt;&#xd;
               &lt;urn:IsFullLinesOnly&gt;${IsFullLinesOnly}&lt;/urn:IsFullLinesOnly&gt;&#xd;
               &lt;urn:IsSingleLotOnly&gt;${IsSingleLotOnly}&lt;/urn:IsSingleLotOnly&gt;&#xd;
               &lt;urn:IsNewerLotsOnly&gt;${IsNewerLotsOnly}&lt;/urn:IsNewerLotsOnly&gt;&#xd;
               &lt;urn:IsShowExceptionsOnly&gt;false&lt;/urn:IsShowExceptionsOnly&gt;&#xd;
               &lt;urn:OrderLinesSelected&gt;${OrderLinesSelected}&lt;/urn:OrderLinesSelected&gt;&#xd;
               &lt;urn:LinesWithErrors&gt;${LinesWithErrors}&lt;/urn:LinesWithErrors&gt;&#xd;
               &lt;urn:LinesSuccess&gt;${LinesSuccess}&lt;/urn:LinesSuccess&gt;&#xd;
               &lt;urn:BrowseUrn&gt;urn:browse:mfg:fs161&lt;/urn:BrowseUrn&gt;&#xd;
               &lt;urn:SiteFrom&gt;${SiteFrom}&lt;/urn:SiteFrom&gt;&#xd;
               &lt;urn:SiteFromDescription&gt;&lt;/urn:SiteFromDescription&gt;&#xd;
               &lt;urn:SiteTo&gt;${SiteTo}&lt;/urn:SiteTo&gt;&#xd;
               &lt;urn:SiteToDescription&gt;&lt;/urn:SiteToDescription&gt;&#xd;
               &lt;urn:ItemFrom&gt;${ItemFrom}&lt;/urn:ItemFrom&gt;&#xd;
               &lt;urn:ItemFromDescription&gt;&lt;/urn:ItemFromDescription&gt;&#xd;
               &lt;urn:ItemTo&gt;${ItemTo}&lt;/urn:ItemTo&gt;&#xd;
               &lt;urn:ItemToDescription&gt;&lt;/urn:ItemToDescription&gt;&#xd;
               &lt;urn:CustomDate0&gt;&lt;/urn:CustomDate0&gt;&#xd;
               &lt;urn:CustomDate1&gt;&lt;/urn:CustomDate1&gt;&#xd;
               &lt;urn:CustomDate2&gt;&lt;/urn:CustomDate2&gt;&#xd;
               &lt;urn:CustomDate3&gt;&lt;/urn:CustomDate3&gt;&#xd;
               &lt;urn:CustomDate4&gt;&lt;/urn:CustomDate4&gt;&#xd;
               &lt;urn:CustomDecimal0&gt;&lt;/urn:CustomDecimal0&gt;&#xd;
               &lt;urn:CustomDecimal1&gt;&lt;/urn:CustomDecimal1&gt;&#xd;
               &lt;urn:CustomDecimal2&gt;&lt;/urn:CustomDecimal2&gt;&#xd;
               &lt;urn:CustomDecimal3&gt;&lt;/urn:CustomDecimal3&gt;&#xd;
               &lt;urn:CustomDecimal4&gt;&lt;/urn:CustomDecimal4&gt;&#xd;
               &lt;urn:CustomInteger0&gt;&lt;/urn:CustomInteger0&gt;&#xd;
               &lt;urn:CustomInteger1&gt;&lt;/urn:CustomInteger1&gt;&#xd;
               &lt;urn:CustomInteger2&gt;&lt;/urn:CustomInteger2&gt;&#xd;
               &lt;urn:CustomInteger3&gt;&lt;/urn:CustomInteger3&gt;&#xd;
               &lt;urn:CustomInteger4&gt;&lt;/urn:CustomInteger4&gt;&#xd;
               &lt;urn:CustomLong0&gt;&lt;/urn:CustomLong0&gt;&#xd;
               &lt;urn:CustomLong1&gt;&lt;/urn:CustomLong1&gt;&#xd;
               &lt;urn:CustomNote&gt;&lt;/urn:CustomNote&gt;&#xd;
               &lt;urn:CustomShort0&gt;&lt;/urn:CustomShort0&gt;&#xd;
               &lt;urn:CustomShort1&gt;&lt;/urn:CustomShort1&gt;&#xd;
               &lt;urn:CustomShort2&gt;&lt;/urn:CustomShort2&gt;&#xd;
               &lt;urn:CustomShort3&gt;&lt;/urn:CustomShort3&gt;&#xd;
               &lt;urn:CustomShort4&gt;&lt;/urn:CustomShort4&gt;&#xd;
               &lt;urn:CustomShort5&gt;&lt;/urn:CustomShort5&gt;&#xd;
               &lt;urn:CustomShort6&gt;&lt;/urn:CustomShort6&gt;&#xd;
               &lt;urn:CustomShort7&gt;&lt;/urn:CustomShort7&gt;&#xd;
               &lt;urn:CustomShort8&gt;&lt;/urn:CustomShort8&gt;&#xd;
               &lt;urn:CustomShort9&gt;&lt;/urn:CustomShort9&gt;&#xd;
               &lt;urn:CustomShort10&gt;&lt;/urn:CustomShort10&gt;&#xd;
               &lt;urn:CustomShort11&gt;&lt;/urn:CustomShort11&gt;&#xd;
               &lt;urn:CustomShort12&gt;&lt;/urn:CustomShort12&gt;&#xd;
               &lt;urn:CustomShort13&gt;&lt;/urn:CustomShort13&gt;&#xd;
               &lt;urn:CustomShort14&gt;&lt;/urn:CustomShort14&gt;&#xd;
               &lt;urn:CustomShort15&gt;&lt;/urn:CustomShort15&gt;&#xd;
               &lt;urn:CustomShort16&gt;&lt;/urn:CustomShort16&gt;&#xd;
               &lt;urn:CustomShort17&gt;&lt;/urn:CustomShort17&gt;&#xd;
               &lt;urn:CustomShort18&gt;&lt;/urn:CustomShort18&gt;&#xd;
               &lt;urn:CustomShort19&gt;&lt;/urn:CustomShort19&gt;&#xd;
               &lt;urn:DataOperation&gt;&lt;/urn:DataOperation&gt;&#xd;
            &lt;/urn:RmaAllocation&gt;&#xd;
            &lt;!--Zero or more repetitions:--&gt;&#xd;
            &lt;urn:RmaAllocDetail&gt;&#xd;
               &lt;urn:DomainCode&gt;${domainCode}&lt;/urn:DomainCode&gt;&#xd;
               &lt;urn:RmaNumber&gt;${RmaNumber}&lt;/urn:RmaNumber&gt;&#xd;
               &lt;urn:RmaLine&gt;${RmaLine}&lt;/urn:RmaLine&gt;&#xd;
               &lt;urn:ItemCode&gt;${ItemCode}&lt;/urn:ItemCode&gt;&#xd;
               &lt;urn:UnitOfMeasure&gt;${UnitOfMeasure}&lt;/urn:UnitOfMeasure&gt;&#xd;
               &lt;urn:SiteCode&gt;${SiteCode}&lt;/urn:SiteCode&gt;&#xd;
               &lt;urn:DueDate&gt;${DueDate}&lt;/urn:DueDate&gt;&#xd;
               &lt;urn:Description&gt;&lt;/urn:Description&gt;&#xd;
               &lt;urn:QuantityOrdered&gt;${QuantityOrdered}&lt;/urn:QuantityOrdered&gt;&#xd;
               &lt;urn:QuantityAllocated&gt;${QuantityAllocated}&lt;/urn:QuantityAllocated&gt;&#xd;
               &lt;urn:QuantityToIssue&gt;&lt;/urn:QuantityToIssue&gt;&#xd;
               &lt;urn:QuantityPicked&gt;${QuantityPicked}&lt;/urn:QuantityPicked&gt;&#xd;
               &lt;urn:QuantityShipped&gt;${QuantityShipped}&lt;/urn:QuantityShipped&gt;&#xd;
               &lt;urn:QuantityBackorder&gt;${QuantityBackorder}&lt;/urn:QuantityBackorder&gt;&#xd;
               &lt;urn:EndUser&gt;${EndUser}&lt;/urn:EndUser&gt;&#xd;
               &lt;urn:ShipType&gt;${ShipType}&lt;/urn:ShipType&gt;&#xd;
               &lt;urn:SoldToCustomerCode&gt;${SoldToCustomerCode}&lt;/urn:SoldToCustomerCode&gt;&#xd;
               &lt;urn:ShipToCustomerCode&gt;${ShipToCustomerCode}&lt;/urn:ShipToCustomerCode&gt;&#xd;
               &lt;urn:ServiceOrderNumber&gt;${ServiceOrderNumber}&lt;/urn:ServiceOrderNumber&gt;&#xd;
               &lt;urn:PurchaseOrderNumber&gt;${PurchaseOrderNumber}&lt;/urn:PurchaseOrderNumber&gt;&#xd;
               &lt;urn:OrderDate&gt;${OrderDate}&lt;/urn:OrderDate&gt;&#xd;
               &lt;urn:IsSelected&gt;${IsSelected}&lt;/urn:IsSelected&gt;&#xd;
               &lt;urn:AllocationState&gt;&lt;/urn:AllocationState&gt;&#xd;
               &lt;urn:BackorderReason&gt;&lt;/urn:BackorderReason&gt;&#xd;
               &lt;urn:BillToCustomerCode&gt;&lt;/urn:BillToCustomerCode&gt;&#xd;
               &lt;urn:HasDetailAllocations&gt;false&lt;/urn:HasDetailAllocations&gt;&#xd;
               &lt;urn:IsManualQuantityAllocated&gt;false&lt;/urn:IsManualQuantityAllocated&gt;&#xd;
               &lt;urn:QuantityPreviouslyAllocated&gt;&lt;/urn:QuantityPreviouslyAllocated&gt;&#xd;
               &lt;urn:Sequence&gt;0&lt;/urn:Sequence&gt;&#xd;
               &lt;urn:CustomDate0&gt;&lt;/urn:CustomDate0&gt;&#xd;
               &lt;urn:CustomDate1&gt;&lt;/urn:CustomDate1&gt;&#xd;
               &lt;urn:CustomDate2&gt;&lt;/urn:CustomDate2&gt;&#xd;
               &lt;urn:CustomDate3&gt;&lt;/urn:CustomDate3&gt;&#xd;
               &lt;urn:CustomDate4&gt;&lt;/urn:CustomDate4&gt;&#xd;
               &lt;urn:CustomDecimal0&gt;&lt;/urn:CustomDecimal0&gt;&#xd;
               &lt;urn:CustomDecimal1&gt;&lt;/urn:CustomDecimal1&gt;&#xd;
               &lt;urn:CustomDecimal2&gt;&lt;/urn:CustomDecimal2&gt;&#xd;
               &lt;urn:CustomDecimal3&gt;&lt;/urn:CustomDecimal3&gt;&#xd;
               &lt;urn:CustomDecimal4&gt;&lt;/urn:CustomDecimal4&gt;&#xd;
               &lt;urn:CustomInteger0&gt;&lt;/urn:CustomInteger0&gt;&#xd;
               &lt;urn:CustomInteger1&gt;&lt;/urn:CustomInteger1&gt;&#xd;
               &lt;urn:CustomInteger2&gt;&lt;/urn:CustomInteger2&gt;&#xd;
               &lt;urn:CustomInteger3&gt;&lt;/urn:CustomInteger3&gt;&#xd;
               &lt;urn:CustomInteger4&gt;&lt;/urn:CustomInteger4&gt;&#xd;
               &lt;urn:CustomLong0&gt;&lt;/urn:CustomLong0&gt;&#xd;
               &lt;urn:CustomLong1&gt;&lt;/urn:CustomLong1&gt;&#xd;
               &lt;urn:CustomNote&gt;&lt;/urn:CustomNote&gt;&#xd;
               &lt;urn:CustomShort0&gt;&lt;/urn:CustomShort0&gt;&#xd;
               &lt;urn:CustomShort1&gt;&lt;/urn:CustomShort1&gt;&#xd;
               &lt;urn:CustomShort2&gt;&lt;/urn:CustomShort2&gt;&#xd;
               &lt;urn:CustomShort3&gt;&lt;/urn:CustomShort3&gt;&#xd;
               &lt;urn:CustomShort4&gt;&lt;/urn:CustomShort4&gt;&#xd;
               &lt;urn:CustomShort5&gt;&lt;/urn:CustomShort5&gt;&#xd;
               &lt;urn:CustomShort6&gt;&lt;/urn:CustomShort6&gt;&#xd;
               &lt;urn:CustomShort7&gt;&lt;/urn:CustomShort7&gt;&#xd;
               &lt;urn:CustomShort8&gt;&lt;/urn:CustomShort8&gt;&#xd;
               &lt;urn:CustomShort9&gt;&lt;/urn:CustomShort9&gt;&#xd;
               &lt;urn:CustomShort10&gt;&lt;/urn:CustomShort10&gt;&#xd;
               &lt;urn:CustomShort11&gt;&lt;/urn:CustomShort11&gt;&#xd;
               &lt;urn:CustomShort12&gt;&lt;/urn:CustomShort12&gt;&#xd;
               &lt;urn:CustomShort13&gt;&lt;/urn:CustomShort13&gt;&#xd;
               &lt;urn:CustomShort14&gt;&lt;/urn:CustomShort14&gt;&#xd;
               &lt;urn:CustomShort15&gt;&lt;/urn:CustomShort15&gt;&#xd;
               &lt;urn:CustomShort16&gt;&lt;/urn:CustomShort16&gt;&#xd;
               &lt;urn:CustomShort17&gt;&lt;/urn:CustomShort17&gt;&#xd;
               &lt;urn:CustomShort18&gt;&lt;/urn:CustomShort18&gt;&#xd;
               &lt;urn:CustomShort19&gt;&lt;/urn:CustomShort19&gt;&#xd;
               &lt;urn:DataOperation&gt;&lt;/urn:DataOperation&gt;&#xd;
            &lt;/urn:RmaAllocDetail&gt;&#xd;
            &lt;!--Zero or more repetitions:--&gt;&#xd;
            &lt;urn:RmaAllocFilterCondition&gt;&#xd;
               &lt;urn:FieldName&gt;${FieldName}&lt;/urn:FieldName&gt;&#xd;
               &lt;urn:Operator&gt;${Operator}&lt;/urn:Operator&gt;&#xd;
               &lt;urn:Value1&gt;${Value1}&lt;/urn:Value1&gt;&#xd;
               &lt;urn:Value1Type&gt;literal&lt;/urn:Value1Type&gt;&#xd;
               &lt;urn:Value2&gt;&lt;/urn:Value2&gt;&#xd;
               &lt;urn:Value2Type&gt;&lt;/urn:Value2Type&gt;&#xd;
            &lt;/urn:RmaAllocFilterCondition&gt;&#xd;
            &lt;!--Zero or more repetitions:--&gt;&#xd;
            &lt;urn:RmaAllocError&gt;&#xd;
               &lt;urn:DomainCode&gt;10USA&lt;/urn:DomainCode&gt;&#xd;
               &lt;urn:FieldName&gt;&lt;/urn:FieldName&gt;&#xd;
               &lt;urn:FieldValue&gt;&lt;/urn:FieldValue&gt;&#xd;
               &lt;urn:BufferXPath&gt;&lt;/urn:BufferXPath&gt;&#xd;
               &lt;urn:Severity&gt;&lt;/urn:Severity&gt;&#xd;
               &lt;urn:SourceProperty&gt;&lt;/urn:SourceProperty&gt;&#xd;
               &lt;urn:MessageText&gt;&lt;/urn:MessageText&gt;&#xd;
            &lt;/urn:RmaAllocError&gt;&#xd;
         &lt;/urn:RmaAllocations&gt;&#xd;
      &lt;/urn:SubmitRmaAllocation&gt;&#xd;
   &lt;/soapenv:Body&gt;&#xd;
&lt;/soapenv:Envelope&gt;</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${server}</stringProp>
                <stringProp name="HTTPSampler.port">${netUIport}</stringProp>
                <stringProp name="HTTPSampler.protocol">http</stringProp>
                <stringProp name="HTTPSampler.contentEncoding"></stringProp>
                <stringProp name="HTTPSampler.path">wsa/wsa1</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">false</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value"> text/xml</stringProp>
                    </elementProp>
                    <elementProp name="" elementType="Header">
                      <stringProp name="Header.name">SOAPAction</stringProp>
                      <stringProp name="Header.value"> &quot;&quot;</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Extractor LinesSuccess" enabled="true">
                  <stringProp name="XPathExtractor.default"></stringProp>
                  <stringProp name="XPathExtractor.refname">LinesSuccess</stringProp>
                  <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">//LinesSuccess</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">false</boolProp>
                  <boolProp name="XPathExtractor.namespace">false</boolProp>
                </XPathExtractor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion LinesSuccess" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1627978398">${LinesSuccess}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">LinesSuccess</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Extractor LinesWithErrors" enabled="true">
                  <stringProp name="XPathExtractor.default"></stringProp>
                  <stringProp name="XPathExtractor.refname">LinesWithErrors</stringProp>
                  <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">//LinesWithErrors</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">false</boolProp>
                  <boolProp name="XPathExtractor.namespace">false</boolProp>
                </XPathExtractor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion LinesWithErrors" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="228534596">${LinesWithErrors}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">LinesWithErrors</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Extractor RmaNumber" enabled="true">
                  <stringProp name="XPathExtractor.default"></stringProp>
                  <stringProp name="XPathExtractor.refname">RmaNumber</stringProp>
                  <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">//RmaNumber</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">false</boolProp>
                  <boolProp name="XPathExtractor.namespace">false</boolProp>
                </XPathExtractor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion RmaNumber" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1205062181">${RmaNumber}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">RmaNumber</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Extractor RmaLine" enabled="true">
                  <stringProp name="XPathExtractor.default"></stringProp>
                  <stringProp name="XPathExtractor.refname">RmaLine</stringProp>
                  <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">//RmaLine</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">false</boolProp>
                  <boolProp name="XPathExtractor.namespace">false</boolProp>
                </XPathExtractor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion RmaLine" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="222513946">${RmaLine}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">RmaLine</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Extractor ItemCode" enabled="true">
                  <stringProp name="XPathExtractor.default"></stringProp>
                  <stringProp name="XPathExtractor.refname">ItemCode</stringProp>
                  <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">//ItemCode</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">false</boolProp>
                  <boolProp name="XPathExtractor.namespace">false</boolProp>
                </XPathExtractor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion ItemCode" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1169700294">${ItemCode}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">ItemCode</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Extractor UnitOfMeasure" enabled="true">
                  <stringProp name="XPathExtractor.default"></stringProp>
                  <stringProp name="XPathExtractor.refname">UnitOfMeasure</stringProp>
                  <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">//UnitOfMeasure</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">false</boolProp>
                  <boolProp name="XPathExtractor.namespace">false</boolProp>
                </XPathExtractor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion UnitOfMeasure" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1055743793">${UnitOfMeasure}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">UnitOfMeasure</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Extractor SiteCode" enabled="true">
                  <stringProp name="XPathExtractor.default"></stringProp>
                  <stringProp name="XPathExtractor.refname">SiteCode</stringProp>
                  <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">//SiteCode</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">false</boolProp>
                  <boolProp name="XPathExtractor.namespace">false</boolProp>
                </XPathExtractor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion SiteCode" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1517399534">${SiteCode}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">SiteCode</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Extractor DueDate" enabled="true">
                  <stringProp name="XPathExtractor.default"></stringProp>
                  <stringProp name="XPathExtractor.refname">DueDate</stringProp>
                  <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">//DueDate</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">false</boolProp>
                  <boolProp name="XPathExtractor.namespace">false</boolProp>
                </XPathExtractor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion DueDate" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="209963762">${DueDate}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">DueDate</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Extractor QuantityOrdered" enabled="true">
                  <stringProp name="XPathExtractor.default"></stringProp>
                  <stringProp name="XPathExtractor.refname">QuantityOrdered</stringProp>
                  <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">//QuantityOrdered</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">false</boolProp>
                  <boolProp name="XPathExtractor.namespace">false</boolProp>
                </XPathExtractor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion QuantityOrdered" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1992368558">${QuantityOrdered}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">QuantityOrdered</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Extractor QuantityAllocated" enabled="true">
                  <stringProp name="XPathExtractor.default"></stringProp>
                  <stringProp name="XPathExtractor.refname">QuantityAllocated</stringProp>
                  <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">//QuantityAllocated</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">false</boolProp>
                  <boolProp name="XPathExtractor.namespace">false</boolProp>
                </XPathExtractor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion QuantityAllocated" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-1784715080">${QuantityAllocated}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">QuantityAllocated</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Extractor QuantityToIssue" enabled="true">
                  <stringProp name="XPathExtractor.default"></stringProp>
                  <stringProp name="XPathExtractor.refname">QuantityToIssue</stringProp>
                  <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">//QuantityToIssue</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">false</boolProp>
                  <boolProp name="XPathExtractor.namespace">false</boolProp>
                </XPathExtractor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion QuantityToIssue" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-995807807">${QuantityToIssue}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">QuantityToIssue</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Extractor QuantityPicked" enabled="true">
                  <stringProp name="XPathExtractor.default"></stringProp>
                  <stringProp name="XPathExtractor.refname">QuantityPicked</stringProp>
                  <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">//QuantityPicked</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">false</boolProp>
                  <boolProp name="XPathExtractor.namespace">false</boolProp>
                </XPathExtractor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion QuantityPicked" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1119003419">${QuantityPicked}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">QuantityPicked</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Extractor QuantityShipped" enabled="true">
                  <stringProp name="XPathExtractor.default"></stringProp>
                  <stringProp name="XPathExtractor.refname">QuantityShipped</stringProp>
                  <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">//QuantityShipped</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">false</boolProp>
                  <boolProp name="XPathExtractor.namespace">false</boolProp>
                </XPathExtractor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion QuantityShipped" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="552048172">${QuantityShipped}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">16</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">QuantityShipped</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Extractor QuantityBackorder" enabled="true">
                  <stringProp name="XPathExtractor.default"></stringProp>
                  <stringProp name="XPathExtractor.refname">QuantityBackorder</stringProp>
                  <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">//QuantityBackorder</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">false</boolProp>
                  <boolProp name="XPathExtractor.namespace">false</boolProp>
                </XPathExtractor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion QuantityBackorder" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-975763784">${QuantityBackorder}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">QuantityBackorder</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Extractor EndUser" enabled="true">
                  <stringProp name="XPathExtractor.default">null</stringProp>
                  <stringProp name="XPathExtractor.refname">EndUser</stringProp>
                  <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">//EndUser</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">false</boolProp>
                  <boolProp name="XPathExtractor.namespace">false</boolProp>
                </XPathExtractor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion EndUser" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="22808558">${EndUser}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">EndUser</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Extractor SoldToCustomerCode" enabled="true">
                  <stringProp name="XPathExtractor.default">null</stringProp>
                  <stringProp name="XPathExtractor.refname">SoldToCustomerCode</stringProp>
                  <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">//SoldToCustomerCode</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">false</boolProp>
                  <boolProp name="XPathExtractor.namespace">false</boolProp>
                </XPathExtractor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion SoldToCustomerCode" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="937290348">${SoldToCustomerCode}</stringProp>
                    <stringProp name="3392903">null</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">40</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">SoldToCustomerCode</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Extractor ShipToCustomerCode" enabled="true">
                  <stringProp name="XPathExtractor.default">null</stringProp>
                  <stringProp name="XPathExtractor.refname">ShipToCustomerCode</stringProp>
                  <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">//ShipToCustomerCode</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">false</boolProp>
                  <boolProp name="XPathExtractor.namespace">false</boolProp>
                </XPathExtractor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion ShipToCustomerCode" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="2025424900">${ShipToCustomerCode}</stringProp>
                    <stringProp name="3392903">null</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">40</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">ShipToCustomerCode</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Extractor ServiceOrderNumber" enabled="true">
                  <stringProp name="XPathExtractor.default">null</stringProp>
                  <stringProp name="XPathExtractor.refname">ServiceOrderNumber</stringProp>
                  <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">//ServiceOrderNumber</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">false</boolProp>
                  <boolProp name="XPathExtractor.namespace">false</boolProp>
                </XPathExtractor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion ServiceOrderNumber" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1174498340">${ServiceOrderNumber}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">ServiceOrderNumber</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Extractor PurchaseOrderNumber" enabled="true">
                  <stringProp name="XPathExtractor.default">null</stringProp>
                  <stringProp name="XPathExtractor.refname">PurchaseOrderNumber</stringProp>
                  <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">//PurchaseOrderNumber</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">false</boolProp>
                  <boolProp name="XPathExtractor.namespace">false</boolProp>
                </XPathExtractor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion PurchaseOrderNumber" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="465089086">${PurchaseOrderNumber}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">PurchaseOrderNumber</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Extractor OrderDate" enabled="true">
                  <stringProp name="XPathExtractor.default"></stringProp>
                  <stringProp name="XPathExtractor.refname">OrderDate</stringProp>
                  <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">//OrderDate</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">false</boolProp>
                  <boolProp name="XPathExtractor.namespace">false</boolProp>
                </XPathExtractor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion OrderDate" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="1094709272">${OrderDate}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">1</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">OrderDate</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Extractor IsSelected" enabled="true">
                  <stringProp name="XPathExtractor.default"></stringProp>
                  <stringProp name="XPathExtractor.refname">IsSelected</stringProp>
                  <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">//IsSelected</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">false</boolProp>
                  <boolProp name="XPathExtractor.namespace">false</boolProp>
                </XPathExtractor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion IsSelected" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-2144949791">${IsSelected}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">IsSelected</stringProp>
                </ResponseAssertion>
                <hashTree/>
                <XPathExtractor guiclass="XPathExtractorGui" testclass="XPathExtractor" testname="Extractor AllocationState" enabled="true">
                  <stringProp name="XPathExtractor.default"></stringProp>
                  <stringProp name="XPathExtractor.refname">AllocationState</stringProp>
                  <stringProp name="XPathExtractor.matchNumber">-1</stringProp>
                  <stringProp name="XPathExtractor.xpathQuery">//AllocationState</stringProp>
                  <boolProp name="XPathExtractor.validate">false</boolProp>
                  <boolProp name="XPathExtractor.tolerant">false</boolProp>
                  <boolProp name="XPathExtractor.namespace">false</boolProp>
                </XPathExtractor>
                <hashTree/>
                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Assertion AllocationState" enabled="true">
                  <collectionProp name="Asserion.test_strings">
                    <stringProp name="-2003657213">${AllocationState}</stringProp>
                  </collectionProp>
                  <stringProp name="Assertion.custom_message"></stringProp>
                  <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                  <boolProp name="Assertion.assume_success">false</boolProp>
                  <intProp name="Assertion.test_type">8</intProp>
                  <stringProp name="Assertion.scope">variable</stringProp>
                  <stringProp name="Scope.variable">AllocationState</stringProp>
                </ResponseAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Logout" enabled="true">
          <stringProp name="IncludeController.includepath">..\..\TestFragement\Common\Logout Fragment.jmx</stringProp>
        </IncludeController>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
