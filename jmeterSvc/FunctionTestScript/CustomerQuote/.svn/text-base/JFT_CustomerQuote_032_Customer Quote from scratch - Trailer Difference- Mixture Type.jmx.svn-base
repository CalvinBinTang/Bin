<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.1.1 r1855137">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="JFT_CustomerQuote_032_Customer Quote from scratch - Trailer Difference-Service and Depot Type line" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1479226785000</longProp>
        <longProp name="ThreadGroup.end_time">1479226785000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
        </CookieManager>
        <hashTree/>
        <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="1.001 - Web UI - LogIn" enabled="true">
          <stringProp name="IncludeController.includepath">../../TestFragement/Common/Login-Fragment.jmx</stringProp>
        </IncludeController>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="SetUpEnvironment" enabled="true">
          <stringProp name="filename">../../CSV/LogIn.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${server}</stringProp>
          <stringProp name="HTTPSampler.port">${tomcatPort}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocolRest}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <stringProp name="HTTPSampler.connect_timeout">60000</stringProp>
          <stringProp name="HTTPSampler.response_timeout">60000</stringProp>
        </ConfigTestElement>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="Content-Type" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="csvFile" elementType="Argument">
              <stringProp name="Argument.name">csvFile</stringProp>
              <stringProp name="Argument.value">../../CSV/LogIn.csv</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="tempJump" elementType="Argument">
              <stringProp name="Argument.name">tempJump</stringProp>
              <stringProp name="Argument.value">${__CSVRead(..\..\CSV\LogIn.csv,1)}${__CSVRead(..\..\CSV\LogIn.csv,next)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dbUrl" elementType="Argument">
              <stringProp name="Argument.name">dbUrl</stringProp>
              <stringProp name="Argument.value">${__P(dbUrl,jdbc:datadirect:openedge://${__CSVRead(..\..\CSV\LogIn.csv,1)}:22189;DatabaseName=mfgdb)}</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="dbuser" elementType="Argument">
              <stringProp name="Argument.name">dbuser</stringProp>
              <stringProp name="Argument.value">devel</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="domainCode" elementType="Argument">
              <stringProp name="Argument.name">domainCode</stringProp>
              <stringProp name="Argument.value">10USA</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="Sold-To" elementType="Argument">
              <stringProp name="Argument.name">Sold-To</stringProp>
              <stringProp name="Argument.value">10c1001</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="revision" elementType="Argument">
              <stringProp name="Argument.name">revision</stringProp>
              <stringProp name="Argument.value">1</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
          <stringProp name="dataSource">JDBC</stringProp>
          <stringProp name="poolMax">10</stringProp>
          <stringProp name="timeout">10000</stringProp>
          <stringProp name="trimInterval">60000</stringProp>
          <boolProp name="autocommit">true</boolProp>
          <stringProp name="transactionIsolation">DEFAULT</stringProp>
          <boolProp name="keepAlive">true</boolProp>
          <stringProp name="connectionAge">5000</stringProp>
          <stringProp name="checkQuery"></stringProp>
          <stringProp name="dbUrl">${dbUrl}</stringProp>
          <stringProp name="driver">com.ddtek.jdbc.openedge.OpenEdgeDriver</stringProp>
          <stringProp name="username">${dbuser}</stringProp>
          <stringProp name="password"></stringProp>
          <stringProp name="initQuery"></stringProp>
        </JDBCDataSource>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>true</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>true</responseData>
              <samplerData>true</samplerData>
              <xml>true</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>true</responseHeaders>
              <requestHeaders>true</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <url>true</url>
              <fileName>true</fileName>
              <hostname>true</hostname>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">~/log/${__TestPlanName}_${__time(YMDHMS)}.xml</stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename">~/log/${__TestPlanName}_${__time(YMDHMS)}.xml</stringProp>
        </ResultCollector>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="S1-Recalculate = Yes" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="1.002 - Create Customer Quote from scratch- Quote Header" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Set value for create customer quote from scratch" enabled="true">
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">//vars.put(&quot;CreateSrOfromISB_Serial&quot;,&quot;01010-0111-1&quot;);
vars.put(&quot;customerQuoteHeaderUI_soldToCustomerCode&quot;,&quot;${Sold-To}&quot;);
vars.put(&quot;customerQuoteHeaderUI_revision&quot;,&quot;${revision}&quot;);
vars.put(&quot;domainCode&quot;, &quot;${domainCode}&quot;);

vars.put(&quot;customerQuoteHeaderUI_isCombineDocument&quot;,&quot;true&quot;);
vars.put(&quot;customerQuoteHeaderUI_purchaseOrderNumber&quot;,&quot;PO032-1&quot;);
//vars.put(&quot;customerQuoteHeaderUI_freightTermsCode&quot;,&quot;${FreightTerm}&quot;);
//vars.put(&quot;customerQuoteHeaderUI_freightListCode&quot;,&quot;${FreightList}&quot;);</stringProp>
              <stringProp name="scriptLanguage">javascript</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="1.002 - Create Customer Quote Header-001-Create" enabled="true">
              <stringProp name="IncludeController.includepath">..\..\TestFragement\CustomerQuote\Fragement_CreateCustomerQuoteHeader.jmx</stringProp>
            </IncludeController>
            <hashTree/>
          </hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="1.003 - Create Customer Quote Header and line" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">2</stringProp>
          </LoopController>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set" enabled="true">
              <stringProp name="filename">../../FunctionTestScript/CustomerQuote/CSV/JFT_CustomerQuote_032_Customer Quote from scratch - Trailer Difference-Service and Depot Type line.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">false</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.thread</stringProp>
            </CSVDataSet>
            <hashTree/>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end"></stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">Counter</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">true</boolProp>
              <boolProp name="CounterConfig.reset_on_tg_iteration">true</boolProp>
            </CounterConfig>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Create Customer Quote Line ${QuoteCount}" enabled="true">
              <stringProp name="IfController.condition">${__jexl3(&quot;${QuoteLine}&quot; !=&quot;&lt;EOF&gt;&quot;)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="1.003- 1-Create ${QuoteType} type quote line" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Set Up Data" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">//if (&quot;${QuoteType}&quot;==&quot;Service&quot;)
//{vars.put(&quot;QuoteType&quot;,&quot;1&quot;);}
//else {vars.put(&quot;QuoteType&quot;,&quot;0&quot;);}

vars.put(&quot;customerQuoteLine_domainCode&quot;,&quot;${domainCode}&quot;);//Manadatory}
vars.put(&quot;customerQuoteLine_quoteNumber&quot;,&quot;${output_customerQuoteHeaderUI_quoteNumber}&quot;);//Mandatory}
vars.put(&quot;customerQuoteLine_revision&quot;,&quot;${revision}&quot;);//Madatory
if(&quot;${QuoteType}&quot;!=&quot;&quot;){
vars.put(&quot;customerQuoteLine_referenceType&quot;,&quot;${__if(&quot;${QuoteType}&quot;,&quot;Service&quot;,1,0,)}&quot;);
}
if(&quot;${RepairType}&quot;!=&quot;&quot;){
vars.put(&quot;customerQuoteLine_itemRepairTypeDisplayValue&quot;,&quot;${RepairType}&quot;);}
if(&quot;${EndUser}&quot;!=&quot;&quot;){
vars.put(&quot;customerQuoteLine_endUserCode&quot;, &quot;${EndUser}&quot;);}
if(&quot;${Engineer}&quot;!=&quot;&quot;){
vars.put(&quot;customerQuoteLine_engineerCode&quot;, &quot;${Engineer}&quot;);}
if(&quot;${WorkCode}&quot;!=&quot;&quot;){
vars.put(&quot;customerQuoteLine_workCode&quot;,&quot;${WorkCode}&quot;);}//Fixed}
if(&quot;${itemCode}&quot;!=&quot;&quot;){
vars.put(&quot;customerQuoteLine_itemCode&quot;,&quot;${itemCode}&quot;);}
if(&quot;${LotSerial}&quot;!=&quot;&quot;){
vars.put(&quot;customerQuoteLine_lotSerial&quot;,&quot;${LotSerial}&quot;);}
if(&quot;${QuantityQuoted}&quot;!=&quot;&quot;){
vars.put(&quot;customerQuoteLine_quantityQuoted&quot;,&quot;${QuantityQuoted}&quot;);}
if(&quot;${LineSite}&quot;!=&quot;&quot;){
vars.put(&quot;customerQuoteLine_siteCode&quot;,&quot;${LineSite}&quot;);}
if(&quot;${FreightWeight}&quot;!=&quot;&quot;){
vars.put(&quot;customerQuoteLine_freightWeight&quot;,&quot;${FreightWeight}&quot;);}
if(&quot;${FreightClass}&quot;!=&quot;&quot;){
vars.put(&quot;customerQuoteLine_freightClass&quot;,&quot;${FreightClass}&quot;);}


</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create Quote Line" enabled="true">
                  <stringProp name="IncludeController.includepath">..\..\TestFragement\CustomerQuote\Fragement_CreateCustomerQuoteLine_ServiceOrDeporRepairType.jmx</stringProp>
                </IncludeController>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="1.004 -Go to Customer Quote Header and save" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1.004-1- CustomerQuoteHeader Fetch" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="domainCode" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">domainCode</stringProp>
                    <stringProp name="Argument.value">${domainCode}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="quoteNumber" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">quoteNumber</stringProp>
                    <stringProp name="Argument.value">${output_customerQuoteHeaderUI_quoteNumber}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="revision" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${revision}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">revision</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${server}</stringProp>
              <stringProp name="HTTPSampler.port">${tomcatPort}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/${webapp}/api/erp/customerQuoteHeaders</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json; charset=UTF-8
				</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${protocol}://${server}:${tomcatPort}
				</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64)
					AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87
					Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="DNT" elementType="Header">
                    <stringProp name="Header.name">DNT</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="X-Requested-With" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${protocol}://${server}:${tomcatPort}/${webapp}/
				</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Verify header trailer code" enabled="true">
                <stringProp name="JSON_PATH">$.data.customerQuoteHeaderUIs[0].trailerCode1</stringProp>
                <stringProp name="EXPECTED_VALUE">20</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="trailerAmount validation" enabled="true">
                <stringProp name="JSON_PATH">$.data.customerQuoteHeaderUIs[0].trailerAmount1</stringProp>
                <stringProp name="EXPECTED_VALUE">0</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="TrailerCharge" enabled="true">
                <stringProp name="JSON_PATH">$.data.customerQuoteHeaderUIs[0].totalTrailerCharges</stringProp>
                <stringProp name="EXPECTED_VALUE">0</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ExtractFullResponse" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">RequestData</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NotFound</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="1.004-2-Post Customer Quote Header" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="customerQuoteHeader save" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${RequestData}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${server}</stringProp>
                <stringProp name="HTTPSampler.port">${tomcatPort}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">/${webapp}/api/erp/customerQuoteHeaders?domainCode=${domainCode}&amp;quoteNumber=${output_customerQuoteHeaderUI_quoteNumber}&amp;revision=${revision}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json; charset=UTF-8
				</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="Origin" elementType="Header">
                      <stringProp name="Header.name">Origin</stringProp>
                      <stringProp name="Header.value">${protocol}://${server}:${tomcatPort}
				</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64)
					AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87
					Safari/537.36</stringProp>
                    </elementProp>
                    <elementProp name="DNT" elementType="Header">
                      <stringProp name="Header.name">DNT</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="X-Requested-With" elementType="Header">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${protocol}://${server}:${tomcatPort}/${webapp}/
				</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Update JSON using JavaScript" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var requestData = vars.get(&quot;RequestData&quot;);

//Parse the JSON to get a JavaScript data object
var objRequest = JSON.parse(requestData);
//Update Reqeust data
objRequest.customerQuoteHeaderUIs[0].isProcessQuoteSummary=&quot;true&quot;;
objRequest.customerQuoteHeaderUIs[0].isProcessPostTrailer=&quot;true&quot;;
//Convert the data object back to a JSON string 
var strUpdatedRequest = JSON.stringify(objRequest);
//Update ${RequestData} to have the value of the updated JSON
vars.put(&quot;RequestData&quot;, strUpdatedRequest);</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="lineTotal" enabled="false">
                  <stringProp name="JSON_PATH">$.data.customerQuoteHeaderUIs[0].lineTotal</stringProp>
                  <stringProp name="EXPECTED_VALUE">735</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                  <stringProp name="TestPlan.comments">			</stringProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="total Trailer Charge" enabled="false">
                  <stringProp name="JSON_PATH">$.data.customerQuoteHeaderUIs[0].totalTrailerCharges</stringProp>
                  <stringProp name="EXPECTED_VALUE">8</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="totalAmount" enabled="false">
                  <stringProp name="JSON_PATH">$.data.customerQuoteHeaderUIs[0].totalAmount</stringProp>
                  <stringProp name="EXPECTED_VALUE">12311</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="totalTax" enabled="false">
                  <stringProp name="JSON_PATH">$.data.customerQuoteHeaderUIs[0].totalTax</stringProp>
                  <stringProp name="EXPECTED_VALUE">0</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="result" enabled="true">
                  <stringProp name="JSON_PATH">submitResult.success</stringProp>
                  <stringProp name="EXPECTED_VALUE">true</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="1.004-3- Fetch quote header" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1.003- 3- Fetch quote header" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="domainCode" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">domainCode</stringProp>
                      <stringProp name="Argument.value">${domainCode}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="quoteNumber" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">quoteNumber</stringProp>
                      <stringProp name="Argument.value">${output_customerQuoteHeaderUI_quoteNumber}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="revision" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${revision}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">revision</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${server}</stringProp>
                <stringProp name="HTTPSampler.port">${tomcatPort}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">/${webapp}/api/erp/customerQuoteHeaders</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json; charset=UTF-8
				</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="Origin" elementType="Header">
                      <stringProp name="Header.name">Origin</stringProp>
                      <stringProp name="Header.value">${protocol}://${server}:${tomcatPort}
				</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64)
					AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87
					Safari/537.36</stringProp>
                    </elementProp>
                    <elementProp name="DNT" elementType="Header">
                      <stringProp name="Header.name">DNT</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="X-Requested-With" elementType="Header">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${protocol}://${server}:${tomcatPort}/${webapp}/
				</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ExtractFullResponse" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">RequestData</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NotFound</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="1.004-4-Post Customer Quote Header" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="customerQuoteHeader save" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${RequestData}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${server}</stringProp>
                <stringProp name="HTTPSampler.port">${tomcatPort}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">/${webapp}/api/erp/customerQuoteHeaders?domainCode=${domainCode}&amp;quoteNumber=${output_customerQuoteHeaderUI_quoteNumber}&amp;revision=${revision}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Update JSON using JavaScript" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var requestData = vars.get(&quot;RequestData&quot;);
var objRequest = JSON.parse(requestData);
objRequest.customerQuoteHeaderUIs[0].trailerAmount1=&quot;100&quot;
objRequest.customerQuoteHeaderUIs[0].trailerAmount2=&quot;200&quot;
objRequest.customerQuoteHeaderUIs[0].trailerAmount3=&quot;300&quot;
objRequest.customerQuoteHeaderUIs[0].isCalculateFreight= &quot;false&quot;;
objRequest.customerQuoteHeaderUIs[0].isProcessQuoteSummary=&quot;true&quot;;
var strUpdatedRequest = JSON.stringify(objRequest);
vars.put(&quot;RequestData&quot;, strUpdatedRequest);
</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json; charset=UTF-8
				</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="Origin" elementType="Header">
                      <stringProp name="Header.name">Origin</stringProp>
                      <stringProp name="Header.value">${protocol}://${server}:${tomcatPort}
				</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64)
					AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87
					Safari/537.36</stringProp>
                    </elementProp>
                    <elementProp name="DNT" elementType="Header">
                      <stringProp name="Header.name">DNT</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="X-Requested-With" elementType="Header">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${protocol}://${server}:${tomcatPort}/${webapp}/
				</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ExtractFullResponse" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">RequestData</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NotFound</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="total Trailer Charge" enabled="true">
                  <stringProp name="JSON_PATH">$.data.customerQuoteHeaderUIs[0].totalTrailerCharges</stringProp>
                  <stringProp name="EXPECTED_VALUE">600</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="totalAmount" enabled="false">
                  <stringProp name="JSON_PATH">$.data.customerQuoteHeaderUIs[0].totalAmount</stringProp>
                  <stringProp name="EXPECTED_VALUE"></stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="totalTax" enabled="false">
                  <stringProp name="JSON_PATH">$.data.customerQuoteHeaderUIs[0].totalTax</stringProp>
                  <stringProp name="EXPECTED_VALUE">0</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="result" enabled="true">
                  <stringProp name="JSON_PATH">submitResult.success</stringProp>
                  <stringProp name="EXPECTED_VALUE">true</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="1.005 - Click Release AND Check" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1.005- 1- Customer Quote Release Check" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${RequestData}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${server}</stringProp>
              <stringProp name="HTTPSampler.port">${tomcatPort}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/${webapp}/api/erp/customerQuoteHeaders/releasePrecheck?domainCode=${domainCode}&amp;quoteNumber=${output_customerQuoteHeaderUI_quoteNumber}&amp;revision=${revision}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json; charset=UTF-8
				</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${protocol}://${server}:${tomcatPort}
				</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64)
					AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87
					Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="DNT" elementType="Header">
                    <stringProp name="Header.name">DNT</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="X-Requested-With" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${protocol}://${server}:${tomcatPort}/${webapp}/
				</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ExtractFullResponse" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">RequestData</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NotFound</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="isValidForRelease" enabled="true">
                <stringProp name="JSON_PATH">$.isValidForRelease</stringProp>
                <stringProp name="EXPECTED_VALUE">true</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="1.005- 2- Quote Release" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <stringProp name="TestPlan.comments">	</stringProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1.006 -2- CustomerQuoteHeader Fetch" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="domainCode" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">domainCode</stringProp>
                      <stringProp name="Argument.value">${domainCode}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="quoteNumber" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">quoteNumber</stringProp>
                      <stringProp name="Argument.value">${output_customerQuoteHeaderUI_quoteNumber}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="revision" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${revision}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">revision</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${server}</stringProp>
                <stringProp name="HTTPSampler.port">${tomcatPort}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">/${webapp}/api/erp/CustomerQuoteReleases</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json; charset=UTF-8
				</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="Origin" elementType="Header">
                      <stringProp name="Header.name">Origin</stringProp>
                      <stringProp name="Header.value">${protocol}://${server}:${tomcatPort}
				</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64)
					AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87
					Safari/537.36</stringProp>
                    </elementProp>
                    <elementProp name="DNT" elementType="Header">
                      <stringProp name="Header.name">DNT</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="X-Requested-With" elementType="Header">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${protocol}://${server}:${tomcatPort}/${webapp}/
				</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ExtractFullResponse" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">RequestData</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NotFound</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1.005 -3- Input Engineer" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${RequestData}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${server}</stringProp>
              <stringProp name="HTTPSampler.port">${tomcatPort}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/${webapp}/api/erp/customerQuoteReleases/fieldChange?fieldName=engineerCode</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${protocol}://${server}:${tomcatPort}/${webapp}/?menu=none&amp;sessionid=null&amp;ifrl=2</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${protocol}://${server}:${tomcatPort}</stringProp>
                  </elementProp>
                  <elementProp name="x-qadcalluid" elementType="Header">
                    <stringProp name="Header.name">x-qadcalluid</stringProp>
                    <stringProp name="Header.value">0f5ad93d-7922-43e5-b52f-29185db4dfbc</stringProp>
                  </elementProp>
                  <elementProp name="DNT" elementType="Header">
                    <stringProp name="Header.name">DNT</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="X-Requested-With" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.84 Safari/537.36</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ExtractFullResponse" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">RequestData</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NotFound</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1.005 5- Release =Yes" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${RequestData}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${server}</stringProp>
              <stringProp name="HTTPSampler.port">${tomcatPort}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/${webapp}/api/erp/CustomerQuoteReleases</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json; charset=UTF-8
				</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${protocol}://${server}:${tomcatPort}
				</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64) 					AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 					Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="DNT" elementType="Header">
                    <stringProp name="Header.name">DNT</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="X-Requested-With" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${protocol}://${server}:${tomcatPort}/${webapp}/
				</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Update JSON using JavaScript" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">var requestData = vars.get(&quot;RequestData&quot;);

//Parse the JSON to get a JavaScript data object
var objRequest = JSON.parse(requestData);
//Update Reqeust data
objRequest.customerQuoteReleases[0].isRecalculateFreight= &quot;true&quot;;
//objRequest.customerHeaderConfirmations[0].isProcessedByBL= &quot;true&quot;;
//objRequest.customerHeaderConfirmations[0].isResponseAffirmative= &quot;false&quot;;
//objRequest.customerHeaderConfirmations[0].isProcessByClient= &quot;false&quot;;
//Convert the data object back to a JSON string 
var strUpdatedRequest = JSON.stringify(objRequest);

//Update ${RequestData} to have the value of the updated JSON
vars.put(&quot;RequestData&quot;, strUpdatedRequest);</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ExtractFullResponse" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">RequestData</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NotFound</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ReleaseOrderNumber1" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">Output_ReleaseOrderNumber1</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.customerQuoteReleases[0].CQLineToReleases[0].originalDocumentNumber</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NotFound</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ReleaseOrderLine1" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">Output_ReleaseOrderLine1</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.customerQuoteReleases[0].CQLineToReleases[0].originalDocumentLine</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NotFound</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ReleaseOrderNumber2" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">Output_ReleaseOrderNumber2</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.customerQuoteReleases[0].CQLineToReleases[1].originalDocumentNumber</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NotFound</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ReleaseOrderLine2" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">Output_ReleaseOrderLine2</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.customerQuoteReleases[0].CQLineToReleases[1].originalDocumentLine</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NotFound</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="449966367">Released to Order ${Output_ReleaseOrderNumber1}.</stringProp>
                  <stringProp name="449967328">Released to Order ${Output_ReleaseOrderNumber2}.</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
                <stringProp name="Scope.variable"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="result" enabled="true">
                <stringProp name="JSON_PATH">submitResult.success</stringProp>
                <stringProp name="EXPECTED_VALUE">true</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="1.006 Verify status updated" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Validate the customer quote just released" enabled="true">
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">vars.put(&quot;customerQuoteHeaderUI_url_quoteNumber&quot;,&quot;${output_customerQuoteHeaderUI_quoteNumber}&quot;);
vars.put(&quot;customerQuoteHeaderUI_url_revision&quot;,&quot;${revision}&quot;);
vars.put(&quot;domainCode&quot;, &quot;${domainCode}&quot;);
//Verify the Billing Panel default data
vars.put(&quot;customerQuoteHeaderUI_validate_totalTrailerCharges&quot;, &quot;600&quot;);
vars.put(&quot;customerQuoteHeaderUI_validate_totalTax&quot;,&quot;53.84&quot;);
</stringProp>
              <stringProp name="scriptLanguage">javascript</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="1.006 - Fetch and validate the customer quote just released" enabled="true">
              <stringProp name="IncludeController.includepath">..\..\TestFragement\CustomerQuote\Fragement_customerQuoteHeaderUI fetch.jmx</stringProp>
            </IncludeController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="1 007 - fetch and verified the depot trailer" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <stringProp name="TestPlan.comments">	</stringProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Fragement_depotOrderHeader fetch" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">vars.put(&quot;domainCode&quot;,&quot;${domainCode}&quot;);
vars.put(&quot;depotOrderHeader_depotOrderNumber&quot;,&quot;${Output_ReleaseOrderNumber2}&quot;);


vars.put(&quot;depotOrderHeader_validate_depotOrderNumber&quot;,&quot;${Output_ReleaseOrderNumber2}&quot;);
vars.put(&quot;depotOrderHeader_validate_serviceQuoteNumber&quot;,&quot;${output_customerQuoteHeaderUI_quoteNumber}&quot;);
vars.put(&quot;depotOrderHeader_validate_assigned&quot;,&quot;10-ENG01&quot;);
vars.put(&quot;depotOrderHeader_validate_endUserCode&quot;,&quot;10c1001&quot;);
vars.put(&quot;depotOrderHeader_validate_statusCode&quot;,&quot;10&quot;);
vars.put(&quot;depotOrderHeader_validate_typeCode&quot;,&quot;DEFECT&quot;);
vars.put(&quot;depotOrderHeader_validate_itemCode&quot;,&quot;01010&quot;);
vars.put(&quot;depotOrderHeader_validate_workCode&quot;,&quot;4003&quot;);
vars.put(&quot;depotOrderHeader_validate_siteCode&quot;,&quot;10-100&quot;);
vars.put(&quot;depotOrderHeader_validate_isTaxable&quot;,&quot;1&quot;);
vars.put(&quot;depotOrderHeader_validate_isConfirmed&quot;,&quot;1&quot;);
//Depot Order has Shipping panel
vars.put(&quot;depotOrderHeader_validate_freightListCode&quot;,&quot;10FRT&quot;);
vars.put(&quot;depotOrderHeader_validate_freightTermsCode&quot;,&quot;ADD&quot;);
//Depot Order has total panel
vars.put(&quot;depotOrderHeader_validate_trailerCode1&quot;,&quot;20&quot;);
vars.put(&quot;depotOrderHeader_validate_trailerCode2&quot;,&quot;11&quot;);
vars.put(&quot;depotOrderHeader_validate_trailerCode3&quot;,&quot;31&quot;);
vars.put(&quot;depotOrderHeader_validate_trailerAmount1&quot;,&quot;9&quot;);
vars.put(&quot;depotOrderHeader_validate_trailerAmount2&quot;,&quot;0&quot;);
vars.put(&quot;depotOrderHeader_validate_trailerAmount3&quot;,&quot;0&quot;);
vars.put(&quot;depotOrderHeader_validate_totalTrailerCharges&quot;,&quot;9&quot;);
//vars.put(&quot;depotOrderHeader_validate_totalTax&quot;,&quot;600&quot;);
//vars.put(&quot;depotOrderHeader_validate_totalAmount&quot;,&quot;600&quot;);
</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Fragement_depotOrderHeader fetch" enabled="true">
              <stringProp name="IncludeController.includepath">../../TestFragement/DepotOrder/Fragement_depotOrderHeader fetch.jmx</stringProp>
            </IncludeController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="1.008 - Fetch and verified the service order -${Output_ReleaseOrderNumber2} released by quote-${output_customerQuoteHeaderUI_quoteNumber}" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="1. 008 -Check so_mstr" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Verify so_mstr" enabled="true">
                <stringProp name="dataSource">JDBC</stringProp>
                <stringProp name="query">SELECT so_nbr,so_ca_nbr,so_po,so_disc_pct,so_to_inv,so_trl1_amt,so_trl1_cd,so_trl2_amt,so_trl2_cd,so_trl3_amt,so_trl3_cd,so_fsm_type FROM pub.so_mstr where so_nbr= ? and so_domain= ? with (nolock)</stringProp>
                <stringProp name="queryArguments">${Output_ReleaseOrderNumber1},${domainCode}</stringProp>
                <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR</stringProp>
                <stringProp name="queryTimeout">10000</stringProp>
                <stringProp name="queryType">Prepared Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as Object</stringProp>
                <stringProp name="resultVariable">result</stringProp>
                <stringProp name="variableNames"></stringProp>
              </JDBCSampler>
              <hashTree>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var failureMessage = &quot;&quot;;
var label = [&apos;so_nbr&apos;,&apos;so_ca_nbr&apos;,&apos;so_po&apos;,&apos;so_disc_pct&apos;,&apos;so_to_inv&apos;,&apos;so_trl1_amt&apos;,&apos;so_trl1_cd&apos;,&apos;so_trl2_amt&apos;,&apos;so_trl2_cd&apos;,&apos;so_trl3_amt&apos;,&apos;so_trl3_cd&apos;,&apos;so_fsm_type&apos;];
var value = [&apos;${Output_ReleaseOrderNumber1}&apos;,&apos;${Output_ReleaseOrderNumber1}&apos;,&apos;PO032-1&apos;,&apos;9.5000000000&apos;,&apos;1&apos;,&apos;0.0000000000&apos;,&apos;20&apos;,&apos;0.0000000000&apos;,&apos;11&apos;,&apos;0.0000000000&apos;,&apos;31&apos;,&apos;FSM-RO&apos;];
len = label.length;
for(var i = 0; i &lt; len; i++){
      var temp = vars.getObject(&quot;result&quot;).get(0).get(label[i]);
	if(temp!= value[i]&amp;&amp;temp!=0E-10)
	failureMessage = failureMessage + &quot;Expect &quot;+label[i]+&quot; = &quot;+ value[i]+&quot; but got &quot;+temp +&quot;\n&quot;;
}

AssertionResult.setFailureMessage(failureMessage);
AssertionResult.setFailure(failureMessage != &quot;&quot;);
</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="S2-Recalculate = No" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="2.002 - Create Customer Quote from scratch- Quote Header" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Set value for create customer quote from scratch" enabled="true">
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">//vars.put(&quot;CreateSrOfromISB_Serial&quot;,&quot;01010-0111-1&quot;);
vars.put(&quot;customerQuoteHeaderUI_soldToCustomerCode&quot;,&quot;${Sold-To}&quot;);
vars.put(&quot;customerQuoteHeaderUI_revision&quot;,&quot;${revision}&quot;);
vars.put(&quot;domainCode&quot;, &quot;${domainCode}&quot;);

vars.put(&quot;customerQuoteHeaderUI_isCombineDocument&quot;,&quot;true&quot;);
vars.put(&quot;customerQuoteHeaderUI_purchaseOrderNumber&quot;,&quot;PO032-2&quot;);
//vars.put(&quot;customerQuoteHeaderUI_freightTermsCode&quot;,&quot;${FreightTerm}&quot;);
//vars.put(&quot;customerQuoteHeaderUI_freightListCode&quot;,&quot;${FreightList}&quot;);</stringProp>
              <stringProp name="scriptLanguage">javascript</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="2.002 - Create Customer Quote Header-001-Create" enabled="true">
              <stringProp name="IncludeController.includepath">..\..\TestFragement\CustomerQuote\Fragement_CreateCustomerQuoteHeader.jmx</stringProp>
            </IncludeController>
            <hashTree/>
          </hashTree>
          <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="2.003 - Create Customer Quote Header and line" enabled="true">
            <boolProp name="LoopController.continue_forever">true</boolProp>
            <stringProp name="LoopController.loops">2</stringProp>
          </LoopController>
          <hashTree>
            <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set" enabled="true">
              <stringProp name="filename">../../FunctionTestScript/CustomerQuote/CSV/JFT_CustomerQuote_032_Customer Quote from scratch - Trailer Difference-Service and Depot Type line.csv</stringProp>
              <stringProp name="fileEncoding"></stringProp>
              <stringProp name="variableNames"></stringProp>
              <boolProp name="ignoreFirstLine">false</boolProp>
              <stringProp name="delimiter">,</stringProp>
              <boolProp name="quotedData">false</boolProp>
              <boolProp name="recycle">true</boolProp>
              <boolProp name="stopThread">false</boolProp>
              <stringProp name="shareMode">shareMode.thread</stringProp>
            </CSVDataSet>
            <hashTree/>
            <CounterConfig guiclass="CounterConfigGui" testclass="CounterConfig" testname="Counter" enabled="true">
              <stringProp name="CounterConfig.start">1</stringProp>
              <stringProp name="CounterConfig.end"></stringProp>
              <stringProp name="CounterConfig.incr">1</stringProp>
              <stringProp name="CounterConfig.name">Counter</stringProp>
              <stringProp name="CounterConfig.format"></stringProp>
              <boolProp name="CounterConfig.per_user">false</boolProp>
            </CounterConfig>
            <hashTree/>
            <IfController guiclass="IfControllerPanel" testclass="IfController" testname="Create Customer Quote Line ${QuoteCount}" enabled="true">
              <stringProp name="IfController.condition">${__jexl3(&quot;${QuoteLine}&quot; != &quot;&quot;)}</stringProp>
              <boolProp name="IfController.evaluateAll">false</boolProp>
              <boolProp name="IfController.useExpression">true</boolProp>
            </IfController>
            <hashTree>
              <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="2.003- 1-Create ${QuoteType} type quote line" enabled="true">
                <boolProp name="TransactionController.includeTimers">false</boolProp>
                <boolProp name="TransactionController.parent">true</boolProp>
              </TransactionController>
              <hashTree>
                <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Set Up Data" enabled="true">
                  <stringProp name="scriptLanguage">groovy</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">//if (&quot;${QuoteType}&quot;==&quot;Service&quot;)
//{vars.put(&quot;QuoteType&quot;,&quot;1&quot;);}
//else {vars.put(&quot;QuoteType&quot;,&quot;0&quot;);}

vars.put(&quot;customerQuoteLine_domainCode&quot;,&quot;${domainCode}&quot;);//Manadatory}
vars.put(&quot;customerQuoteLine_quoteNumber&quot;,&quot;${output_customerQuoteHeaderUI_quoteNumber}&quot;);//Mandatory}
vars.put(&quot;customerQuoteLine_revision&quot;,&quot;${revision}&quot;);//Madatory
if(&quot;${QuoteType}&quot;!=&quot;&quot;){
vars.put(&quot;customerQuoteLine_referenceType&quot;,&quot;${__if(&quot;${QuoteType}&quot;,&quot;Service&quot;,1,0,)}&quot;);
}
if(&quot;${RepairType}&quot;!=&quot;&quot;){
vars.put(&quot;customerQuoteLine_itemRepairTypeDisplayValue&quot;,&quot;${RepairType}&quot;);}
if(&quot;${EndUser}&quot;!=&quot;&quot;){
vars.put(&quot;customerQuoteLine_endUserCode&quot;, &quot;${EndUser}&quot;);}
if(&quot;${Engineer}&quot;!=&quot;&quot;){
vars.put(&quot;customerQuoteLine_engineerCode&quot;, &quot;${Engineer}&quot;);}
if(&quot;${WorkCode}&quot;!=&quot;&quot;){
vars.put(&quot;customerQuoteLine_workCode&quot;,&quot;${WorkCode}&quot;);}//Fixed}
if(&quot;${itemCode}&quot;!=&quot;&quot;){
vars.put(&quot;customerQuoteLine_itemCode&quot;,&quot;${itemCode}&quot;);}
if(&quot;${LotSerial}&quot;!=&quot;&quot;){
vars.put(&quot;customerQuoteLine_lotSerial&quot;,&quot;${LotSerial}&quot;);}
if(&quot;${QuantityQuoted}&quot;!=&quot;&quot;){
vars.put(&quot;customerQuoteLine_quantityQuoted&quot;,&quot;${QuantityQuoted}&quot;);}
if(&quot;${LineSite}&quot;!=&quot;&quot;){
vars.put(&quot;customerQuoteLine_siteCode&quot;,&quot;${LineSite}&quot;);}
if(&quot;${FreightWeight}&quot;!=&quot;&quot;){
vars.put(&quot;customerQuoteLine_freightWeight&quot;,&quot;${FreightWeight}&quot;);}
if(&quot;${FreightClass}&quot;!=&quot;&quot;){
vars.put(&quot;customerQuoteLine_freightClass&quot;,&quot;${FreightClass}&quot;);}


</stringProp>
                </JSR223Sampler>
                <hashTree/>
                <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Create Quote Line" enabled="true">
                  <stringProp name="IncludeController.includepath">..\..\TestFragement\CustomerQuote\Fragement_CreateCustomerQuoteLine_ServiceOrDeporRepairType.jmx</stringProp>
                </IncludeController>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="2.004 -Go to Customer Quote Header and save" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="2.004-1- CustomerQuoteHeader Fetch" enabled="true">
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="domainCode" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">domainCode</stringProp>
                    <stringProp name="Argument.value">${domainCode}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="quoteNumber" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.name">quoteNumber</stringProp>
                    <stringProp name="Argument.value">${output_customerQuoteHeaderUI_quoteNumber}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                  </elementProp>
                  <elementProp name="revision" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${revision}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                    <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    <stringProp name="Argument.name">revision</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${server}</stringProp>
              <stringProp name="HTTPSampler.port">${tomcatPort}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/${webapp}/api/erp/customerQuoteHeaders</stringProp>
              <stringProp name="HTTPSampler.method">GET</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json; charset=UTF-8
				</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${protocol}://${server}:${tomcatPort}
				</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64)
					AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87
					Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="DNT" elementType="Header">
                    <stringProp name="Header.name">DNT</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="X-Requested-With" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${protocol}://${server}:${tomcatPort}/${webapp}/
				</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Verify header trailer code" enabled="true">
                <stringProp name="JSON_PATH">$.data.customerQuoteHeaderUIs[0].trailerCode1</stringProp>
                <stringProp name="EXPECTED_VALUE">20</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="trailerAmount validation" enabled="true">
                <stringProp name="JSON_PATH">$.data.customerQuoteHeaderUIs[0].trailerAmount1</stringProp>
                <stringProp name="EXPECTED_VALUE">0</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="TrailerCharge" enabled="true">
                <stringProp name="JSON_PATH">$.data.customerQuoteHeaderUIs[0].totalTrailerCharges</stringProp>
                <stringProp name="EXPECTED_VALUE">0</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ExtractFullResponse" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">RequestData</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NotFound</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="2.004-2-Post Customer Quote Header" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="customerQuoteHeader save" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${RequestData}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${server}</stringProp>
                <stringProp name="HTTPSampler.port">${tomcatPort}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">/${webapp}/api/erp/customerQuoteHeaders?domainCode=${domainCode}&amp;quoteNumber=${output_customerQuoteHeaderUI_quoteNumber}&amp;revision=${revision}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json; charset=UTF-8
				</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="Origin" elementType="Header">
                      <stringProp name="Header.name">Origin</stringProp>
                      <stringProp name="Header.value">${protocol}://${server}:${tomcatPort}
				</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64)
					AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87
					Safari/537.36</stringProp>
                    </elementProp>
                    <elementProp name="DNT" elementType="Header">
                      <stringProp name="Header.name">DNT</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="X-Requested-With" elementType="Header">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${protocol}://${server}:${tomcatPort}/${webapp}/
				</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Update JSON using JavaScript" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var requestData = vars.get(&quot;RequestData&quot;);

//Parse the JSON to get a JavaScript data object
var objRequest = JSON.parse(requestData);
//Update Reqeust data
objRequest.customerQuoteHeaderUIs[0].isProcessQuoteSummary=&quot;true&quot;;
objRequest.customerQuoteHeaderUIs[0].isProcessPostTrailer=&quot;true&quot;;
//Convert the data object back to a JSON string 
var strUpdatedRequest = JSON.stringify(objRequest);
//Update ${RequestData} to have the value of the updated JSON
vars.put(&quot;RequestData&quot;, strUpdatedRequest);</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="lineTotal" enabled="false">
                  <stringProp name="JSON_PATH">$.data.customerQuoteHeaderUIs[0].lineTotal</stringProp>
                  <stringProp name="EXPECTED_VALUE">735</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                  <stringProp name="TestPlan.comments">			</stringProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="total Trailer Charge" enabled="false">
                  <stringProp name="JSON_PATH">$.data.customerQuoteHeaderUIs[0].totalTrailerCharges</stringProp>
                  <stringProp name="EXPECTED_VALUE">8</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="totalAmount" enabled="false">
                  <stringProp name="JSON_PATH">$.data.customerQuoteHeaderUIs[0].totalAmount</stringProp>
                  <stringProp name="EXPECTED_VALUE">12311</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="totalTax" enabled="false">
                  <stringProp name="JSON_PATH">$.data.customerQuoteHeaderUIs[0].totalTax</stringProp>
                  <stringProp name="EXPECTED_VALUE">0</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="result" enabled="true">
                  <stringProp name="JSON_PATH">submitResult.success</stringProp>
                  <stringProp name="EXPECTED_VALUE">true</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="2.004-3- Fetch quote header" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1.003- 3- Fetch quote header" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="domainCode" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">domainCode</stringProp>
                      <stringProp name="Argument.value">${domainCode}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="quoteNumber" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">quoteNumber</stringProp>
                      <stringProp name="Argument.value">${output_customerQuoteHeaderUI_quoteNumber}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="revision" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${revision}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">revision</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${server}</stringProp>
                <stringProp name="HTTPSampler.port">${tomcatPort}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">/${webapp}/api/erp/customerQuoteHeaders</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json; charset=UTF-8
				</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="Origin" elementType="Header">
                      <stringProp name="Header.name">Origin</stringProp>
                      <stringProp name="Header.value">${protocol}://${server}:${tomcatPort}
				</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64)
					AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87
					Safari/537.36</stringProp>
                    </elementProp>
                    <elementProp name="DNT" elementType="Header">
                      <stringProp name="Header.name">DNT</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="X-Requested-With" elementType="Header">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${protocol}://${server}:${tomcatPort}/${webapp}/
				</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ExtractFullResponse" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">RequestData</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NotFound</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="2.004-4-Post Customer Quote Header" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="customerQuoteHeader save" enabled="true">
                <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${RequestData}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${server}</stringProp>
                <stringProp name="HTTPSampler.port">${tomcatPort}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">/${webapp}/api/erp/customerQuoteHeaders?domainCode=${domainCode}&amp;quoteNumber=${output_customerQuoteHeaderUI_quoteNumber}&amp;revision=${revision}</stringProp>
                <stringProp name="HTTPSampler.method">POST</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Update JSON using JavaScript" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var requestData = vars.get(&quot;RequestData&quot;);
var objRequest = JSON.parse(requestData);
objRequest.customerQuoteHeaderUIs[0].trailerAmount1=&quot;100&quot;
objRequest.customerQuoteHeaderUIs[0].trailerAmount2=&quot;200&quot;
objRequest.customerQuoteHeaderUIs[0].trailerAmount3=&quot;300&quot;
objRequest.customerQuoteHeaderUIs[0].isCalculateFreight= &quot;false&quot;;
objRequest.customerQuoteHeaderUIs[0].isProcessQuoteSummary=&quot;true&quot;;
var strUpdatedRequest = JSON.stringify(objRequest);
vars.put(&quot;RequestData&quot;, strUpdatedRequest);
</stringProp>
                </JSR223PreProcessor>
                <hashTree/>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json; charset=UTF-8
				</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="Origin" elementType="Header">
                      <stringProp name="Header.name">Origin</stringProp>
                      <stringProp name="Header.value">${protocol}://${server}:${tomcatPort}
				</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64)
					AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87
					Safari/537.36</stringProp>
                    </elementProp>
                    <elementProp name="DNT" elementType="Header">
                      <stringProp name="Header.name">DNT</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="X-Requested-With" elementType="Header">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${protocol}://${server}:${tomcatPort}/${webapp}/
				</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ExtractFullResponse" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">RequestData</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NotFound</stringProp>
                </JSONPostProcessor>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="total Trailer Charge" enabled="true">
                  <stringProp name="JSON_PATH">$.data.customerQuoteHeaderUIs[0].totalTrailerCharges</stringProp>
                  <stringProp name="EXPECTED_VALUE">600</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="totalAmount" enabled="false">
                  <stringProp name="JSON_PATH">$.data.customerQuoteHeaderUIs[0].totalAmount</stringProp>
                  <stringProp name="EXPECTED_VALUE"></stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="totalTax" enabled="false">
                  <stringProp name="JSON_PATH">$.data.customerQuoteHeaderUIs[0].totalTax</stringProp>
                  <stringProp name="EXPECTED_VALUE">0</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
                <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="result" enabled="true">
                  <stringProp name="JSON_PATH">submitResult.success</stringProp>
                  <stringProp name="EXPECTED_VALUE">true</stringProp>
                  <boolProp name="JSONVALIDATION">true</boolProp>
                  <boolProp name="EXPECT_NULL">false</boolProp>
                  <boolProp name="INVERT">false</boolProp>
                  <boolProp name="ISREGEX">false</boolProp>
                </JSONPathAssertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="2.005 - Click Release AND Check" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="2.005- 1- Customer Quote Release Check" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${RequestData}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${server}</stringProp>
              <stringProp name="HTTPSampler.port">${tomcatPort}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/${webapp}/api/erp/customerQuoteHeaders/releasePrecheck?domainCode=${domainCode}&amp;quoteNumber=${output_customerQuoteHeaderUI_quoteNumber}&amp;revision=${revision}</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json; charset=UTF-8
				</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${protocol}://${server}:${tomcatPort}
				</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64)
					AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87
					Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="DNT" elementType="Header">
                    <stringProp name="Header.name">DNT</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="X-Requested-With" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${protocol}://${server}:${tomcatPort}/${webapp}/
				</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ExtractFullResponse" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">RequestData</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NotFound</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="isValidForRelease" enabled="true">
                <stringProp name="JSON_PATH">$.isValidForRelease</stringProp>
                <stringProp name="EXPECTED_VALUE">true</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
            </hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="2.005- 2- Quote Release" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <stringProp name="TestPlan.comments">	</stringProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1.006 -2- CustomerQuoteHeader Fetch" enabled="true">
                <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
                  <collectionProp name="Arguments.arguments">
                    <elementProp name="domainCode" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">domainCode</stringProp>
                      <stringProp name="Argument.value">${domainCode}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="quoteNumber" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.name">quoteNumber</stringProp>
                      <stringProp name="Argument.value">${output_customerQuoteHeaderUI_quoteNumber}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                    </elementProp>
                    <elementProp name="revision" elementType="HTTPArgument">
                      <boolProp name="HTTPArgument.always_encode">false</boolProp>
                      <stringProp name="Argument.value">${revision}</stringProp>
                      <stringProp name="Argument.metadata">=</stringProp>
                      <boolProp name="HTTPArgument.use_equals">true</boolProp>
                      <stringProp name="Argument.name">revision</stringProp>
                    </elementProp>
                  </collectionProp>
                </elementProp>
                <stringProp name="HTTPSampler.domain">${server}</stringProp>
                <stringProp name="HTTPSampler.port">${tomcatPort}</stringProp>
                <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
                <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
                <stringProp name="HTTPSampler.path">/${webapp}/api/erp/CustomerQuoteReleases</stringProp>
                <stringProp name="HTTPSampler.method">GET</stringProp>
                <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
                <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
                <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
                <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
                <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
                <stringProp name="HTTPSampler.connect_timeout"></stringProp>
                <stringProp name="HTTPSampler.response_timeout"></stringProp>
              </HTTPSamplerProxy>
              <hashTree>
                <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                  <collectionProp name="HeaderManager.headers">
                    <elementProp name="Content-Type" elementType="Header">
                      <stringProp name="Header.name">Content-Type</stringProp>
                      <stringProp name="Header.value">application/json; charset=UTF-8
				</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Language" elementType="Header">
                      <stringProp name="Header.name">Accept-Language</stringProp>
                      <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                    </elementProp>
                    <elementProp name="Accept" elementType="Header">
                      <stringProp name="Header.name">Accept</stringProp>
                      <stringProp name="Header.value">*/*</stringProp>
                    </elementProp>
                    <elementProp name="Origin" elementType="Header">
                      <stringProp name="Header.name">Origin</stringProp>
                      <stringProp name="Header.value">${protocol}://${server}:${tomcatPort}
				</stringProp>
                    </elementProp>
                    <elementProp name="User-Agent" elementType="Header">
                      <stringProp name="Header.name">User-Agent</stringProp>
                      <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64)
					AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87
					Safari/537.36</stringProp>
                    </elementProp>
                    <elementProp name="DNT" elementType="Header">
                      <stringProp name="Header.name">DNT</stringProp>
                      <stringProp name="Header.value">1</stringProp>
                    </elementProp>
                    <elementProp name="X-Requested-With" elementType="Header">
                      <stringProp name="Header.name">X-Requested-With</stringProp>
                      <stringProp name="Header.value">XMLHttpRequest</stringProp>
                    </elementProp>
                    <elementProp name="Referer" elementType="Header">
                      <stringProp name="Header.name">Referer</stringProp>
                      <stringProp name="Header.value">${protocol}://${server}:${tomcatPort}/${webapp}/
				</stringProp>
                    </elementProp>
                    <elementProp name="Accept-Encoding" elementType="Header">
                      <stringProp name="Header.name">Accept-Encoding</stringProp>
                      <stringProp name="Header.value">gzip, deflate</stringProp>
                    </elementProp>
                  </collectionProp>
                </HeaderManager>
                <hashTree/>
                <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ExtractFullResponse" enabled="true">
                  <stringProp name="JSONPostProcessor.referenceNames">RequestData</stringProp>
                  <stringProp name="JSONPostProcessor.jsonPathExprs">$.data</stringProp>
                  <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                  <stringProp name="JSONPostProcessor.defaultValues">NotFound</stringProp>
                </JSONPostProcessor>
                <hashTree/>
              </hashTree>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="1.005 -3- Input Engineer" enabled="false">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${RequestData}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${server}</stringProp>
              <stringProp name="HTTPSampler.port">${tomcatPort}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding"></stringProp>
              <stringProp name="HTTPSampler.path">/${webapp}/api/erp/customerQuoteReleases/fieldChange?fieldName=engineerCode</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${protocol}://${server}:${tomcatPort}/${webapp}/?menu=none&amp;sessionid=null&amp;ifrl=2</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.9</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${protocol}://${server}:${tomcatPort}</stringProp>
                  </elementProp>
                  <elementProp name="x-qadcalluid" elementType="Header">
                    <stringProp name="Header.name">x-qadcalluid</stringProp>
                    <stringProp name="Header.value">0f5ad93d-7922-43e5-b52f-29185db4dfbc</stringProp>
                  </elementProp>
                  <elementProp name="DNT" elementType="Header">
                    <stringProp name="Header.name">DNT</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                  </elementProp>
                  <elementProp name="X-Requested-With" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/68.0.3440.84 Safari/537.36</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ExtractFullResponse" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">RequestData</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NotFound</stringProp>
              </JSONPostProcessor>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="2.005 -3- Release-Rlease No and get confirmation" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${RequestData}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${server}</stringProp>
              <stringProp name="HTTPSampler.port">${tomcatPort}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/${webapp}/api/erp/CustomerQuoteReleases</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json; charset=UTF-8
				</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${protocol}://${server}:${tomcatPort}
				</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64) 					AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 					Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="DNT" elementType="Header">
                    <stringProp name="Header.name">DNT</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="X-Requested-With" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${protocol}://${server}:${tomcatPort}/${webapp}/
				</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Update JSON using JavaScript" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">var requestData = vars.get(&quot;RequestData&quot;);

//Parse the JSON to get a JavaScript data object
var objRequest = JSON.parse(requestData);
//Update Reqeust data
objRequest.customerQuoteReleases[0].isRecalculateFreight= &quot;false&quot;;
//objRequest.customerQuoteReleases[0].engineerCode= &quot;10-eng01&quot;;
//Convert the data object back to a JSON string 
var strUpdatedRequest = JSON.stringify(objRequest);

//Update ${RequestData} to have the value of the updated JSON
vars.put(&quot;RequestData&quot;, strUpdatedRequest);</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ExtractFullResponse" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">RequestData</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NotFound</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ExtractFullResponse" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">customerQuoteHeaderConf</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.customerQuoteHeaderConfirmations[0]</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NotFound</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Confirmation VERIFY" enabled="true">
                <stringProp name="JSON_PATH">$.data.customerQuoteHeaderConfirmations[0].messageText</stringProp>
                <stringProp name="EXPECTED_VALUE">Calculated Trailer Amount was overridden. You must manually specify on the released order(s). Continue?</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">false</boolProp>
              </JSONPathAssertion>
              <hashTree/>
            </hashTree>
            <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="2.005 -4- Release" enabled="true">
              <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
              <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
                <collectionProp name="Arguments.arguments">
                  <elementProp name="" elementType="HTTPArgument">
                    <boolProp name="HTTPArgument.always_encode">false</boolProp>
                    <stringProp name="Argument.value">${RequestData}</stringProp>
                    <stringProp name="Argument.metadata">=</stringProp>
                  </elementProp>
                </collectionProp>
              </elementProp>
              <stringProp name="HTTPSampler.domain">${server}</stringProp>
              <stringProp name="HTTPSampler.port">${tomcatPort}</stringProp>
              <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
              <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
              <stringProp name="HTTPSampler.path">/${webapp}/api/erp/CustomerQuoteReleases</stringProp>
              <stringProp name="HTTPSampler.method">POST</stringProp>
              <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
              <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
              <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
              <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
              <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
              <stringProp name="HTTPSampler.connect_timeout"></stringProp>
              <stringProp name="HTTPSampler.response_timeout"></stringProp>
            </HTTPSamplerProxy>
            <hashTree>
              <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
                <collectionProp name="HeaderManager.headers">
                  <elementProp name="Content-Type" elementType="Header">
                    <stringProp name="Header.name">Content-Type</stringProp>
                    <stringProp name="Header.value">application/json; charset=UTF-8
				</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Language" elementType="Header">
                    <stringProp name="Header.name">Accept-Language</stringProp>
                    <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                  </elementProp>
                  <elementProp name="Accept" elementType="Header">
                    <stringProp name="Header.name">Accept</stringProp>
                    <stringProp name="Header.value">*/*</stringProp>
                  </elementProp>
                  <elementProp name="Origin" elementType="Header">
                    <stringProp name="Header.name">Origin</stringProp>
                    <stringProp name="Header.value">${protocol}://${server}:${tomcatPort}
				</stringProp>
                  </elementProp>
                  <elementProp name="User-Agent" elementType="Header">
                    <stringProp name="Header.name">User-Agent</stringProp>
                    <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64) 					AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 					Safari/537.36</stringProp>
                  </elementProp>
                  <elementProp name="DNT" elementType="Header">
                    <stringProp name="Header.name">DNT</stringProp>
                    <stringProp name="Header.value">1</stringProp>
                  </elementProp>
                  <elementProp name="X-Requested-With" elementType="Header">
                    <stringProp name="Header.name">X-Requested-With</stringProp>
                    <stringProp name="Header.value">XMLHttpRequest</stringProp>
                  </elementProp>
                  <elementProp name="Referer" elementType="Header">
                    <stringProp name="Header.name">Referer</stringProp>
                    <stringProp name="Header.value">${protocol}://${server}:${tomcatPort}/${webapp}/
				</stringProp>
                  </elementProp>
                  <elementProp name="Accept-Encoding" elementType="Header">
                    <stringProp name="Header.name">Accept-Encoding</stringProp>
                    <stringProp name="Header.value">gzip, deflate</stringProp>
                  </elementProp>
                </collectionProp>
              </HeaderManager>
              <hashTree/>
              <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Update JSON using JavaScript" enabled="true">
                <stringProp name="scriptLanguage">javascript</stringProp>
                <stringProp name="parameters"></stringProp>
                <stringProp name="filename"></stringProp>
                <stringProp name="cacheKey">false</stringProp>
                <stringProp name="script">var requestData = vars.get(&quot;RequestData&quot;);

//Parse the JSON to get a JavaScript data object
var objRequest = JSON.parse(requestData);
//Update Reqeust data
objRequest.customerQuoteReleases[0].isRecalculateFreight= &quot;false&quot;;
//objRequest.customerQuoteReleases[0].engineerCode= &quot;10-eng01&quot;;
//Convert the data object back to a JSON string 
objRequest.customerQuoteHeaderConfirmations[0].isProcessedByBL= &quot;false&quot;;
objRequest.customerQuoteHeaderConfirmations[0].isResponseAffirmative= &quot;false&quot;;
objRequest.customerQuoteHeaderConfirmations[0].isProcessedByClient= &quot;true&quot;;
//objRequest.customerQuoteConf.isProcessedByBL= &quot;false&quot;;
//objRequest.customerQuoteConf.isResponseAffirmative= &quot;false&quot;;
//objRequest.customerQuoteConf.isProcessByClient= &quot;true&quot;;
var strUpdatedRequest = JSON.stringify(objRequest);

//Update ${RequestData} to have the value of the updated JSON
vars.put(&quot;RequestData&quot;, strUpdatedRequest);</stringProp>
              </JSR223PreProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ReleaseOrderNumber1" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">Output_ReleaseOrderNumber1</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.customerQuoteReleases[0].CQLineToReleases[0].originalDocumentNumber</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NotFound</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ReleaseOrderLine1" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">Output_ReleaseOrderLine1</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.customerQuoteReleases[0].CQLineToReleases[0].originalDocumentLine</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NotFound</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ReleaseOrderNumber2" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">Output_ReleaseOrderNumber2</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.customerQuoteReleases[0].CQLineToReleases[1].originalDocumentNumber</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NotFound</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ReleaseOrderLine2" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">Output_ReleaseOrderLine2</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.customerQuoteReleases[0].CQLineToReleases[1].originalDocumentLine</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers"></stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NotFound</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ExtractFullResponse" enabled="true">
                <stringProp name="JSONPostProcessor.referenceNames">RequestData</stringProp>
                <stringProp name="JSONPostProcessor.jsonPathExprs">$.data</stringProp>
                <stringProp name="JSONPostProcessor.match_numbers">0</stringProp>
                <stringProp name="JSONPostProcessor.defaultValues">NotFound</stringProp>
              </JSONPostProcessor>
              <hashTree/>
              <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                <collectionProp name="Asserion.test_strings">
                  <stringProp name="449966367">Released to Order ${Output_ReleaseOrderNumber1}.</stringProp>
                  <stringProp name="449967328">Released to Order ${Output_ReleaseOrderNumber2}.</stringProp>
                </collectionProp>
                <stringProp name="Assertion.custom_message"></stringProp>
                <stringProp name="Assertion.test_field">Assertion.response_data</stringProp>
                <boolProp name="Assertion.assume_success">false</boolProp>
                <intProp name="Assertion.test_type">16</intProp>
                <stringProp name="Assertion.scope">all</stringProp>
                <stringProp name="Scope.variable"></stringProp>
              </ResponseAssertion>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="Warning after recalculation" enabled="true">
                <stringProp name="JSON_PATH">submitResult.errors[0].message</stringProp>
                <stringProp name="EXPECTED_VALUE">Trailer amount must be manually entered on the order(s).</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">false</boolProp>
              </JSONPathAssertion>
              <hashTree/>
              <JSONPathAssertion guiclass="JSONPathAssertionGui" testclass="JSONPathAssertion" testname="result" enabled="true">
                <stringProp name="JSON_PATH">submitResult.success</stringProp>
                <stringProp name="EXPECTED_VALUE">true</stringProp>
                <boolProp name="JSONVALIDATION">true</boolProp>
                <boolProp name="EXPECT_NULL">false</boolProp>
                <boolProp name="INVERT">false</boolProp>
                <boolProp name="ISREGEX">true</boolProp>
              </JSONPathAssertion>
              <hashTree/>
            </hashTree>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="2.006 Verify status updated" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Validate the customer quote just released" enabled="true">
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="script">vars.put(&quot;customerQuoteHeaderUI_url_quoteNumber&quot;,&quot;${output_customerQuoteHeaderUI_quoteNumber}&quot;);
vars.put(&quot;customerQuoteHeaderUI_url_revision&quot;,&quot;${revision}&quot;);
vars.put(&quot;domainCode&quot;, &quot;${domainCode}&quot;);
//Verify the Billing Panel default data
vars.put(&quot;customerQuoteHeaderUI_validate_totalTrailerCharges&quot;, &quot;600&quot;);
vars.put(&quot;customerQuoteHeaderUI_validate_totalTax&quot;,&quot;53.84&quot;);
</stringProp>
              <stringProp name="scriptLanguage">javascript</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="1.006 - Fetch and validate the customer quote just released" enabled="true">
              <stringProp name="IncludeController.includepath">..\..\TestFragement\CustomerQuote\Fragement_customerQuoteHeaderUI fetch.jmx</stringProp>
            </IncludeController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="2 007 - fetch and verified the depot trailer" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <stringProp name="TestPlan.comments">	</stringProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="Fragement_depotOrderHeader fetch" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">vars.put(&quot;domainCode&quot;,&quot;${domainCode}&quot;);
vars.put(&quot;depotOrderHeader_depotOrderNumber&quot;,&quot;${Output_ReleaseOrderNumber2}&quot;);


vars.put(&quot;depotOrderHeader_validate_depotOrderNumber&quot;,&quot;${Output_ReleaseOrderNumber2}&quot;);
vars.put(&quot;depotOrderHeader_validate_serviceQuoteNumber&quot;,&quot;${output_customerQuoteHeaderUI_quoteNumber}&quot;);
vars.put(&quot;depotOrderHeader_validate_assigned&quot;,&quot;10-ENG01&quot;);
vars.put(&quot;depotOrderHeader_validate_endUserCode&quot;,&quot;10c1001&quot;);
vars.put(&quot;depotOrderHeader_validate_statusCode&quot;,&quot;10&quot;);
vars.put(&quot;depotOrderHeader_validate_typeCode&quot;,&quot;DEFECT&quot;);
vars.put(&quot;depotOrderHeader_validate_itemCode&quot;,&quot;01010&quot;);
vars.put(&quot;depotOrderHeader_validate_workCode&quot;,&quot;4003&quot;);
vars.put(&quot;depotOrderHeader_validate_siteCode&quot;,&quot;10-100&quot;);
vars.put(&quot;depotOrderHeader_validate_isTaxable&quot;,&quot;1&quot;);
vars.put(&quot;depotOrderHeader_validate_isConfirmed&quot;,&quot;1&quot;);
//Depot Order has Shipping panel
vars.put(&quot;depotOrderHeader_validate_freightListCode&quot;,&quot;10FRT&quot;);
vars.put(&quot;depotOrderHeader_validate_freightTermsCode&quot;,&quot;ADD&quot;);
//Depot Order has total panel
vars.put(&quot;depotOrderHeader_validate_trailerCode1&quot;,&quot;20&quot;);
vars.put(&quot;depotOrderHeader_validate_trailerCode2&quot;,&quot;11&quot;);
vars.put(&quot;depotOrderHeader_validate_trailerCode3&quot;,&quot;31&quot;);
vars.put(&quot;depotOrderHeader_validate_trailerAmount1&quot;,&quot;0&quot;);
vars.put(&quot;depotOrderHeader_validate_trailerAmount2&quot;,&quot;0&quot;);
vars.put(&quot;depotOrderHeader_validate_trailerAmount3&quot;,&quot;0&quot;);
vars.put(&quot;depotOrderHeader_validate_totalTrailerCharges&quot;,&quot;0&quot;);
//vars.put(&quot;depotOrderHeader_validate_totalTax&quot;,&quot;600&quot;);
//vars.put(&quot;depotOrderHeader_validate_totalAmount&quot;,&quot;600&quot;);
</stringProp>
            </JSR223Sampler>
            <hashTree/>
            <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Fragement_depotOrderHeader fetch" enabled="true">
              <stringProp name="IncludeController.includepath">../../TestFragement/DepotOrder/Fragement_depotOrderHeader fetch.jmx</stringProp>
            </IncludeController>
            <hashTree/>
          </hashTree>
          <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="2.008 - Fetch and verified the service order -${Output_ReleaseOrderNumber2} released by quote-${output_customerQuoteHeaderUI_quoteNumber}" enabled="true">
            <boolProp name="TransactionController.includeTimers">false</boolProp>
            <boolProp name="TransactionController.parent">true</boolProp>
          </TransactionController>
          <hashTree>
            <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="1. 008 -Check so_mstr" enabled="true">
              <boolProp name="TransactionController.includeTimers">false</boolProp>
              <boolProp name="TransactionController.parent">true</boolProp>
            </TransactionController>
            <hashTree>
              <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="Verify so_mstr" enabled="true">
                <stringProp name="dataSource">JDBC</stringProp>
                <stringProp name="query">SELECT so_nbr,so_ca_nbr,so_po,so_disc_pct,so_to_inv,so_trl1_amt,so_trl1_cd,so_trl2_amt,so_trl2_cd,so_trl3_amt,so_trl3_cd,so_fsm_type FROM pub.so_mstr where so_nbr= ? and so_domain= ? with (nolock)</stringProp>
                <stringProp name="queryArguments">${Output_ReleaseOrderNumber1},${domainCode}</stringProp>
                <stringProp name="queryArgumentsTypes">VARCHAR,VARCHAR</stringProp>
                <stringProp name="queryTimeout">10000</stringProp>
                <stringProp name="queryType">Prepared Select Statement</stringProp>
                <stringProp name="resultSetHandler">Store as Object</stringProp>
                <stringProp name="resultVariable">result</stringProp>
                <stringProp name="variableNames"></stringProp>
              </JDBCSampler>
              <hashTree>
                <JSR223Assertion guiclass="TestBeanGUI" testclass="JSR223Assertion" testname="JSR223 Assertion" enabled="true">
                  <stringProp name="scriptLanguage">javascript</stringProp>
                  <stringProp name="parameters"></stringProp>
                  <stringProp name="filename"></stringProp>
                  <stringProp name="cacheKey">false</stringProp>
                  <stringProp name="script">var failureMessage = &quot;&quot;;
var label = [&apos;so_nbr&apos;,&apos;so_ca_nbr&apos;,&apos;so_po&apos;,&apos;so_disc_pct&apos;,&apos;so_to_inv&apos;,&apos;so_trl1_amt&apos;,&apos;so_trl1_cd&apos;,&apos;so_trl2_amt&apos;,&apos;so_trl2_cd&apos;,&apos;so_trl3_amt&apos;,&apos;so_trl3_cd&apos;,&apos;so_fsm_type&apos;];
var value = [&apos;${Output_ReleaseOrderNumber1}&apos;,&apos;${Output_ReleaseOrderNumber1}&apos;,&apos;PO032-2&apos;,&apos;9.5000000000&apos;,&apos;1&apos;,&apos;0.0000000000&apos;,&apos;20&apos;,&apos;0.0000000000&apos;,&apos;11&apos;,&apos;0.0000000000&apos;,&apos;31&apos;,&apos;FSM-RO&apos;];
len = label.length;
for(var i = 0; i &lt; len; i++){
      var temp = vars.getObject(&quot;result&quot;).get(0).get(label[i]);
	if(temp!= value[i]&amp;&amp;temp!=0E-10)
	failureMessage = failureMessage + &quot;Expect &quot;+label[i]+&quot; = &quot;+ value[i]+&quot; but got &quot;+temp +&quot;\n&quot;;
}

AssertionResult.setFailureMessage(failureMessage);
AssertionResult.setFailure(failureMessage != &quot;&quot;);
//&amp;&amp;temp!=0E-10</stringProp>
                </JSR223Assertion>
                <hashTree/>
              </hashTree>
            </hashTree>
          </hashTree>
        </hashTree>
        <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname=" Web UI - LogOut" enabled="true">
          <stringProp name="IncludeController.includepath">../../TestFragement/Common/Logout Fragment.jmx</stringProp>
        </IncludeController>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
