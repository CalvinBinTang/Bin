<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="3.2" jmeter="3.3.20180111">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test Plan" enabled="true">
      <stringProp name="TestPlan.comments"></stringProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
      <stringProp name="TestPlan.user_define_classpath"></stringProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="JFT_DepotOrder_013_ReadOnly_Field_Manual run" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">1</stringProp>
        </elementProp>
        <stringProp name="ThreadGroup.num_threads">1</stringProp>
        <stringProp name="ThreadGroup.ramp_time">1</stringProp>
        <longProp name="ThreadGroup.start_time">1479226785000</longProp>
        <longProp name="ThreadGroup.end_time">1479226785000</longProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <stringProp name="ThreadGroup.duration"></stringProp>
        <stringProp name="ThreadGroup.delay"></stringProp>
      </ThreadGroup>
      <hashTree>
        <CookieManager guiclass="CookiePanel" testclass="CookieManager" testname="HTTP Cookie Manager" enabled="true">
          <collectionProp name="CookieManager.cookies"/>
          <boolProp name="CookieManager.clearEachIteration">false</boolProp>
        </CookieManager>
        <hashTree/>
        <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="LogIn" enabled="true">
          <stringProp name="IncludeController.includepath">..\..\TestFragement\Common\Login-Fragment.jmx</stringProp>
        </IncludeController>
        <hashTree/>
        <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="SetUpEnvironment" enabled="true">
          <stringProp name="filename">..\..\CSV\LogIn.csv</stringProp>
          <stringProp name="fileEncoding"></stringProp>
          <stringProp name="variableNames"></stringProp>
          <boolProp name="ignoreFirstLine">false</boolProp>
          <stringProp name="delimiter">,</stringProp>
          <boolProp name="quotedData">false</boolProp>
          <boolProp name="recycle">true</boolProp>
          <boolProp name="stopThread">false</boolProp>
          <stringProp name="shareMode">shareMode.all</stringProp>
        </CSVDataSet>
        <hashTree/>
        <Arguments guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
          <collectionProp name="Arguments.arguments">
            <elementProp name="domainCode" elementType="Argument">
              <stringProp name="Argument.name">domainCode</stringProp>
              <stringProp name="Argument.value">10USA</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="endUserCode" elementType="Argument">
              <stringProp name="Argument.name">endUserCode</stringProp>
              <stringProp name="Argument.value">10c1001</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
            <elementProp name="workCode" elementType="Argument">
              <stringProp name="Argument.name">workCode</stringProp>
              <stringProp name="Argument.value">4003</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
              <stringProp name="Argument.desc">not fixed</stringProp>
            </elementProp>
            <elementProp name="depotOrderLine" elementType="Argument">
              <stringProp name="Argument.name">depotOrderLine</stringProp>
              <stringProp name="Argument.value">0</stringProp>
              <stringProp name="Argument.metadata">=</stringProp>
            </elementProp>
          </collectionProp>
        </Arguments>
        <hashTree/>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true">
          <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
            <collectionProp name="Arguments.arguments"/>
          </elementProp>
          <stringProp name="HTTPSampler.domain">${server}</stringProp>
          <stringProp name="HTTPSampler.port">${tomcatPort}</stringProp>
          <stringProp name="HTTPSampler.protocol">${protocolRest}</stringProp>
          <stringProp name="HTTPSampler.contentEncoding"></stringProp>
          <stringProp name="HTTPSampler.path"></stringProp>
          <stringProp name="HTTPSampler.concurrentPool">6</stringProp>
          <stringProp name="HTTPSampler.connect_timeout"></stringProp>
          <stringProp name="HTTPSampler.response_timeout"></stringProp>
        </ConfigTestElement>
        <hashTree/>
        <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
          <collectionProp name="HeaderManager.headers">
            <elementProp name="Content-Type" elementType="Header">
              <stringProp name="Header.name">Content-Type</stringProp>
              <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
            </elementProp>
          </collectionProp>
        </HeaderManager>
        <hashTree/>
        <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>true</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>true</responseData>
              <samplerData>true</samplerData>
              <xml>true</xml>
              <fieldNames>true</fieldNames>
              <responseHeaders>true</responseHeaders>
              <requestHeaders>true</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <url>true</url>
              <fileName>true</fileName>
              <hostname>true</hostname>
              <threadCounts>true</threadCounts>
              <sampleCount>true</sampleCount>
              <idleTime>true</idleTime>
              <connectTime>true</connectTime>
            </value>
          </objProp>
          <stringProp name="filename">~/log/${__TestPlanName}_${__time(YMDHMS)}.xml</stringProp>
        </ResultCollector>
        <hashTree/>
        <ResultCollector guiclass="AssertionVisualizer" testclass="ResultCollector" testname="Assertion Results" enabled="true">
          <boolProp name="ResultCollector.error_logging">false</boolProp>
          <objProp>
            <name>saveConfig</name>
            <value class="SampleSaveConfiguration">
              <time>true</time>
              <latency>true</latency>
              <timestamp>true</timestamp>
              <success>true</success>
              <label>true</label>
              <code>true</code>
              <message>true</message>
              <threadName>true</threadName>
              <dataType>true</dataType>
              <encoding>false</encoding>
              <assertions>true</assertions>
              <subresults>true</subresults>
              <responseData>false</responseData>
              <samplerData>false</samplerData>
              <xml>false</xml>
              <fieldNames>false</fieldNames>
              <responseHeaders>false</responseHeaders>
              <requestHeaders>false</requestHeaders>
              <responseDataOnError>false</responseDataOnError>
              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
              <assertionsResultsToSave>0</assertionsResultsToSave>
              <bytes>true</bytes>
              <threadCounts>true</threadCounts>
            </value>
          </objProp>
          <stringProp name="filename"></stringProp>
        </ResultCollector>
        <hashTree/>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Fetch the order" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="set domain code and depot order number" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">vars.put(&quot;depotOrderHeader_depotOrderNumber&quot;,&quot;CA5678&quot;);
vars.put(&quot;depotOrderHeader_domainCode&quot;, &quot;${domainCode}&quot;);</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Fetch the header data" enabled="true">
            <stringProp name="IncludeController.includepath">..\..\TestFragement\DepotOrder\Fragement_depotOrderHeader fetch.jmx</stringProp>
          </IncludeController>
          <hashTree/>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Update the order" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="set domain code and depot order number" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">vars.put(&quot;depotOrderHeader_depotOrderNumber&quot;,&quot;CA5678&quot;);
vars.put(&quot;depotOrderHeader_domainCode&quot;, &quot;${domainCode}&quot;);

/*varsList.add(&quot;depotOrderHeader_error&quot;);
varsList.add(&quot;depotOrderHeader_isProcessOrderSummary&quot;);
varsList.add(&quot;depotOrderHeader_workCode&quot;);
varsList.add(&quot;depotOrderHeader_statusCode&quot;);
varsList.add(&quot;depotOrderHeader_isProcessPostTrailer&quot;);
varsList.add(&quot;depotOrderHeader_completeStatus&quot;);
varsList.add(&quot;depotOrderHeader_enteredBy&quot;);
varsList.add(&quot;depotOrderHeader_eventDateTime&quot;);
varsList.add(&quot;depotOrderHeader_trailerAmount1&quot;);
varsList.add(&quot;depotOrderHeader_soldToCustomerCode&quot;);
varsList.add(&quot;depotOrderHeader_confirmedDate&quot;);
varsList.add(&quot;depotOrderHeader_baseCurrencyCode&quot;);
varsList.add(&quot;depotOrderHeader_serviceQuoteNumber&quot;);
varsList.add(&quot;depotOrderHeader_billToCustomerCode&quot;);
varsList.add(&quot;depotOrderHeader_currencyCode&quot;);
varsList.add(&quot;depotOrderHeader_exchangeRate&quot;);
varsList.add(&quot;depotOrderHeader_exchangeRate2&quot;);
varsList.add(&quot;depotOrderHeader_isFixedRate&quot;);
varsList.add(&quot;depotOrderHeader_timeZoneCode&quot;);
varsList.add(&quot;depotOrderHeader_defaultTimeZoneCode&quot;);
varsList.add(&quot;depotOrderHeader_freightWeightUnitOfMeasure&quot;);
varsList.add(&quot;depotOrderHeader_isManualDiscountPercent&quot;);
varsList.add(&quot;depotOrderHeader_serviceTypeCode&quot;);

// Fields for validation
varsList.add(&quot;depotOrderHeader_validate_siteCode&quot;);
varsList.add(&quot;depotOrderHeader_validate_confirmedDate&quot;);
varsList.add(&quot;depotOrderHeader_validate_baseCurrencyCode&quot;);
varsList.add(&quot;depotOrderHeader_validate_serviceQuoteNumber&quot;);
varsList.add(&quot;depotOrderHeader_validate_timeZoneCode&quot;);
varsList.add(&quot;depotOrderHeader_validate_defaultTimeZoneCode&quot;);*/
</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Save the order" enabled="true">
            <stringProp name="IncludeController.includepath">..\..\TestFragement\DepotOrder\Fragement_depotOrderHeader save.jmx</stringProp>
          </IncludeController>
          <hashTree/>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Fetch the line" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="set domain code and depot order number" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">vars.put(&quot;depotOrderLine_url_depotOrderNumber&quot;,&quot;ca5787&quot;);
vars.put(&quot;depotOrderLine_url_domainCode&quot;, &quot;${domainCode}&quot;);
vars.put(&quot;depotOrderLine_url_depotOrderLine&quot;, &quot;1&quot;);</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Fetch the line data" enabled="true">
            <stringProp name="IncludeController.includepath">..\..\TestFragement\DepotOrder\Fragement_depotOrderLine fetch.jmx</stringProp>
          </IncludeController>
          <hashTree/>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Update the line" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="set domain code and depot order number" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">vars.put(&quot;depotOrderLine_depotOrderNumber&quot;,&quot;CA5787&quot;);
vars.put(&quot;depotOrderLine_domainCode&quot;, &quot;${domainCode}&quot;);
vars.put(&quot;depotOrderLine_depotOrderLine&quot;, &quot;1&quot;);

vars.put(&quot;depotOrderLine_salesProject&quot;, &quot;233&quot;);
vars.put(&quot;depotOrderLine_discountProject&quot;, &quot;2333&quot;);
//vars.put(&quot;depotOrderLine_serviceTypeCode&quot;, &quot;90-c&quot;);
//vars.put(&quot;depotOrderLine_billOfMaterialCode&quot;, &quot;PM-1002&quot;);
//vars.put(&quot;depotOrderLine_error&quot;, &quot;Update not allowed. CA5783 1&quot;);
//vars.put(&quot;depotOrderLine_routingCode&quot;, &quot;PM-1001&quot;);


//varsList.add(&quot;depotOrderLine_salesProject&quot;);
//varsList.add(&quot;depotOrderLine_discountProject&quot;);

/*varsList.add(&quot;depotOrderLine_error&quot;);
// All the fields in dataset should be configurable here (for input)
varsList.add(&quot;depotOrderLine_domainCode&quot;);
varsList.add(&quot;depotOrderLine_depotOrderNumber&quot;);
varsList.add(&quot;depotOrderLine_depotOrderLine&quot;);
varsList.add(&quot;depotOrderLine_itemCode&quot;);
varsList.add(&quot;depotOrderLine_itemRepairType&quot;);
varsList.add(&quot;depotOrderLine_itemRepairTypeDisplayValue&quot;);
varsList.add(&quot;depotOrderLine_itemRepairTypeDescription&quot;);
varsList.add(&quot;depotOrderLine_detailType&quot;);
varsList.add(&quot;depotOrderLine_servicePendingInvoiceNumber&quot;);
varsList.add(&quot;depotOrderLine_typeCode&quot;);
varsList.add(&quot;depotOrderLine_subDepotOrderLine&quot;);
varsList.add(&quot;depotOrderLine_depotOrderLineOid&quot;);
varsList.add(&quot;depotOrderLine_description&quot;);
varsList.add(&quot;depotOrderLine_description2&quot;);
varsList.add(&quot;depotOrderLine_revision&quot;);
varsList.add(&quot;depotOrderLine_lotSerial&quot;);
varsList.add(&quot;depotOrderLine_reference&quot;);
varsList.add(&quot;depotOrderLine_workCode&quot;);
varsList.add(&quot;depotOrderLine_workCodeDescription&quot;);
varsList.add(&quot;depotOrderLine_serviceType&quot;);
varsList.add(&quot;depotOrderLine_serviceTypeCode&quot;);
varsList.add(&quot;depotOrderLine_serviceTypeDescription&quot;);
varsList.add(&quot;depotOrderLine_modelCode&quot;);
varsList.add(&quot;depotOrderLine_assigned&quot;);
varsList.add(&quot;depotOrderLine_assignedName&quot;);
varsList.add(&quot;depotOrderLine_endUserCode&quot;);
varsList.add(&quot;depotOrderLine_endUserAddressField1&quot;);
varsList.add(&quot;depotOrderLine_isTaxable&quot;);
varsList.add(&quot;depotOrderLine_siteCode&quot;);
varsList.add(&quot;depotOrderLine_siteDescription&quot;);
varsList.add(&quot;depotOrderLine_statusCode&quot;);
varsList.add(&quot;depotOrderLine_statusCodeDescription&quot;);
varsList.add(&quot;depotOrderLine_nextStatusCode&quot;);
varsList.add(&quot;depotOrderLine_nextStatusDateTime&quot;);
varsList.add(&quot;depotOrderLine_isUpdateInstalledBase&quot;);
varsList.add(&quot;depotOrderLine_alternateItem&quot;);
varsList.add(&quot;depotOrderLine_estimatedCost&quot;);
varsList.add(&quot;depotOrderLine_isConfirmed&quot;);
varsList.add(&quot;depotOrderLine_pricingDate&quot;);
varsList.add(&quot;depotOrderLine_replaceLine&quot;);
varsList.add(&quot;depotOrderLine_quantity&quot;);
varsList.add(&quot;depotOrderLine_unitOfMeasure&quot;);
varsList.add(&quot;depotOrderLine_requiredDate&quot;);
varsList.add(&quot;depotOrderLine_requiredTime&quot;);
varsList.add(&quot;depotOrderLine_promiseDate&quot;);
varsList.add(&quot;depotOrderLine_billOfMaterialCode&quot;);
varsList.add(&quot;depotOrderLine_isBillOfMaterialGenerated&quot;);
varsList.add(&quot;depotOrderLine_routingCode&quot;);
varsList.add(&quot;depotOrderLine_isRouteGenerated&quot;);
varsList.add(&quot;depotOrderLine_isUnprocessed&quot;);
varsList.add(&quot;depotOrderLine_materialOrderNumber&quot;);
varsList.add(&quot;depotOrderLine_materialOrderLine&quot;);
varsList.add(&quot;depotOrderLine_completeDate&quot;);
varsList.add(&quot;depotOrderLine_siteEntityCode&quot;);
varsList.add(&quot;depotOrderLine_siteEntityDescription&quot;);
varsList.add(&quot;depotOrderLine_dueDate&quot;);
varsList.add(&quot;depotOrderLine_shipToAddressCode&quot;);
varsList.add(&quot;depotOrderLine_shipToDescription&quot;);
varsList.add(&quot;depotOrderLine_freightListCode&quot;);
varsList.add(&quot;depotOrderLine_freightListDescription&quot;);
varsList.add(&quot;depotOrderLine_freightClassCode&quot;);
varsList.add(&quot;depotOrderLine_freightClassDescription&quot;);
varsList.add(&quot;depotOrderLine_itemShipWeight&quot;);
varsList.add(&quot;depotOrderLine_itemShipWeightUnitOfMeasure&quot;);
varsList.add(&quot;depotOrderLine_freightWeight&quot;);
varsList.add(&quot;depotOrderLine_freightWeightUnitOfMeasure&quot;);
varsList.add(&quot;depotOrderLine_freightMinimumWeight&quot;);
varsList.add(&quot;depotOrderLine_itemShipWeightExtended&quot;);
varsList.add(&quot;depotOrderLine_freightWeightExtended&quot;);
varsList.add(&quot;depotOrderLine_freightCharge&quot;);
varsList.add(&quot;depotOrderLine_freightChargeCurrencyCode&quot;);
varsList.add(&quot;depotOrderLine_fixedPrice&quot;);
varsList.add(&quot;depotOrderLine_isFixedPrice&quot;);
varsList.add(&quot;depotOrderLine_wipProductLine&quot;);
varsList.add(&quot;depotOrderLine_wipProductLineDescription&quot;);
varsList.add(&quot;depotOrderLine_revenueProductLine&quot;);
varsList.add(&quot;depotOrderLine_taxClass&quot;);
varsList.add(&quot;depotOrderLine_taxClassDescription&quot;);
varsList.add(&quot;depotOrderLine_taxUsage&quot;);
varsList.add(&quot;depotOrderLine_taxUsageDescription&quot;);
varsList.add(&quot;depotOrderLine_taxEnvironment&quot;);
varsList.add(&quot;depotOrderLine_taxEnvironmentDescription&quot;);
varsList.add(&quot;depotOrderLine_isTaxIncluded&quot;);
varsList.add(&quot;depotOrderLine_listPrice&quot;);
varsList.add(&quot;depotOrderLine_netPrice&quot;);
varsList.add(&quot;depotOrderLine_salesAccount&quot;);
varsList.add(&quot;depotOrderLine_salesAccountDescription&quot;);
varsList.add(&quot;depotOrderLine_salesSubAccount&quot;);
varsList.add(&quot;depotOrderLine_salesSubAccountDescription&quot;);
varsList.add(&quot;depotOrderLine_salesCostCenter&quot;);
varsList.add(&quot;depotOrderLine_salesCostCenterDescription&quot;);
varsList.add(&quot;depotOrderLine_salesProject&quot;);
varsList.add(&quot;depotOrderLine_salesProjectDescription&quot;);
varsList.add(&quot;depotOrderLine_discountAccount&quot;);
varsList.add(&quot;depotOrderLine_discountAccountDescription&quot;);
varsList.add(&quot;depotOrderLine_discountSubAccount&quot;);
varsList.add(&quot;depotOrderLine_discountSubAccountDescription&quot;);
varsList.add(&quot;depotOrderLine_discountCostCenter&quot;);
varsList.add(&quot;depotOrderLine_discountCostCenterDescription&quot;);
varsList.add(&quot;depotOrderLine_discountProject&quot;);
varsList.add(&quot;depotOrderLine_discountProjectDescription&quot;);
varsList.add(&quot;depotOrderLine_isBillDetail&quot;);
varsList.add(&quot;depotOrderLine_isInvoiced&quot;);
varsList.add(&quot;depotOrderLine_isUninvoiced&quot;);
varsList.add(&quot;depotOrderLine_isProvincialSalesTax&quot;);
varsList.add(&quot;depotOrderLine_contractNumber&quot;);
varsList.add(&quot;depotOrderLine_contractLine&quot;);
varsList.add(&quot;depotOrderLine_contractLineForDisplay&quot;);
varsList.add(&quot;depotOrderLine_contractLimitsSource&quot;);
varsList.add(&quot;depotOrderLine_contractServiceTypeCode&quot;);
varsList.add(&quot;depotOrderLine_warrantyServiceTypeCode&quot;);
varsList.add(&quot;depotOrderLine_currencyCode&quot;);
varsList.add(&quot;depotOrderLine_isOverrideLimits&quot;);
varsList.add(&quot;depotOrderLine_contractStartDate&quot;);
varsList.add(&quot;depotOrderLine_contractEndDate&quot;);
varsList.add(&quot;depotOrderLine_warrantyStartDate&quot;);
varsList.add(&quot;depotOrderLine_warrantyEndDate&quot;);
varsList.add(&quot;depotOrderLine_isCheckContractLimit&quot;);
varsList.add(&quot;depotOrderLine_commentIndex&quot;);
varsList.add(&quot;depotOrderLine_lastModifiedUser&quot;);
varsList.add(&quot;depotOrderLine_lastModifiedDate&quot;);
varsList.add(&quot;depotOrderLine_itmDetUser1&quot;);
varsList.add(&quot;depotOrderLine_itmDetUser2&quot;);
varsList.add(&quot;depotOrderLine_itmDetChr01&quot;);
varsList.add(&quot;depotOrderLine_itmDetChr02&quot;);
varsList.add(&quot;depotOrderLine_itmDetChr03&quot;);
varsList.add(&quot;depotOrderLine_itmDetChr04&quot;);
varsList.add(&quot;depotOrderLine_itmDetDec01&quot;);
varsList.add(&quot;depotOrderLine_itmDetDec02&quot;);
varsList.add(&quot;depotOrderLine_itmDetDec03&quot;);
varsList.add(&quot;depotOrderLine_itmDetDte01&quot;);
varsList.add(&quot;depotOrderLine_itmDetDte02&quot;);
varsList.add(&quot;depotOrderLine_itmDetDte03&quot;);
varsList.add(&quot;depotOrderLine_itmDetLog01&quot;);
varsList.add(&quot;depotOrderLine_itmDetLog02&quot;);
varsList.add(&quot;depotOrderLine_itmDetLog03&quot;);
varsList.add(&quot;depotOrderLine_startDownDate&quot;);
varsList.add(&quot;depotOrderLine_endDownDate&quot;);
varsList.add(&quot;depotOrderLine_endDownTime&quot;);
varsList.add(&quot;depotOrderLine_startDownTime&quot;);
varsList.add(&quot;depotOrderLine_jobStartDate&quot;);
varsList.add(&quot;depotOrderLine_jobStartTime&quot;);
varsList.add(&quot;depotOrderLine_repairSequence&quot;);
varsList.add(&quot;depotOrderLine_repairStep&quot;);
varsList.add(&quot;depotOrderLine_isSeparateDocument&quot;);
varsList.add(&quot;depotOrderLine_locationCode&quot;);
varsList.add(&quot;depotOrderLine_quantityReceivedFromRepairCenter&quot;);
varsList.add(&quot;depotOrderLine_quantityShippedToRepairCenter&quot;);
varsList.add(&quot;depotOrderLine_quantityReceived&quot;);
varsList.add(&quot;depotOrderLine_quantityAllocated&quot;);
varsList.add(&quot;depotOrderLine_quantityPicked&quot;);
varsList.add(&quot;depotOrderLine_quantityShipped&quot;);
varsList.add(&quot;depotOrderLine_receivedDate&quot;);
varsList.add(&quot;depotOrderLine_shippedDate&quot;);
varsList.add(&quot;depotOrderLine_expectedDate&quot;);
varsList.add(&quot;depotOrderLine_isRecorded&quot;);
varsList.add(&quot;depotOrderLine_quantityToReceive&quot;);
varsList.add(&quot;depotOrderLine_tag&quot;);
varsList.add(&quot;depotOrderLine_priceListCode&quot;);
varsList.add(&quot;depotOrderLine_estimatedTime&quot;);
varsList.add(&quot;depotOrderLine_isDoneLines&quot;);
varsList.add(&quot;depotOrderLine_completeStatus&quot;);
varsList.add(&quot;depotOrderLine_quantityToInvoice&quot;);
varsList.add(&quot;depotOrderLine_isSARExist&quot;);
varsList.add(&quot;depotOrderLine_dataOperation&quot;);
varsList.add(&quot;depotOrderLine_concurrencyHash&quot;);
varsList.add(&quot;depotOrderLine_salesOrderLineConcurrencyHash&quot;);


// All the fields in dataset should be configurable here (for validation)
varsList.add(&quot;depotOrderLine_validate_domainCode&quot;);
varsList.add(&quot;depotOrderLine_validate_depotOrderNumber&quot;);
varsList.add(&quot;depotOrderLine_validate_depotOrderLine&quot;);
varsList.add(&quot;depotOrderLine_validate_itemCode&quot;);
varsList.add(&quot;depotOrderLine_validate_itemRepairType&quot;);
varsList.add(&quot;depotOrderLine_validate_itemRepairTypeDisplayValue&quot;);
varsList.add(&quot;depotOrderLine_validate_itemRepairTypeDescription&quot;);
varsList.add(&quot;depotOrderLine_validate_detailType&quot;);
varsList.add(&quot;depotOrderLine_validate_servicePendingInvoiceNumber&quot;);
varsList.add(&quot;depotOrderLine_validate_typeCode&quot;);
varsList.add(&quot;depotOrderLine_validate_subDepotOrderLine&quot;);
varsList.add(&quot;depotOrderLine_validate_depotOrderLineOid&quot;);
varsList.add(&quot;depotOrderLine_validate_description&quot;);
varsList.add(&quot;depotOrderLine_validate_description2&quot;);
varsList.add(&quot;depotOrderLine_validate_revision&quot;);
varsList.add(&quot;depotOrderLine_validate_lotSerial&quot;);
varsList.add(&quot;depotOrderLine_validate_reference&quot;);
varsList.add(&quot;depotOrderLine_validate_workCode&quot;);
varsList.add(&quot;depotOrderLine_validate_workCodeDescription&quot;);
varsList.add(&quot;depotOrderLine_validate_serviceType&quot;);
varsList.add(&quot;depotOrderLine_validate_serviceTypeCode&quot;);
varsList.add(&quot;depotOrderLine_validate_serviceTypeDescription&quot;);
varsList.add(&quot;depotOrderLine_validate_modelCode&quot;);
varsList.add(&quot;depotOrderLine_validate_assigned&quot;);
varsList.add(&quot;depotOrderLine_validate_assignedName&quot;);
varsList.add(&quot;depotOrderLine_validate_endUserCode&quot;);
varsList.add(&quot;depotOrderLine_validate_endUserAddressField1&quot;);
varsList.add(&quot;depotOrderLine_validate_isTaxable&quot;);
varsList.add(&quot;depotOrderLine_validate_siteCode&quot;);
varsList.add(&quot;depotOrderLine_validate_siteDescription&quot;);
varsList.add(&quot;depotOrderLine_validate_statusCode&quot;);
varsList.add(&quot;depotOrderLine_validate_statusCodeDescription&quot;);
varsList.add(&quot;depotOrderLine_validate_nextStatusCode&quot;);
varsList.add(&quot;depotOrderLine_validate_nextStatusDateTime&quot;);
varsList.add(&quot;depotOrderLine_validate_isUpdateInstalledBase&quot;);
varsList.add(&quot;depotOrderLine_validate_alternateItem&quot;);
varsList.add(&quot;depotOrderLine_validate_estimatedCost&quot;);
varsList.add(&quot;depotOrderLine_validate_isConfirmed&quot;);
varsList.add(&quot;depotOrderLine_validate_pricingDate&quot;);
varsList.add(&quot;depotOrderLine_validate_replaceLine&quot;);
varsList.add(&quot;depotOrderLine_validate_quantity&quot;);
varsList.add(&quot;depotOrderLine_validate_unitOfMeasure&quot;);
varsList.add(&quot;depotOrderLine_validate_requiredDate&quot;);
varsList.add(&quot;depotOrderLine_validate_requiredTime&quot;);
varsList.add(&quot;depotOrderLine_validate_promiseDate&quot;);
varsList.add(&quot;depotOrderLine_validate_billOfMaterialCode&quot;);
varsList.add(&quot;depotOrderLine_validate_isBillOfMaterialGenerated&quot;);
varsList.add(&quot;depotOrderLine_validate_routingCode&quot;);
varsList.add(&quot;depotOrderLine_validate_isRouteGenerated&quot;);
varsList.add(&quot;depotOrderLine_validate_isUnprocessed&quot;);
varsList.add(&quot;depotOrderLine_validate_materialOrderNumber&quot;);
varsList.add(&quot;depotOrderLine_validate_materialOrderLine&quot;);
varsList.add(&quot;depotOrderLine_validate_completeDate&quot;);
varsList.add(&quot;depotOrderLine_validate_siteEntityCode&quot;);
varsList.add(&quot;depotOrderLine_validate_siteEntityDescription&quot;);
varsList.add(&quot;depotOrderLine_validate_dueDate&quot;);
varsList.add(&quot;depotOrderLine_validate_shipToAddressCode&quot;);
varsList.add(&quot;depotOrderLine_validate_shipToDescription&quot;);
varsList.add(&quot;depotOrderLine_validate_freightListCode&quot;);
varsList.add(&quot;depotOrderLine_validate_freightListDescription&quot;);
varsList.add(&quot;depotOrderLine_validate_freightClassCode&quot;);
varsList.add(&quot;depotOrderLine_validate_freightClassDescription&quot;);
varsList.add(&quot;depotOrderLine_validate_itemShipWeight&quot;);
varsList.add(&quot;depotOrderLine_validate_itemShipWeightUnitOfMeasure&quot;);
varsList.add(&quot;depotOrderLine_validate_freightWeight&quot;);
varsList.add(&quot;depotOrderLine_validate_freightWeightUnitOfMeasure&quot;);
varsList.add(&quot;depotOrderLine_validate_freightMinimumWeight&quot;);
varsList.add(&quot;depotOrderLine_validate_itemShipWeightExtended&quot;);
varsList.add(&quot;depotOrderLine_validate_freightWeightExtended&quot;);
varsList.add(&quot;depotOrderLine_validate_freightCharge&quot;);
varsList.add(&quot;depotOrderLine_validate_freightChargeCurrencyCode&quot;);
varsList.add(&quot;depotOrderLine_validate_fixedPrice&quot;);
varsList.add(&quot;depotOrderLine_validate_isFixedPrice&quot;);
varsList.add(&quot;depotOrderLine_validate_wipProductLine&quot;);
varsList.add(&quot;depotOrderLine_validate_wipProductLineDescription&quot;);
varsList.add(&quot;depotOrderLine_validate_revenueProductLine&quot;);
varsList.add(&quot;depotOrderLine_validate_taxClass&quot;);
varsList.add(&quot;depotOrderLine_validate_taxClassDescription&quot;);
varsList.add(&quot;depotOrderLine_validate_taxUsage&quot;);
varsList.add(&quot;depotOrderLine_validate_taxUsageDescription&quot;);
varsList.add(&quot;depotOrderLine_validate_taxEnvironment&quot;);
varsList.add(&quot;depotOrderLine_validate_taxEnvironmentDescription&quot;);
varsList.add(&quot;depotOrderLine_validate_isTaxIncluded&quot;);
varsList.add(&quot;depotOrderLine_validate_listPrice&quot;);
varsList.add(&quot;depotOrderLine_validate_netPrice&quot;);
varsList.add(&quot;depotOrderLine_validate_salesAccount&quot;);
varsList.add(&quot;depotOrderLine_validate_salesAccountDescription&quot;);
varsList.add(&quot;depotOrderLine_validate_salesSubAccount&quot;);
varsList.add(&quot;depotOrderLine_validate_salesSubAccountDescription&quot;);
varsList.add(&quot;depotOrderLine_validate_salesCostCenter&quot;);
varsList.add(&quot;depotOrderLine_validate_salesCostCenterDescription&quot;);
varsList.add(&quot;depotOrderLine_validate_salesProject&quot;);
varsList.add(&quot;depotOrderLine_validate_salesProjectDescription&quot;);
varsList.add(&quot;depotOrderLine_validate_discountAccount&quot;);
varsList.add(&quot;depotOrderLine_validate_discountAccountDescription&quot;);
varsList.add(&quot;depotOrderLine_validate_discountSubAccount&quot;);
varsList.add(&quot;depotOrderLine_validate_discountSubAccountDescription&quot;);
varsList.add(&quot;depotOrderLine_validate_discountCostCenter&quot;);
varsList.add(&quot;depotOrderLine_validate_discountCostCenterDescription&quot;);
varsList.add(&quot;depotOrderLine_validate_discountProject&quot;);
varsList.add(&quot;depotOrderLine_validate_discountProjectDescription&quot;);
varsList.add(&quot;depotOrderLine_validate_isBillDetail&quot;);
varsList.add(&quot;depotOrderLine_validate_isInvoiced&quot;);
varsList.add(&quot;depotOrderLine_validate_isUninvoiced&quot;);
varsList.add(&quot;depotOrderLine_validate_isProvincialSalesTax&quot;);
varsList.add(&quot;depotOrderLine_validate_contractNumber&quot;);
varsList.add(&quot;depotOrderLine_validate_contractLine&quot;);
varsList.add(&quot;depotOrderLine_validate_contractLineForDisplay&quot;);
varsList.add(&quot;depotOrderLine_validate_contractLimitsSource&quot;);
varsList.add(&quot;depotOrderLine_validate_contractServiceTypeCode&quot;);
varsList.add(&quot;depotOrderLine_validate_warrantyServiceTypeCode&quot;);
varsList.add(&quot;depotOrderLine_validate_currencyCode&quot;);
varsList.add(&quot;depotOrderLine_validate_isOverrideLimits&quot;);
varsList.add(&quot;depotOrderLine_validate_contractStartDate&quot;);
varsList.add(&quot;depotOrderLine_validate_contractEndDate&quot;);
varsList.add(&quot;depotOrderLine_validate_warrantyStartDate&quot;);
varsList.add(&quot;depotOrderLine_validate_warrantyEndDate&quot;);
varsList.add(&quot;depotOrderLine_validate_isCheckContractLimit&quot;);
varsList.add(&quot;depotOrderLine_validate_commentIndex&quot;);
varsList.add(&quot;depotOrderLine_validate_lastModifiedUser&quot;);
varsList.add(&quot;depotOrderLine_validate_lastModifiedDate&quot;);
varsList.add(&quot;depotOrderLine_validate_itmDetUser1&quot;);
varsList.add(&quot;depotOrderLine_validate_itmDetUser2&quot;);
varsList.add(&quot;depotOrderLine_validate_itmDetChr01&quot;);
varsList.add(&quot;depotOrderLine_validate_itmDetChr02&quot;);
varsList.add(&quot;depotOrderLine_validate_itmDetChr03&quot;);
varsList.add(&quot;depotOrderLine_validate_itmDetChr04&quot;);
varsList.add(&quot;depotOrderLine_validate_itmDetDec01&quot;);
varsList.add(&quot;depotOrderLine_validate_itmDetDec02&quot;);
varsList.add(&quot;depotOrderLine_validate_itmDetDec03&quot;);
varsList.add(&quot;depotOrderLine_validate_itmDetDte01&quot;);
varsList.add(&quot;depotOrderLine_validate_itmDetDte02&quot;);
varsList.add(&quot;depotOrderLine_validate_itmDetDte03&quot;);
varsList.add(&quot;depotOrderLine_validate_itmDetLog01&quot;);
varsList.add(&quot;depotOrderLine_validate_itmDetLog02&quot;);
varsList.add(&quot;depotOrderLine_validate_itmDetLog03&quot;);
varsList.add(&quot;depotOrderLine_validate_startDownDate&quot;);
varsList.add(&quot;depotOrderLine_validate_endDownDate&quot;);
varsList.add(&quot;depotOrderLine_validate_endDownTime&quot;);
varsList.add(&quot;depotOrderLine_validate_startDownTime&quot;);
varsList.add(&quot;depotOrderLine_validate_jobStartDate&quot;);
varsList.add(&quot;depotOrderLine_validate_jobStartTime&quot;);
varsList.add(&quot;depotOrderLine_validate_repairSequence&quot;);
varsList.add(&quot;depotOrderLine_validate_repairStep&quot;);
varsList.add(&quot;depotOrderLine_validate_isSeparateDocument&quot;);
varsList.add(&quot;depotOrderLine_validate_locationCode&quot;);
varsList.add(&quot;depotOrderLine_validate_quantityReceivedFromRepairCenter&quot;);
varsList.add(&quot;depotOrderLine_validate_quantityShippedToRepairCenter&quot;);
varsList.add(&quot;depotOrderLine_validate_quantityReceived&quot;);
varsList.add(&quot;depotOrderLine_validate_quantityAllocated&quot;);
varsList.add(&quot;depotOrderLine_validate_quantityPicked&quot;);
varsList.add(&quot;depotOrderLine_validate_quantityShipped&quot;);
varsList.add(&quot;depotOrderLine_validate_receivedDate&quot;);
varsList.add(&quot;depotOrderLine_validate_shippedDate&quot;);
varsList.add(&quot;depotOrderLine_validate_expectedDate&quot;);
varsList.add(&quot;depotOrderLine_validate_isRecorded&quot;);
varsList.add(&quot;depotOrderLine_validate_quantityToReceive&quot;);
varsList.add(&quot;depotOrderLine_validate_tag&quot;);
varsList.add(&quot;depotOrderLine_validate_priceListCode&quot;);
varsList.add(&quot;depotOrderLine_validate_estimatedTime&quot;);
varsList.add(&quot;depotOrderLine_validate_isDoneLines&quot;);
varsList.add(&quot;depotOrderLine_validate_completeStatus&quot;);
varsList.add(&quot;depotOrderLine_validate_quantityToInvoice&quot;);
varsList.add(&quot;depotOrderLine_validate_isSARExist&quot;);
varsList.add(&quot;depotOrderLine_validate_dataOperation&quot;);
varsList.add(&quot;depotOrderLine_validate_concurrencyHash&quot;);
varsList.add(&quot;depotOrderLine_validate_salesOrderLineConcurrencyHash&quot;);*/
</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Save the line" enabled="true">
            <stringProp name="IncludeController.includepath">..\..\TestFragement\DepotOrder\Fragement_depotOrderLine update.jmx</stringProp>
          </IncludeController>
          <hashTree/>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Verify Create Depot Order" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Depot Order Header Initialize" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="initialize" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">initialize</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="domainCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">domainCode</stringProp>
                  <stringProp name="Argument.value">${domainCode}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${server}</stringProp>
            <stringProp name="HTTPSampler.port">${tomcatPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/${webapp}/api/erp/depotOrderHeaders</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="ExtractFullResponse" enabled="true">
              <stringProp name="VAR">RequestData</stringProp>
              <stringProp name="JSONPATH">$.data</stringProp>
              <stringProp name="DEFAULT">NotFound</stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="depotOrderHeader Handle  endUserCode fieldchange ${depotOrderHeader_endUserCode}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${RequestData}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${server}</stringProp>
            <stringProp name="HTTPSampler.port">${tomcatPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/${webapp}/api/erp/depotOrderHeaders/fieldChange?fieldName=endUserCode</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${server}:${tomcatPort}/${webapp}/</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${protocol}://${server}:${tomcatPort}</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.90 Safari/537.36</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Update JSON using JavaScript" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">true</stringProp>
              <stringProp name="script">var requestData = vars.get(&quot;RequestData&quot;);

//Parse the JSON to get a JavaScript data object
var objRequest = JSON.parse(requestData);

//Update the value of the data objec
objRequest.depotOrderHeaders[0].endUserCode = &quot;10c1001&quot;;
objRequest.depotOrderHeaders[0].workCode = &quot;5000&quot;;

//Convert the data object back to a JSON string 
var strUpdatedRequest = JSON.stringify(objRequest);

//Update ${RequestData} to have the value of the updated JSON
vars.put(&quot;RequestData&quot;, strUpdatedRequest);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="ExtractFullResponse" enabled="true">
              <stringProp name="VAR">RequestData</stringProp>
              <stringProp name="JSONPATH">$.data</stringProp>
              <stringProp name="DEFAULT">NotFound</stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="result" enabled="true">
              <stringProp name="JSON_PATH">$.submitResult.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DepotOrderHeader GetNextDepotOrderNumber" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="domainCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">domainCode</stringProp>
                  <stringProp name="Argument.value">${domainCode}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${server}</stringProp>
            <stringProp name="HTTPSampler.port">${tomcatPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding"></stringProp>
            <stringProp name="HTTPSampler.path">/${webapp}/api/erp/depotOrderHeaders/nextDepotOrderNumber</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="Extract NextDepotOrderNumber" enabled="true">
              <stringProp name="VAR">depotOrderNumber</stringProp>
              <stringProp name="JSONPATH">$.nextDepotOrderNumber</stringProp>
              <stringProp name="DEFAULT">NotFound</stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="result" enabled="true">
              <stringProp name="JSON_PATH">$.submitResult.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DepotOrderHeader Create: ${output_depotOrderHeader_depotOrderNumber}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${RequestData}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${server}</stringProp>
            <stringProp name="HTTPSampler.port">${tomcatPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/${webapp}/api/erp/depotOrderHeaders</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/plain, */*</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${protocol}://${server}:${tomcatPort}</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="x-qadskipdefaulterrorhandling" elementType="Header">
                  <stringProp name="Header.name">x-qadskipdefaulterrorhandling</stringProp>
                  <stringProp name="Header.value">true</stringProp>
                </elementProp>
                <elementProp name="x-qadcalluid" elementType="Header">
                  <stringProp name="Header.name">x-qadcalluid</stringProp>
                  <stringProp name="Header.value">9bb158a4-46aa-4351-991a-5147c7335480</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${server}:${tomcatPort}/${webapp}/</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Update JSON using JavaScript" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">var requestData = vars.get(&quot;RequestData&quot;);

//Parse the JSON to get a JavaScript data object
var objRequest = JSON.parse(requestData);

//Update the value of the data object
objRequest.depotOrderHeaders[0].depotOrddefaultTimeZoneCodeerNumber = &quot;${depotOrderNumber}&quot;;


objRequest.depotOrderHeaders[0].TimeZoneCode = &quot;COT&quot;;
objRequest.depotOrderHeaders[0].defaultTimeZoneCode = &quot;COT&quot;;

//Convert the data object back to a JSON string 
var strUpdatedRequest = JSON.stringify(objRequest);

//Update ${RequestData} to have the value of the updated JSON
vars.put(&quot;RequestData&quot;, strUpdatedRequest);
//vars.put(&quot;depotOrderHeader_depotOrderNumber&quot;, &quot;${output_depotOrderHeader_depotOrderNumber}&quot;);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="result" enabled="true">
              <stringProp name="JSON_PATH">$.submitResult.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Verify Create Depot Order Line" enabled="true">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DepotOrderLine Initialize:ca1626" enabled="true">
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" enabled="true">
              <collectionProp name="Arguments.arguments">
                <elementProp name="initialize" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">initialize</stringProp>
                  <stringProp name="Argument.value">true</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="domainCode" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">domainCode</stringProp>
                  <stringProp name="Argument.value">10usa</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
                <elementProp name="depotOrderNumber" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.name">depotOrderNumber</stringProp>
                  <stringProp name="Argument.value">ca1626</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                  <boolProp name="HTTPArgument.use_equals">true</boolProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${server}</stringProp>
            <stringProp name="HTTPSampler.port">${tomcatPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/${webapp}/api/erp/depotOrderLines</stringProp>
            <stringProp name="HTTPSampler.method">GET</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="ExtractFullResponse" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">RequestData</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NotFound</stringProp>
            </JSONPostProcessor>
            <hashTree/>
            <JSONPostProcessor guiclass="JSONPostProcessorGui" testclass="JSONPostProcessor" testname="depotOrderLine" enabled="true">
              <stringProp name="JSONPostProcessor.referenceNames">depotOrderLine</stringProp>
              <stringProp name="JSONPostProcessor.jsonPathExprs">$.data.depotOrderLines[0].depotOrderLine</stringProp>
              <stringProp name="JSONPostProcessor.match_numbers">1</stringProp>
              <stringProp name="JSONPostProcessor.defaultValues">NotFound</stringProp>
            </JSONPostProcessor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="depotOrderLine fieldChange" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${RequestData}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${server}</stringProp>
            <stringProp name="HTTPSampler.port">${tomcatPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/${webapp}/api/erp/depotOrderLines/fieldChange?fieldName=itemCode</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8
				</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${protocol}://${server}:${tomcatPort}
				</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64)
					AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87
					Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${server}:${tomcatPort}/${webapp}/
				</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Setup Step Data" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">var requestData = vars.get(&quot;RequestData&quot;);
var objRequest = JSON.parse(requestData);

// All the fields in dataset should be set here
objRequest.depotOrderLines[0].itemCode= &quot;02002&quot;;


var strUpdatedRequest = JSON.stringify(objRequest);
vars.put(&quot;RequestData&quot;, strUpdatedRequest);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="ExtractFullResponse" enabled="true">
              <stringProp name="VAR">RequestData</stringProp>
              <stringProp name="JSONPATH">$.data</stringProp>
              <stringProp name="DEFAULT">NotFound</stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="depotOrderLine fieldChange" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${RequestData}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${server}</stringProp>
            <stringProp name="HTTPSampler.port">${tomcatPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/${webapp}/api/erp/depotOrderLines/fieldChange?fieldName=lotSerial</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8
				</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">*/*</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${protocol}://${server}:${tomcatPort}
				</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64)
					AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87
					Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${server}:${tomcatPort}/${webapp}/
				</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Setup Step Data" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">var requestData = vars.get(&quot;RequestData&quot;);
var objRequest = JSON.parse(requestData);

// All the fields in dataset should be set here

objRequest.depotOrderLines[0].lotSerial= &quot;fvdsfew&quot;;

var strUpdatedRequest = JSON.stringify(objRequest);
vars.put(&quot;RequestData&quot;, strUpdatedRequest);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.gui.JSONPathExtractorGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor" testname="ExtractFullResponse" enabled="true">
              <stringProp name="VAR">RequestData</stringProp>
              <stringProp name="JSONPATH">$.data</stringProp>
              <stringProp name="DEFAULT">NotFound</stringProp>
              <stringProp name="VARIABLE"></stringProp>
              <stringProp name="SUBJECT">BODY</stringProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathextractor.JSONPathExtractor>
            <hashTree/>
          </hashTree>
          <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="DepotOrderLine Create: ${depotOrderLine_depotOrderNumber}" enabled="true">
            <boolProp name="HTTPSampler.postBodyRaw">true</boolProp>
            <elementProp name="HTTPsampler.Arguments" elementType="Arguments">
              <collectionProp name="Arguments.arguments">
                <elementProp name="" elementType="HTTPArgument">
                  <boolProp name="HTTPArgument.always_encode">false</boolProp>
                  <stringProp name="Argument.value">${RequestData}</stringProp>
                  <stringProp name="Argument.metadata">=</stringProp>
                </elementProp>
              </collectionProp>
            </elementProp>
            <stringProp name="HTTPSampler.domain">${server}</stringProp>
            <stringProp name="HTTPSampler.port">${tomcatPort}</stringProp>
            <stringProp name="HTTPSampler.protocol">${protocol}</stringProp>
            <stringProp name="HTTPSampler.contentEncoding">UTF-8</stringProp>
            <stringProp name="HTTPSampler.path">/${webapp}/api/erp/depotOrderLines</stringProp>
            <stringProp name="HTTPSampler.method">POST</stringProp>
            <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
            <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
            <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
            <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
            <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
            <stringProp name="HTTPSampler.connect_timeout"></stringProp>
            <stringProp name="HTTPSampler.response_timeout"></stringProp>
          </HTTPSamplerProxy>
          <hashTree>
            <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="Update JSON using JavaScript" enabled="true">
              <stringProp name="scriptLanguage">javascript</stringProp>
              <stringProp name="parameters"></stringProp>
              <stringProp name="filename"></stringProp>
              <stringProp name="cacheKey">false</stringProp>
              <stringProp name="script">var requestData = vars.get(&quot;RequestData&quot;);

//Parse the JSON to get a JavaScript data object
var objRequest = JSON.parse(requestData);

//Update the value of the data object
//objRequest.depotOrderLines[0].currencyCode = &quot;cny&quot;;
//objRequest.depotOrderLines[0].endUserCode = &quot;10c1002&quot;;
//objRequest.depotOrderLines[0].siteEntityCode = &quot;20usaco&quot;;
//objRequest.depotOrderLines[0].salesAccount = &quot;23&quot;;
//objRequest.depotOrderLines[0].salesSubAccount = &quot;233&quot;;
//objRequest.depotOrderLines[0].salesCostCenter = &quot;2333&quot;;
//objRequest.depotOrderLines[0].discountAccount = &quot;23333&quot;;
//objRequest.depotOrderLines[0].discountSubAccount = &quot;233333&quot;;
objRequest.depotOrderLines[0].discountCostCenter = &quot;2333333&quot;;

//Convert the data object back to a JSON string 
var strUpdatedRequest = JSON.stringify(objRequest);

//Update ${RequestData} to have the value of the updated JSON
vars.put(&quot;RequestData&quot;, strUpdatedRequest);</stringProp>
            </JSR223PreProcessor>
            <hashTree/>
            <com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion guiclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.gui.JSONPathAssertionGui" testclass="com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion" testname="result" enabled="true">
              <stringProp name="JSON_PATH">$.submitResult.success</stringProp>
              <stringProp name="EXPECTED_VALUE">true</stringProp>
              <boolProp name="JSONVALIDATION">true</boolProp>
              <boolProp name="EXPECT_NULL">false</boolProp>
              <boolProp name="INVERT">false</boolProp>
              <boolProp name="ISREGEX">false</boolProp>
            </com.atlantbh.jmeter.plugins.jsonutils.jsonpathassertion.JSONPathAssertion>
            <hashTree/>
            <HeaderManager guiclass="HeaderPanel" testclass="HeaderManager" testname="HTTP Header Manager" enabled="true">
              <collectionProp name="HeaderManager.headers">
                <elementProp name="Content-Type" elementType="Header">
                  <stringProp name="Header.name">Content-Type</stringProp>
                  <stringProp name="Header.value">application/json; charset=UTF-8</stringProp>
                </elementProp>
                <elementProp name="Accept-Language" elementType="Header">
                  <stringProp name="Header.name">Accept-Language</stringProp>
                  <stringProp name="Header.value">en-US,en;q=0.8</stringProp>
                </elementProp>
                <elementProp name="Accept" elementType="Header">
                  <stringProp name="Header.name">Accept</stringProp>
                  <stringProp name="Header.value">application/json, text/javascript, */*; q=0.01</stringProp>
                </elementProp>
                <elementProp name="Origin" elementType="Header">
                  <stringProp name="Header.name">Origin</stringProp>
                  <stringProp name="Header.value">${protocol}://${server}:${tomcatPort}</stringProp>
                </elementProp>
                <elementProp name="User-Agent" elementType="Header">
                  <stringProp name="Header.name">User-Agent</stringProp>
                  <stringProp name="Header.value">Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/56.0.2924.87 Safari/537.36</stringProp>
                </elementProp>
                <elementProp name="DNT" elementType="Header">
                  <stringProp name="Header.name">DNT</stringProp>
                  <stringProp name="Header.value">1</stringProp>
                </elementProp>
                <elementProp name="X-Requested-With" elementType="Header">
                  <stringProp name="Header.name">X-Requested-With</stringProp>
                  <stringProp name="Header.value">XMLHttpRequest</stringProp>
                </elementProp>
                <elementProp name="Referer" elementType="Header">
                  <stringProp name="Header.name">Referer</stringProp>
                  <stringProp name="Header.value">${protocol}://${server}:${tomcatPort}/${webapp}/</stringProp>
                </elementProp>
                <elementProp name="Accept-Encoding" elementType="Header">
                  <stringProp name="Header.name">Accept-Encoding</stringProp>
                  <stringProp name="Header.value">gzip, deflate</stringProp>
                </elementProp>
              </collectionProp>
            </HeaderManager>
            <hashTree/>
          </hashTree>
        </hashTree>
        <TransactionController guiclass="TransactionControllerGui" testclass="TransactionController" testname="Verify Create Depot Order Replacement Line" enabled="false">
          <boolProp name="TransactionController.includeTimers">false</boolProp>
          <boolProp name="TransactionController.parent">true</boolProp>
        </TransactionController>
        <hashTree>
          <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="set domain code and depot order number" enabled="true">
            <stringProp name="scriptLanguage">javascript</stringProp>
            <stringProp name="parameters"></stringProp>
            <stringProp name="filename"></stringProp>
            <stringProp name="cacheKey">false</stringProp>
            <stringProp name="script">vars.put(&quot;depotOrderLine_depotOrderNumber&quot;,&quot;CA1626&quot;);
vars.put(&quot;depotOrderLine_domainCode&quot;, &quot;${domainCode}&quot;);

vars.put(&quot;itemCode&quot;, &quot;02002&quot;);
vars.put(&quot;lotSerial&quot;, &quot;fdsfesw&quot;);

vars.put(&quot;depotOrderLine_currencyCode&quot;, &quot;cny&quot;);
vars.put(&quot;depotOrderLine_endUserCode&quot;, &quot;10c1002&quot;);
vars.put(&quot;depotOrderLine_siteEntityCode&quot;, &quot;20usaco&quot;);
vars.put(&quot;depotOrderLine_salesAccount&quot;, &quot;23&quot;);
vars.put(&quot;depotOrderLine_salesSubAccount&quot;, &quot;233&quot;);
vars.put(&quot;depotOrderLine_salesCostCenter&quot;, &quot;2333&quot;);
vars.put(&quot;depotOrderLine_discountAccount&quot;, &quot;23333&quot;);
vars.put(&quot;depotOrderLine_discountSubAccount&quot;, &quot;233333&quot;);
vars.put(&quot;depotOrderLine_discountCostCenter&quot;, &quot;2333333&quot;);</stringProp>
          </JSR223PreProcessor>
          <hashTree/>
          <IncludeController guiclass="IncludeControllerGui" testclass="IncludeController" testname="Save the line" enabled="true">
            <stringProp name="IncludeController.includepath">C:\svn\svn3\TestFragement\DepotOrder\Fragement_CreateDepotOrderReplaceLine.jmx</stringProp>
          </IncludeController>
          <hashTree/>
          <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug Sampler" enabled="true">
            <boolProp name="displayJMeterProperties">false</boolProp>
            <boolProp name="displayJMeterVariables">true</boolProp>
            <boolProp name="displaySystemProperties">false</boolProp>
          </DebugSampler>
          <hashTree/>
        </hashTree>
      </hashTree>
    </hashTree>
    <WorkBench guiclass="WorkBenchGui" testclass="WorkBench" testname="WorkBench" enabled="true">
      <boolProp name="WorkBench.save">true</boolProp>
    </WorkBench>
    <hashTree/>
  </hashTree>
</jmeterTestPlan>
